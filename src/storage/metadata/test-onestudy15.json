{
  "commit": "f2d7f33a59205a47705cce8ceb66e9d3dcbb995b",
  "chunks": [
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/OneStudyApplication.java",
      "class_name": "OneStudyApplication",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 11,
      "line_end": 23,
      "content": "@SpringBootApplication\n@PropertySource(value = \"classpath:errors.properties\", encoding = \"UTF-8\")\n@ComponentScan(\"com.edu\")\n@EnableCaching\n@EnableAspectJAutoProxy\n@EnableFeignClients(basePackages = \"com.edu.onestudy.thirdparty\")\npublic class OneStudyApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(OneStudyApplication.class, args);\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/OneStudyApplication.java",
      "class_name": "OneStudyApplication",
      "method_name": "main",
      "chunk_type": "other",
      "calls": [
        "SpringApplication.run"
      ],
      "called_by": [],
      "line_start": 19,
      "line_end": 21,
      "content": "public static void main(String[] args) {\n        SpringApplication.run(OneStudyApplication.class, args);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/annotations/handler/LogsActivityAOPHandler.java",
      "class_name": "LogsActivityAOPHandler",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 28,
      "line_end": 138,
      "content": "@Aspect\n@Component\n@Order(value = 1)\n@Slf4j\npublic class LogsActivityAOPHandler extends BaseService {\n\n    private final HttpServletRequest httpServletRequest;\n\n    public static final String service_name = \"service_name\";\n\n    public static final String request_path = \"request_path\";\n\n    public static final String query_string = \"query_string\";\n\n    public static final String code_file = \"code_file\";\n\n    public static final String method_name = \"method_name\";\n\n    public static final String message_type = \"message_type\";\n\n    public static final String request_id = \"request_id\";\n\n    public static final String request = \"request\";\n\n    public static final String response = \"response\";\n\n    public static final String execution_time = \"execution_time\";\n\n    public static final String status_code = \"status_code\";\n\n    public static final String error_code = \"error_code\";\n\n    public static final String headers = \"headers\";\n\n    public LogsActivityAOPHandler(HttpServletRequest httpServletRequest) {\n        this.httpServletRequest = httpServletRequest;\n    }\n\n    @Around(\"execution(* *(..)) && @annotation(logsActivityAnnotation)\")\n    @SneakyThrows\n    public Object logsActivityAnnotation(ProceedingJoinPoint point, LogsActivityAnnotation logsActivityAnnotation) {\n        // Parameter\n        Object objectRequest = point.getArgs().length > 0 ? point.getArgs()[0] : httpServletRequest.getParameterMap();\n        String requestId = getRequestId();\n        // Log request\n        Map<String, Object> mapCustomizeLog = new HashMap<>();\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_path, httpServletRequest.getRequestURI());\n        mapCustomizeLog.put(LogsActivityAOPHandler.query_string, httpServletRequest.getQueryString());\n        mapCustomizeLog.put(LogsActivityAOPHandler.code_file, point.getSignature().getDeclaringTypeName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.method_name, point.getSignature().getName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.message_type, LogsActivityAOPHandler.request);\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_id, requestId);\n        mapCustomizeLog.put(LogsActivityAOPHandler.headers, Utils.redact(JsonUtils.convertObjectToString(getHeaders())));\n        displayLog(objectRequest, mapCustomizeLog);\n\n        // Process and get response\n        long timeStart = new Date().getTime();\n        Object objectResponse = point.proceed();\n\n        // Log response\n        long timeHandle = new Date().getTime() - timeStart;\n        mapCustomizeLog.put(LogsActivityAOPHandler.execution_time, timeHandle);\n        mapCustomizeLog.put(LogsActivityAOPHandler.code_file, point.getSignature().getDeclaringTypeName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.method_name, point.getSignature().getName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_id, requestId);\n        mapCustomizeLog.put(LogsActivityAOPHandler.message_type, LogsActivityAOPHandler.response);\n        mapCustomizeLog.put(LogsActivityAOPHandler.headers, Utils.redact(JsonUtils.convertObjectToString(getHeaders())));\n\n        displayLog(objectResponse, mapCustomizeLog);\n        return objectResponse;\n    }\n\n    private void displayLog(Object messageObject, Map<String, Object> mapCustomizeLog) throws JsonProcessingException {\n        if (messageObject instanceof Exception) {\n            Exception e = (Exception) messageObject;\n            if (e instanceof MethodArgumentNotValidException) {\n                log.info(Utils.redact(objectMapper.writeValueAsString(getRequestBody())), entries(mapCustomizeLog));\n                return;\n            } else if (e instanceof BusinessException) {\n                BusinessException businessException = (BusinessException) e;\n                if (!ObjectUtils.isEmpty(businessException.getError())) {\n                    if (!ObjectUtils.isEmpty(businessException.getError().getMessage())) {\n                        log.info(Utils.redact(e.getMessage()), entries(mapCustomizeLog));\n                        return;\n                    } else if (!ObjectUtils.isEmpty(businessException.getError().getData())) {\n                        log.info(Utils.redact(objectMapper.writeValueAsString(businessException.getError().getData())),\n                                entries(mapCustomizeLog));\n                        return;\n                    }\n                }\n            } else if (!ObjectUtils.isEmpty(e.getMessage())) {\n                log.info(Utils.redact(e.getMessage()), entries(mapCustomizeLog));\n            }\n\n            if (mapCustomizeLog.get(LogsActivityAOPHandler.message_type).toString().equals(LogsActivityAOPHandler.request)) {\n                log.error(\"Request_id: {}, Exception: \", getRequestId(), e);\n            }\n        } else {\n            if (mapCustomizeLog.get(LogsActivityAOPHandler.message_type).toString().equals(LogsActivityAOPHandler.response)) {\n                if (messageObject instanceof ResponseEntity) {\n                    ResponseEntity responseEntity = (ResponseEntity) messageObject;\n                    BaseResponse baseResponse = JsonUtils.getGenericObject(responseEntity.getBody(), BaseResponse.class);\n                    log.info(Utils.redact(objectMapper.writeValueAsString(baseResponse)), entries(mapCustomizeLog));\n                    return;\n                }\n            }\n\n            log.info(Utils.redact(objectMapper.writeValueAsString(messageObject)), entries(mapCustomizeLog));\n        }\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/annotations/handler/LogsActivityAOPHandler.java",
      "class_name": "LogsActivityAOPHandler",
      "method_name": "logsActivityAnnotation",
      "chunk_type": "other",
      "calls": [
        "JsonUtils.convertObjectToString",
        "LogsActivityAOPHandler.displayLog",
        "LogsActivityAOPHandler.getHeaders",
        "LogsActivityAOPHandler.getRequestId",
        "ProceedingJoinPoint.getArgs",
        "ProceedingJoinPoint.getSignature",
        "ProceedingJoinPoint.proceed",
        "Utils.redact",
        "unknown.getDeclaringTypeName",
        "unknown.getName",
        "unknown.getParameterMap",
        "unknown.getQueryString",
        "unknown.getRequestURI",
        "unknown.getTime",
        "unknown.put"
      ],
      "called_by": [],
      "line_start": 66,
      "line_end": 98,
      "content": "@Around(\"execution(* *(..)) && @annotation(logsActivityAnnotation)\")\n    @SneakyThrows\n    public Object logsActivityAnnotation(ProceedingJoinPoint point, LogsActivityAnnotation logsActivityAnnotation) {\n        // Parameter\n        Object objectRequest = point.getArgs().length > 0 ? point.getArgs()[0] : httpServletRequest.getParameterMap();\n        String requestId = getRequestId();\n        // Log request\n        Map<String, Object> mapCustomizeLog = new HashMap<>();\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_path, httpServletRequest.getRequestURI());\n        mapCustomizeLog.put(LogsActivityAOPHandler.query_string, httpServletRequest.getQueryString());\n        mapCustomizeLog.put(LogsActivityAOPHandler.code_file, point.getSignature().getDeclaringTypeName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.method_name, point.getSignature().getName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.message_type, LogsActivityAOPHandler.request);\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_id, requestId);\n        mapCustomizeLog.put(LogsActivityAOPHandler.headers, Utils.redact(JsonUtils.convertObjectToString(getHeaders())));\n        displayLog(objectRequest, mapCustomizeLog);\n\n        // Process and get response\n        long timeStart = new Date().getTime();\n        Object objectResponse = point.proceed();\n\n        // Log response\n        long timeHandle = new Date().getTime() - timeStart;\n        mapCustomizeLog.put(LogsActivityAOPHandler.execution_time, timeHandle);\n        mapCustomizeLog.put(LogsActivityAOPHandler.code_file, point.getSignature().getDeclaringTypeName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.method_name, point.getSignature().getName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_id, requestId);\n        mapCustomizeLog.put(LogsActivityAOPHandler.message_type, LogsActivityAOPHandler.response);\n        mapCustomizeLog.put(LogsActivityAOPHandler.headers, Utils.redact(JsonUtils.convertObjectToString(getHeaders())));\n\n        displayLog(objectResponse, mapCustomizeLog);\n        return objectResponse;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/annotations/handler/LogsActivityAOPHandler.java",
      "class_name": "LogsActivityAOPHandler",
      "method_name": "displayLog",
      "chunk_type": "other",
      "calls": [
        "JsonUtils.getGenericObject",
        "LogsActivityAOPHandler.entries",
        "LogsActivityAOPHandler.getRequestBody",
        "LogsActivityAOPHandler.getRequestId",
        "Map<String, Object>.get",
        "ObjectUtils.isEmpty",
        "Utils.redact",
        "unknown.equals",
        "unknown.error",
        "unknown.getBody",
        "unknown.getData",
        "unknown.getError",
        "unknown.getMessage",
        "unknown.info",
        "unknown.toString",
        "unknown.writeValueAsString"
      ],
      "called_by": [
        "LogsActivityAOPHandler.logsActivityAnnotation"
      ],
      "line_start": 100,
      "line_end": 137,
      "content": "private void displayLog(Object messageObject, Map<String, Object> mapCustomizeLog) throws JsonProcessingException {\n        if (messageObject instanceof Exception) {\n            Exception e = (Exception) messageObject;\n            if (e instanceof MethodArgumentNotValidException) {\n                log.info(Utils.redact(objectMapper.writeValueAsString(getRequestBody())), entries(mapCustomizeLog));\n                return;\n            } else if (e instanceof BusinessException) {\n                BusinessException businessException = (BusinessException) e;\n                if (!ObjectUtils.isEmpty(businessException.getError())) {\n                    if (!ObjectUtils.isEmpty(businessException.getError().getMessage())) {\n                        log.info(Utils.redact(e.getMessage()), entries(mapCustomizeLog));\n                        return;\n                    } else if (!ObjectUtils.isEmpty(businessException.getError().getData())) {\n                        log.info(Utils.redact(objectMapper.writeValueAsString(businessException.getError().getData())),\n                                entries(mapCustomizeLog));\n                        return;\n                    }\n                }\n            } else if (!ObjectUtils.isEmpty(e.getMessage())) {\n                log.info(Utils.redact(e.getMessage()), entries(mapCustomizeLog));\n            }\n\n            if (mapCustomizeLog.get(LogsActivityAOPHandler.message_type).toString().equals(LogsActivityAOPHandler.request)) {\n                log.error(\"Request_id: {}, Exception: \", getRequestId(), e);\n            }\n        } else {\n            if (mapCustomizeLog.get(LogsActivityAOPHandler.message_type).toString().equals(LogsActivityAOPHandler.response)) {\n                if (messageObject instanceof ResponseEntity) {\n                    ResponseEntity responseEntity = (ResponseEntity) messageObject;\n                    BaseResponse baseResponse = JsonUtils.getGenericObject(responseEntity.getBody(), BaseResponse.class);\n                    log.info(Utils.redact(objectMapper.writeValueAsString(baseResponse)), entries(mapCustomizeLog));\n                    return;\n                }\n            }\n\n            log.info(Utils.redact(objectMapper.writeValueAsString(messageObject)), entries(mapCustomizeLog));\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/annotations/handler/ValueOfEnumValidator.java",
      "class_name": "ValueOfEnumValidator",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 11,
      "line_end": 29,
      "content": "public class ValueOfEnumValidator implements ConstraintValidator<ValueOfEnum, CharSequence> {\n    private List<String> acceptedValues;\n\n    @Override\n    public void initialize(ValueOfEnum annotation) {\n        acceptedValues = Stream.of(annotation.enumClass().getEnumConstants())\n                .map(Enum::name)\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    public boolean isValid(CharSequence value, ConstraintValidatorContext context) {\n        if (value == null) {\n            return true;\n        }\n\n        return acceptedValues.contains(value.toString());\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/annotations/handler/ValueOfEnumValidator.java",
      "class_name": "ValueOfEnumValidator",
      "method_name": "initialize",
      "chunk_type": "other",
      "calls": [
        "Collectors.toList",
        "Stream.of",
        "Stream.of(annotation.enumClass().getEnumConstants())\n                .map(Enum::name).collect",
        "Stream.of(annotation.enumClass().getEnumConstants()).map",
        "ValueOfEnum.enumClass",
        "unknown.getEnumConstants"
      ],
      "called_by": [],
      "line_start": 14,
      "line_end": 19,
      "content": "@Override\n    public void initialize(ValueOfEnum annotation) {\n        acceptedValues = Stream.of(annotation.enumClass().getEnumConstants())\n                .map(Enum::name)\n                .collect(Collectors.toList());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/annotations/handler/ValueOfEnumValidator.java",
      "class_name": "ValueOfEnumValidator",
      "method_name": "isValid",
      "chunk_type": "other",
      "calls": [
        "CharSequence.toString",
        "unknown.contains"
      ],
      "called_by": [],
      "line_start": 21,
      "line_end": 28,
      "content": "@Override\n    public boolean isValid(CharSequence value, ConstraintValidatorContext context) {\n        if (value == null) {\n            return true;\n        }\n\n        return acceptedValues.contains(value.toString());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/config/AppConfig.java",
      "class_name": "AppConfig",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 13,
      "line_end": 36,
      "content": "@Configuration\npublic class AppConfig {\n\n    @Value(\"${cors.whitelist}\")\n    private String corsWhitelistString;\n\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        List<String> allowedOrigins = Arrays.stream(corsWhitelistString.split(\",\"))\n                .map(String::trim)\n                .filter(origin -> !origin.isEmpty())\n                .toList();\n\n        CorsConfiguration configuration = new CorsConfiguration();\n        configuration.setAllowedOrigins(allowedOrigins);\n        configuration.setAllowedMethods(List.of(\"HEAD\", \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"));\n        configuration.setAllowCredentials(true);\n        configuration.setAllowedHeaders(List.of(\"*\"));\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", configuration);\n        return source;\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/config/AppConfig.java",
      "class_name": "AppConfig",
      "method_name": "corsConfigurationSource",
      "chunk_type": "other",
      "calls": [
        "Arrays.stream",
        "Arrays.stream(corsWhitelistString.split(\",\"))\n                .map(String::trim)\n                .filter(origin -> !origin.isEmpty()).toList",
        "Arrays.stream(corsWhitelistString.split(\",\"))\n                .map(String::trim).filter",
        "Arrays.stream(corsWhitelistString.split(\",\")).map",
        "List.of",
        "unknown.isEmpty",
        "unknown.registerCorsConfiguration",
        "unknown.setAllowCredentials",
        "unknown.setAllowedHeaders",
        "unknown.setAllowedMethods",
        "unknown.setAllowedOrigins",
        "unknown.split"
      ],
      "called_by": [],
      "line_start": 19,
      "line_end": 35,
      "content": "@Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        List<String> allowedOrigins = Arrays.stream(corsWhitelistString.split(\",\"))\n                .map(String::trim)\n                .filter(origin -> !origin.isEmpty())\n                .toList();\n\n        CorsConfiguration configuration = new CorsConfiguration();\n        configuration.setAllowedOrigins(allowedOrigins);\n        configuration.setAllowedMethods(List.of(\"HEAD\", \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"));\n        configuration.setAllowCredentials(true);\n        configuration.setAllowedHeaders(List.of(\"*\"));\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", configuration);\n        return source;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/config/AwsS3Config.java",
      "class_name": "AwsS3Config",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 11,
      "line_end": 31,
      "content": "@Configuration\npublic class AwsS3Config {\n    @Value(\"${aws.accessKey}\")\n    private String accessKey;\n\n    @Value(\"${aws.secretKey}\")\n    private String secretKey;\n\n    @Value(\"${aws.region}\")\n    private String region;\n\n    @Bean\n    public S3Client getS3Client() {\n        AwsBasicCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);\n\n        return S3Client.builder()\n                .region(Region.of(region))\n                .credentialsProvider(StaticCredentialsProvider.create(credentials))\n                .build();\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/config/AwsS3Config.java",
      "class_name": "AwsS3Config",
      "method_name": "getS3Client",
      "chunk_type": "other",
      "calls": [
        "AwsBasicCredentials.create",
        "Region.of",
        "S3Client.builder",
        "S3Client.builder()\n                .region(Region.of(region))\n                .credentialsProvider(StaticCredentialsProvider.create(credentials)).build",
        "S3Client.builder()\n                .region(Region.of(region)).credentialsProvider",
        "S3Client.builder().region",
        "StaticCredentialsProvider.create"
      ],
      "called_by": [],
      "line_start": 22,
      "line_end": 30,
      "content": "@Bean\n    public S3Client getS3Client() {\n        AwsBasicCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);\n\n        return S3Client.builder()\n                .region(Region.of(region))\n                .credentialsProvider(StaticCredentialsProvider.create(credentials))\n                .build();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/config/StringListConverter.java",
      "class_name": "StringListConverter",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 37,
      "content": "@Converter\npublic class StringListConverter implements AttributeConverter<List<String>, String> {\n\n    private static final String SPLIT_CHAR = \",\"; // Or any other suitable delimiter\n\n    @Override\n    public String convertToDatabaseColumn(List<String> stringList) {\n        if (stringList == null || stringList.isEmpty()) {\n            return null;\n        }\n        // For TEXT[], PostgreSQL expects the array literal format, e.g., \"{tag1,tag2}\"\n        // However, Hibernate Types handles this directly. For a simple comma-separated\n        // string, this converter is a fallback.\n        // For true TEXT[] mapping with hibernate-types-52, you might not need this converter\n        // if you use @TypeDef(name = \"list-array\", typeClass = ListArrayType.class)\n        // and a List<String> field. But it's good for demonstration if you want manual control.\n        return \"{\" + String.join(SPLIT_CHAR, stringList) + \"}\";\n    }\n\n    @Override\n    public List<String> convertToEntityAttribute(String string) {\n        if (string == null || string.isEmpty()) {\n            return null;\n        }\n        // Remove curly braces if present from PostgreSQL array literal\n        String cleanedString = string.replaceAll(\"^\\\\{|\\\\}$\", \"\");\n        return Arrays.asList(cleanedString.split(SPLIT_CHAR));\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/config/StringListConverter.java",
      "class_name": "StringListConverter",
      "method_name": "convertToDatabaseColumn",
      "chunk_type": "other",
      "calls": [
        "List<String>.isEmpty",
        "String.join"
      ],
      "called_by": [],
      "line_start": 14,
      "line_end": 26,
      "content": "@Override\n    public String convertToDatabaseColumn(List<String> stringList) {\n        if (stringList == null || stringList.isEmpty()) {\n            return null;\n        }\n        // For TEXT[], PostgreSQL expects the array literal format, e.g., \"{tag1,tag2}\"\n        // However, Hibernate Types handles this directly. For a simple comma-separated\n        // string, this converter is a fallback.\n        // For true TEXT[] mapping with hibernate-types-52, you might not need this converter\n        // if you use @TypeDef(name = \"list-array\", typeClass = ListArrayType.class)\n        // and a List<String> field. But it's good for demonstration if you want manual control.\n        return \"{\" + String.join(SPLIT_CHAR, stringList) + \"}\";\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/config/StringListConverter.java",
      "class_name": "StringListConverter",
      "method_name": "convertToEntityAttribute",
      "chunk_type": "other",
      "calls": [
        "Arrays.asList",
        "String.isEmpty",
        "String.replaceAll",
        "unknown.split"
      ],
      "called_by": [],
      "line_start": 28,
      "line_end": 36,
      "content": "@Override\n    public List<String> convertToEntityAttribute(String string) {\n        if (string == null || string.isEmpty()) {\n            return null;\n        }\n        // Remove curly braces if present from PostgreSQL array literal\n        String cleanedString = string.replaceAll(\"^\\\\{|\\\\}$\", \"\");\n        return Arrays.asList(cleanedString.split(SPLIT_CHAR));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/constant/Constant.java",
      "class_name": "Constant",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 3,
      "line_end": 12,
      "content": "public final class Constant {\n\n    public static final Integer COURSE_CODE_LENGTH = 6;\n\n    public static final Integer SIGNED_URL_EXPIRATION = 60 * 1000;\n\n    public static final String STORAGE_AWS = \"AWS_S3_NORMAL\";\n\n    public static final String STORAGE_GCP = \"STORAGE_GCP\";\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/constant/ErrorConstant.java",
      "class_name": "ErrorConstant",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 3,
      "line_end": 74,
      "content": "public class ErrorConstant {\n\n    private ErrorConstant() {}\n\n    /**\n     * Write the error code prefixed with 200 below\n     * 200\n     */\n    public static final int SUCCESS = 200000;\n    public static final int SUCCESS_200 = 200;\n\n    /**\n     * Write the error code prefixed with 400 below\n     * 400\n     */\n    public static final int INVALID_PARAMETERS = 4000001;\n\n    public static final int SYSTEM_CONFIGURATION_NOT_FOUND = 4004208;\n\n    public static final int TRANSACTION_NOT_FOUND = 4001210;\n\n    public static final int TRANSACTION_NOT_EXIST = 4001218;\n\n    public static final int TRANSACTION_MUST_NOT_REFUND = 4001212;\n\n    public static final int TRANSACTION_NOT_SUCCESS = 4001213;\n\n    public static final int TRANSACTION_NOT_ENOUGH_AMOUNT = 4001214;\n\n    public static final int HTTP_CONNECTION_ERROR  = 4009000;\n\n    public static final int NULL_META_DATA_RESPONSE  = 4009001;\n\n    /**\n     * Write the error code prefixed with 401 below\n     * 401\n     */\n    public static final int UNAUTHORIZED = 4010001;\n    public static final int USERNAME_PASSWORD_WRONG = 4010002;\n\n    /**\n     * Write the error code prefixed with 403 below\n     * 403\n     */\n    public static final int FORBIDDEN_ERROR = 4030001;\n\n    /**\n     *  Write the error code prefixed with 404 below\n     * 404\n     */\n    public static final int NOT_FOUND = 4040001;\n    public static final int QUIZ_NOT_FOUND = 4040002;\n    public static final int QUIZ_ATTEMPT_NOT_FOUND = 4040003;\n    public static final int QUIZ_ATTEMPT_SUBMITTED = 4040004;\n    public static final int QUESTION_DOES_NOT_BELONG_TO_QUIZ = 4040005;\n    public static final int QUESTION_NOT_FOUND = 4040006;\n    public static final int QUIZ_ATTEMPT_NOT_BELONG_TO_USER = 4040007;\n    public static final int QUIZ_TIME_LIMIT_EXCEEDED = 4040008;\n    public static final int QUIZ_NOT_SAVED = 4040009;\n    public static final int GET_PRONUNCIATION_SAMPLE_ERROR = 4040010;\n    public static final int GET_PRONUNCIATION_ACCURACY_ERROR = 4040011;\n\n    /** @Get_VA_number_information*/\n    public static final int INVALID_VA_NUMBER = 40010525;\n\n    /**\n     * Write the error code prefixed with 500 below\n     * 500\n     */\n    public static final int INTERNAL_SERVER_ERROR = 5001001;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/constant/RequestKeyConstant.java",
      "class_name": "RequestKeyConstant",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 3,
      "line_end": 33,
      "content": "public class RequestKeyConstant {\n\n    private RequestKeyConstant() {}\n\n    public static final String REQUEST_ID = \"request_id\";\n\n    public static final String THREAD_REQUEST_ID = \"requestId\";\n\n    public static final String REQUEST_PARAMETERS = \"request_parameters\";\n\n    public static final String REQUEST_BODY = \"request_body\";\n\n    public static final String URI = \"uri\";\n\n    public static final String X_REQUEST_ID = \"X-Request-ID\";\n\n    public static final String CONTENT_TYPE = \"Content-Type\";\n\n    public static final String USER_AGENT = \"User-Agent\";\n\n    public static final String X_API_KEY = \"x-api-key\";\n\n    public static final String X_API_SECRET = \"x-api-secret\";\n\n    public static final String API_KEY = \"api_key\";\n\n    public static final String API_SECRET = \"api_secret\";\n\n    public static final String AUTHORIZATION = \"Authorization\";\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/constant/Symbol.java",
      "class_name": "Symbol",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 3,
      "line_end": 20,
      "content": "public class Symbol {\n    public static final String BACK_SLASH = \"\\\\\";\n    public static final String B_SLASH = \"/\";\n    public static final String ARRAY_OF_OBJECTS_START = \"[{\";\n    public static final String UNDERSCORE = \"_\";\n    public static final String COLON = \":\";\n    public static final String COMMA = \",\";\n    public static final String COMMA_SPACE= \", \";\n    public static final char PLUS = '+';\n    public static final char MINUS = '-';\n    public static final String EQUAL = \"=\";\n    public static final String VN_CURRENCY = \"đồng\";\n    public static final String SPACE = \" \";\n    public static final String AT_SIGN = \"@\";\n    public static final String LOGICAL_AND = \"&&\";\n    public static final String OPEN_BRACKET = \"[\";\n    public static final String CLOSE_BRACKET = \"]\";\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/constant/UrlConstant.java",
      "class_name": "UrlConstant",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 3,
      "line_end": 28,
      "content": "public class UrlConstant {\n\n    private UrlConstant() {}\n\n    public static final String HEALTH_CHECK_URL = \"/actuator/health\";\n\n    public enum TransactionLogClientServiceApi {\n        GET_TRANSACTION(\"internal/transaction-history/v1/transactions/\"),\n        GET_LIST_TRANSACTION(\"internal/transaction-history/v1/transaction-filters\"),\n        ;\n\n        private String value;\n\n        private TransactionLogClientServiceApi(String value) {\n            this.value = value;\n        }\n\n        public String getValue() {\n            return value;\n        }\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/AuthController.java",
      "class_name": "AuthController",
      "method_name": null,
      "chunk_type": "controller",
      "calls": [],
      "called_by": [],
      "line_start": 15,
      "line_end": 33,
      "content": "@RestController\n@RequestMapping(\"/api/v1/auth\")\n@Slf4j\npublic class AuthController {\n\n    private final BaseService baseService;\n\n    private final AuthService authService;\n\n    public AuthController(BaseService baseService, AuthService authService) {\n        this.baseService = baseService;\n        this.authService = authService;\n    }\n\n    @GetMapping(\"/me\")\n    public BaseResponse<AuthProfileResponse> whoAmI(@CurrentUser UserPrincipal requester) {\n        return baseService.ofSucceeded(authService.getAuthProfile(requester.getId().toString()));\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/AuthController.java",
      "class_name": "AuthController",
      "method_name": "whoAmI",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.getAuthProfile",
        "unknown.ofSucceeded",
        "unknown.toString"
      ],
      "called_by": [],
      "line_start": 29,
      "line_end": 32,
      "content": "@GetMapping(\"/me\")\n    public BaseResponse<AuthProfileResponse> whoAmI(@CurrentUser UserPrincipal requester) {\n        return baseService.ofSucceeded(authService.getAuthProfile(requester.getId().toString()));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "GET"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuestionController.java",
      "class_name": "QuestionController",
      "method_name": null,
      "chunk_type": "controller",
      "calls": [],
      "called_by": [],
      "line_start": 6,
      "line_end": 12,
      "content": "@RestController\n@RequestMapping(\"/api/v1/questions\")\npublic class QuestionController {\n\n\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": null,
      "chunk_type": "controller",
      "calls": [],
      "called_by": [],
      "line_start": 18,
      "line_end": 124,
      "content": "@RestController\n@RequestMapping(\"/api/v1/quizzes\")\npublic class QuizController {\n\n    private final QuizService quizService;\n\n    private final BaseService baseService;\n\n    public QuizController(QuizService quizService, BaseService baseService) {\n        this.quizService = quizService;\n        this.baseService = baseService;\n    }\n\n    @PostMapping\n    @LogsActivityAnnotation\n    BaseResponse<?> createQuiz(@RequestBody CreateQuizDto request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.createQuiz(request, currentUser.getId()));\n    }\n\n    @PutMapping\n    @LogsActivityAnnotation\n    BaseResponse<?> updateQuiz(@RequestBody CreateQuizDto request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.updateQuiz(request));\n    }\n\n    @GetMapping(\"/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<Quiz> getQuizById(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getById(id));\n    }\n\n    @GetMapping(\"/{id}/stats\")\n    @LogsActivityAnnotation\n    BaseResponse<Quiz> getQuizStatsById(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getQuizStatsById(id));\n    }\n\n    @GetMapping(\"/my\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getMyQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getMyQuizzes(currentUser.getId()));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<?> deleteQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.deleteQuiz(id);\n        return baseService.ofSucceeded(null);\n    }\n\n    @PostMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<?> saveQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.saveQuiz(id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }\n\n    @DeleteMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<?> unsaveQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.unsaveQuiz(id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }\n\n    @GetMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<List<UserSavedQuiz>> getListUserSavedQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getUserSavedQuiz(id, currentUser.getId()));\n    }\n\n    @GetMapping(\"/save\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getSavedQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getSavedQuizzes(currentUser.getId()));\n    }\n\n    @PostMapping(\"/{id}/attempts\")\n    @LogsActivityAnnotation\n    BaseResponse<?> attemptQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.startQuiz(id, currentUser.getId()));\n    }\n\n    @GetMapping(\"/attempts\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getQuizAttempts(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getMyQuizAttempts(currentUser.getId().toString()));\n    }\n\n    @GetMapping(\"/attempts/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<QuizAttempt> getQuizAttempt(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getAttempt(id, currentUser.getId()));\n    }\n\n    @PostMapping(\"/attempts/{attempt_id}/submit-question\")\n    @LogsActivityAnnotation\n    BaseResponse<?> submitQuizQuestion(@PathVariable String attempt_id, @RequestBody SubmitAnswerRequest request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.submitQuizQuestion(attempt_id, request, currentUser.getId()));\n    }\n\n    @PostMapping(\"/attempts/{attempt_id}/complete\")\n    @LogsActivityAnnotation\n    BaseResponse<?> submitQuizComplete(@PathVariable String attempt_id, @CurrentUser UserPrincipal currentUser) {\n        quizService.submitQuizComplete(attempt_id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "createQuiz",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.createQuiz",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 31,
      "line_end": 35,
      "content": "@PostMapping\n    @LogsActivityAnnotation\n    BaseResponse<?> createQuiz(@RequestBody CreateQuizDto request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.createQuiz(request, currentUser.getId()));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "POST"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "updateQuiz",
      "chunk_type": "controller",
      "calls": [
        "unknown.ofSucceeded",
        "unknown.updateQuiz"
      ],
      "called_by": [],
      "line_start": 37,
      "line_end": 41,
      "content": "@PutMapping\n    @LogsActivityAnnotation\n    BaseResponse<?> updateQuiz(@RequestBody CreateQuizDto request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.updateQuiz(request));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "PUT"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "getQuizById",
      "chunk_type": "controller",
      "calls": [
        "unknown.getById",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 43,
      "line_end": 47,
      "content": "@GetMapping(\"/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<Quiz> getQuizById(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getById(id));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "GET"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "getQuizStatsById",
      "chunk_type": "controller",
      "calls": [
        "unknown.getQuizStatsById",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 49,
      "line_end": 53,
      "content": "@GetMapping(\"/{id}/stats\")\n    @LogsActivityAnnotation\n    BaseResponse<Quiz> getQuizStatsById(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getQuizStatsById(id));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "GET"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "getMyQuizzes",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.getMyQuizzes",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 55,
      "line_end": 59,
      "content": "@GetMapping(\"/my\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getMyQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getMyQuizzes(currentUser.getId()));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "GET"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "deleteQuiz",
      "chunk_type": "controller",
      "calls": [
        "unknown.deleteQuiz",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 61,
      "line_end": 66,
      "content": "@DeleteMapping(\"/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<?> deleteQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.deleteQuiz(id);\n        return baseService.ofSucceeded(null);\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "DELETE"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "saveQuiz",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.saveQuiz"
      ],
      "called_by": [],
      "line_start": 68,
      "line_end": 73,
      "content": "@PostMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<?> saveQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.saveQuiz(id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "POST"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "unsaveQuiz",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.unsaveQuiz"
      ],
      "called_by": [],
      "line_start": 75,
      "line_end": 80,
      "content": "@DeleteMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<?> unsaveQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.unsaveQuiz(id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "DELETE"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "getListUserSavedQuiz",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.getUserSavedQuiz",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 82,
      "line_end": 86,
      "content": "@GetMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<List<UserSavedQuiz>> getListUserSavedQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getUserSavedQuiz(id, currentUser.getId()));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "GET"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "getSavedQuizzes",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.getSavedQuizzes",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 88,
      "line_end": 92,
      "content": "@GetMapping(\"/save\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getSavedQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getSavedQuizzes(currentUser.getId()));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "GET"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "attemptQuiz",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.startQuiz"
      ],
      "called_by": [],
      "line_start": 94,
      "line_end": 98,
      "content": "@PostMapping(\"/{id}/attempts\")\n    @LogsActivityAnnotation\n    BaseResponse<?> attemptQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.startQuiz(id, currentUser.getId()));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "POST"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "getQuizAttempts",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.getMyQuizAttempts",
        "unknown.ofSucceeded",
        "unknown.toString"
      ],
      "called_by": [],
      "line_start": 100,
      "line_end": 104,
      "content": "@GetMapping(\"/attempts\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getQuizAttempts(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getMyQuizAttempts(currentUser.getId().toString()));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "GET"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "getQuizAttempt",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.getAttempt",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 106,
      "line_end": 110,
      "content": "@GetMapping(\"/attempts/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<QuizAttempt> getQuizAttempt(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getAttempt(id, currentUser.getId()));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "GET"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "submitQuizQuestion",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.submitQuizQuestion"
      ],
      "called_by": [],
      "line_start": 112,
      "line_end": 116,
      "content": "@PostMapping(\"/attempts/{attempt_id}/submit-question\")\n    @LogsActivityAnnotation\n    BaseResponse<?> submitQuizQuestion(@PathVariable String attempt_id, @RequestBody SubmitAnswerRequest request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.submitQuizQuestion(attempt_id, request, currentUser.getId()));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "POST"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/QuizController.java",
      "class_name": "QuizController",
      "method_name": "submitQuizComplete",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.submitQuizComplete"
      ],
      "called_by": [],
      "line_start": 118,
      "line_end": 123,
      "content": "@PostMapping(\"/attempts/{attempt_id}/complete\")\n    @LogsActivityAnnotation\n    BaseResponse<?> submitQuizComplete(@PathVariable String attempt_id, @CurrentUser UserPrincipal currentUser) {\n        quizService.submitQuizComplete(attempt_id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "POST"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/ResourceController.java",
      "class_name": "ResourceController",
      "method_name": null,
      "chunk_type": "controller",
      "calls": [],
      "called_by": [],
      "line_start": 13,
      "line_end": 42,
      "content": "@RestController\n@RequestMapping(\"/api/v1/resources\")\npublic class ResourceController {\n\n    private final BaseService baseService;\n\n    private final ResourceService resourceService;\n\n    public ResourceController(BaseService baseService, ResourceService resourceService) {\n        this.baseService = baseService;\n        this.resourceService = resourceService;\n    }\n\n    @PostMapping()\n    public BaseResponse<Resource> uploadResource(\n            @CurrentUser UserPrincipal requester,\n            @RequestParam(\"file\") MultipartFile file\n    ) {\n        return baseService.ofSucceeded(resourceService.uploadResource(file, requester.getId()));\n    }\n\n    @GetMapping(\"/{id}\")\n    public BaseResponse<GetResourceResponse> getResource(\n            @CurrentUser UserPrincipal requester,\n            @PathVariable String id\n    ) {\n        return baseService.ofSucceeded(resourceService.getResource(id, requester.getId()));\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/ResourceController.java",
      "class_name": "ResourceController",
      "method_name": "uploadResource",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.uploadResource"
      ],
      "called_by": [],
      "line_start": 26,
      "line_end": 32,
      "content": "@PostMapping()\n    public BaseResponse<Resource> uploadResource(\n            @CurrentUser UserPrincipal requester,\n            @RequestParam(\"file\") MultipartFile file\n    ) {\n        return baseService.ofSucceeded(resourceService.uploadResource(file, requester.getId()));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "POST"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/ResourceController.java",
      "class_name": "ResourceController",
      "method_name": "getResource",
      "chunk_type": "controller",
      "calls": [
        "UserPrincipal.getId",
        "unknown.getResource",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 34,
      "line_end": 40,
      "content": "@GetMapping(\"/{id}\")\n    public BaseResponse<GetResourceResponse> getResource(\n            @CurrentUser UserPrincipal requester,\n            @PathVariable String id\n    ) {\n        return baseService.ofSucceeded(resourceService.getResource(id, requester.getId()));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "GET"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/UserController.java",
      "class_name": "UserController",
      "method_name": null,
      "chunk_type": "controller",
      "calls": [],
      "called_by": [],
      "line_start": 11,
      "line_end": 29,
      "content": "@RestController\n@RequestMapping(\"/api/v1/users\")\npublic class UserController {\n\n    private final BaseService baseService;\n\n    public UserController(BaseService baseService) {\n        this.baseService = baseService;\n    }\n\n    @PutMapping\n    public BaseResponse<?> uploadResource(\n            @CurrentUser UserPrincipal requester\n    ) {\n        \n        return baseService.ofSucceeded(null);\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/external/UserController.java",
      "class_name": "UserController",
      "method_name": "uploadResource",
      "chunk_type": "controller",
      "calls": [
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 21,
      "line_end": 27,
      "content": "@PutMapping\n    public BaseResponse<?> uploadResource(\n            @CurrentUser UserPrincipal requester\n    ) {\n        \n        return baseService.ofSucceeded(null);\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "PUT"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/pub/AuthPubController.java",
      "class_name": "AuthPubController",
      "method_name": null,
      "chunk_type": "controller",
      "calls": [],
      "called_by": [],
      "line_start": 19,
      "line_end": 44,
      "content": "@RestController\n@RequestMapping(\"/api/v1/pub/auth\")\n@Slf4j\npublic class AuthPubController {\n\n    private final BaseService baseService;\n\n    private final AuthService authService;\n\n    public AuthPubController(BaseService baseService, AuthService authService) {\n        this.baseService = baseService;\n        this.authService = authService;\n    }\n\n    @PostMapping(\"/login\")\n    @LogsActivityAnnotation\n    public BaseResponse<AuthLoginResponse> login(@Valid @RequestBody AuthLoginRequest request) {\n        return baseService.ofSucceeded(authService.login(request));\n    }\n\n    @PostMapping(\"/register\")\n    public BaseResponse<AuthRegisterResponse> register(@Valid @RequestBody AuthRegisterRequest request) {\n        return baseService.ofSucceeded(authService.register(request));\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/pub/AuthPubController.java",
      "class_name": "AuthPubController",
      "method_name": "login",
      "chunk_type": "controller",
      "calls": [
        "unknown.login",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 33,
      "line_end": 37,
      "content": "@PostMapping(\"/login\")\n    @LogsActivityAnnotation\n    public BaseResponse<AuthLoginResponse> login(@Valid @RequestBody AuthLoginRequest request) {\n        return baseService.ofSucceeded(authService.login(request));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "POST"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/pub/AuthPubController.java",
      "class_name": "AuthPubController",
      "method_name": "register",
      "chunk_type": "controller",
      "calls": [
        "unknown.ofSucceeded",
        "unknown.register"
      ],
      "called_by": [],
      "line_start": 39,
      "line_end": 42,
      "content": "@PostMapping(\"/register\")\n    public BaseResponse<AuthRegisterResponse> register(@Valid @RequestBody AuthRegisterRequest request) {\n        return baseService.ofSucceeded(authService.register(request));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "POST"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/pub/PronunciationController.java",
      "class_name": "PronunciationController",
      "method_name": null,
      "chunk_type": "controller",
      "calls": [],
      "called_by": [],
      "line_start": 10,
      "line_end": 33,
      "content": "@RestController\n@RequestMapping(\"/api/v1/pub/pronunciations\")\npublic class PronunciationController {\n\n    private final BaseService baseService;\n\n    private final PronunciationService pronunciationService;\n\n    public PronunciationController(BaseService baseService, PronunciationService pronunciationService) {\n        this.baseService = baseService;\n        this.pronunciationService = pronunciationService;\n    }\n\n    @GetMapping(\"/samples\")\n    public BaseResponse<Object> getSamplePronunciations(GetSampleRequestDto request) {\n        return baseService.ofSucceeded(pronunciationService.getSample(request));\n    }\n\n    @PostMapping(\"/accuracy\")\n    public BaseResponse<Object> getAccuracy(@RequestBody PronunciationAccuracyRequestDto request) {\n        return baseService.ofSucceeded(pronunciationService.getAccuracy(request));\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/pub/PronunciationController.java",
      "class_name": "PronunciationController",
      "method_name": "getSamplePronunciations",
      "chunk_type": "controller",
      "calls": [
        "unknown.getSample",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 23,
      "line_end": 26,
      "content": "@GetMapping(\"/samples\")\n    public BaseResponse<Object> getSamplePronunciations(GetSampleRequestDto request) {\n        return baseService.ofSucceeded(pronunciationService.getSample(request));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "GET"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/pub/PronunciationController.java",
      "class_name": "PronunciationController",
      "method_name": "getAccuracy",
      "chunk_type": "controller",
      "calls": [
        "unknown.getAccuracy",
        "unknown.ofSucceeded"
      ],
      "called_by": [],
      "line_start": 28,
      "line_end": 31,
      "content": "@PostMapping(\"/accuracy\")\n    public BaseResponse<Object> getAccuracy(@RequestBody PronunciationAccuracyRequestDto request) {\n        return baseService.ofSucceeded(pronunciationService.getAccuracy(request));\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "POST"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/pub/QuizPubController.java",
      "class_name": "QuizPubController",
      "method_name": null,
      "chunk_type": "controller",
      "calls": [],
      "called_by": [],
      "line_start": 15,
      "line_end": 31,
      "content": "@RestController\n@RequestMapping(\"/api/v1/pub/quizzes\")\npublic class QuizPubController {\n\n    private final QuizService quizService;\n\n    public QuizPubController(QuizService quizService) {\n        this.quizService = quizService;\n    }\n\n    @GetMapping\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getAllQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return BaseResponse.ofSucceeded(quizService.getAllPublicQuizzes());\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/controller/pub/QuizPubController.java",
      "class_name": "QuizPubController",
      "method_name": "getAllQuizzes",
      "chunk_type": "controller",
      "calls": [
        "BaseResponse.ofSucceeded",
        "unknown.getAllPublicQuizzes"
      ],
      "called_by": [],
      "line_start": 25,
      "line_end": 29,
      "content": "@GetMapping\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getAllQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return BaseResponse.ofSucceeded(quizService.getAllPublicQuizzes());\n    }",
      "endpoints": [
        {
          "path": "/",
          "method": "GET"
        }
      ],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseCreateUpdateResponse.java",
      "class_name": "BaseCreateUpdateResponse",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 7,
      "line_end": 14,
      "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class BaseCreateUpdateResponse {\n\n    private String id;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 20,
      "line_end": 187,
      "content": "@Data\n@Accessors(chain = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Slf4j\n@NoArgsConstructor\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\n@SuperBuilder\npublic class BaseResponse<T> {\n\n    private Meta meta = new Meta();\n\n    private T data;\n\n    public BaseResponse(Meta meta, T data) {\n        this.meta = meta;\n        this.data = data;\n    }\n\n    public static void verifyMetaResponse(BaseResponse<?> baseResponse, HttpStatus httpStatus, int status) {\n        if (Objects.isNull(baseResponse) || Objects.isNull(baseResponse.meta)) {\n            return;\n        }\n\n        Meta meta = baseResponse.meta;\n        if (status != meta.getCode()) {\n            throw new BusinessException(meta.getCode(), meta.getMessage(), httpStatus);\n        }\n    }\n\n    public static <T> BaseResponse<T> ofSucceeded(T data) {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.data = data;\n        response.meta.setCode(ErrorConstant.SUCCESS);\n        response.meta.setMessage(\"OK\");\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofSucceeded() {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.meta.setCode(ErrorConstant.SUCCESS);\n        return response;\n    }\n\n    public static BaseResponse ofFailed(BusinessError error) {\n        return ofFailed(error, null);\n    }\n\n    public static <T> BaseResponse<T> ofFailed(BusinessError error, T data) {\n        return ofFailed(error, null, data);\n    }\n\n    public static BaseResponse ofFailed(BusinessError error, String message) {\n        return ofFailed(error, message, null);\n    }\n\n    public static <T> BaseResponse<T> ofFailed(BusinessError error, String message, T data) {\n        return ofFailed(error, message, null, data);\n    }\n\n    public static BaseResponse ofFailed(BusinessError error, String message, List<ErrorViolation> errors) {\n        BaseResponse response = new BaseResponse<>();\n        response.meta.setCode(error.getCode());\n        response.meta.setMessage((message != null) ? message : error.getMessage());\n        response.meta.setErrors((errors != null) ? new ArrayList<>(errors) : null);\n        if(errors != null && errors.size() > 0) {\n            response.meta.setMessage(errors.get(0).getDescription());\n        }\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.meta.setCode(error.getCode());\n        response.meta.setMessage((message != null) ? message : error.getMessage());\n        response.meta.setErrors((errors != null) ? new ArrayList<>(errors) : null);\n        if(errors != null && errors.size() > 0) {\n            response.meta.setMessage(errors.get(0).getDescription());\n        }\n        response.data = data;\n        return response;\n    }\n\n    public static BaseResponse ofFailed(BusinessException exception) {\n        return ofFailed(exception.getError(), exception.getMessage());\n    }\n\n    public static <T> BaseResponse<T> ofFailed(BusinessException exception, T data) {\n        return ofFailed(exception.getError(), exception.getMessage(), data);\n    }\n\n    public static <T> BaseResponse<T> ofSucceeded(String requestId, T data) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n    public static <T> BaseResponse<T> ofGetListSucceeded(T data, BasicRequestList requestList) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(requestList.getRequestId());\n        response.meta.setPageSize(requestList.getPageSize());\n        response.meta.setPageIndex(requestList.getPageIndex());\n        response.meta.setTotalItems(requestList.getTotalItems());\n        response.data = data;\n        return response;\n    }\n    public static <T> BaseResponse<T> ofSucceeded(BasicRequest request, T data) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(request.getRequestId());\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofSucceeded(String requestId) {\n        BaseResponse<T> response = ofSucceeded();\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n\n    public static BaseResponse ofFailed(String requestId, BusinessError error) {\n        BaseResponse response = ofFailed(error);\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n\n    public static BaseResponse ofFailed(String requestId, BusinessError error, String message) {\n        BaseResponse response = ofFailed(error, message);\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, T data) {\n        BaseResponse<T> response = ofFailed(error, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, String message, T data) {\n        BaseResponse<T> response = ofFailed(error, message, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }\n\n    public static BaseResponse ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors) {\n        BaseResponse response = ofFailed(error, message, errors);\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        BaseResponse<T> response = ofFailed(error, message, errors, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }\n\n    public static BaseResponse ofFailed(String requestId, BusinessException exception) {\n        BaseResponse response = ofFailed(exception);\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofFailed(String requestId, BusinessException exception, T data) {\n        BaseResponse<T> response = ofFailed(exception, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "verifyMetaResponse",
      "chunk_type": "other",
      "calls": [
        "Objects.isNull",
        "unknown.getCode",
        "unknown.getMessage"
      ],
      "called_by": [],
      "line_start": 38,
      "line_end": 47,
      "content": "public static void verifyMetaResponse(BaseResponse<?> baseResponse, HttpStatus httpStatus, int status) {\n        if (Objects.isNull(baseResponse) || Objects.isNull(baseResponse.meta)) {\n            return;\n        }\n\n        Meta meta = baseResponse.meta;\n        if (status != meta.getCode()) {\n            throw new BusinessException(meta.getCode(), meta.getMessage(), httpStatus);\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofSucceeded",
      "chunk_type": "other",
      "calls": [
        "unknown.setCode",
        "unknown.setMessage"
      ],
      "called_by": [
        "QuizPubController.getAllQuizzes",
        "BaseResponse.ofSucceeded",
        "BaseResponse.ofGetListSucceeded",
        "BaseService.ofSucceeded"
      ],
      "line_start": 49,
      "line_end": 55,
      "content": "public static <T> BaseResponse<T> ofSucceeded(T data) {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.data = data;\n        response.meta.setCode(ErrorConstant.SUCCESS);\n        response.meta.setMessage(\"OK\");\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofSucceeded",
      "chunk_type": "other",
      "calls": [
        "unknown.setCode"
      ],
      "called_by": [
        "QuizPubController.getAllQuizzes",
        "BaseResponse.ofSucceeded",
        "BaseResponse.ofGetListSucceeded",
        "BaseService.ofSucceeded"
      ],
      "line_start": 57,
      "line_end": 61,
      "content": "public static <T> BaseResponse<T> ofSucceeded() {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.meta.setCode(ErrorConstant.SUCCESS);\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 63,
      "line_end": 65,
      "content": "public static BaseResponse ofFailed(BusinessError error) {\n        return ofFailed(error, null);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 67,
      "line_end": 69,
      "content": "public static <T> BaseResponse<T> ofFailed(BusinessError error, T data) {\n        return ofFailed(error, null, data);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 71,
      "line_end": 73,
      "content": "public static BaseResponse ofFailed(BusinessError error, String message) {\n        return ofFailed(error, message, null);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 75,
      "line_end": 77,
      "content": "public static <T> BaseResponse<T> ofFailed(BusinessError error, String message, T data) {\n        return ofFailed(error, message, null, data);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BusinessError.getCode",
        "BusinessError.getMessage",
        "List<ErrorViolation>.get",
        "List<ErrorViolation>.size",
        "unknown.getDescription",
        "unknown.setCode",
        "unknown.setErrors",
        "unknown.setMessage"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 79,
      "line_end": 88,
      "content": "public static BaseResponse ofFailed(BusinessError error, String message, List<ErrorViolation> errors) {\n        BaseResponse response = new BaseResponse<>();\n        response.meta.setCode(error.getCode());\n        response.meta.setMessage((message != null) ? message : error.getMessage());\n        response.meta.setErrors((errors != null) ? new ArrayList<>(errors) : null);\n        if(errors != null && errors.size() > 0) {\n            response.meta.setMessage(errors.get(0).getDescription());\n        }\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BusinessError.getCode",
        "BusinessError.getMessage",
        "List<ErrorViolation>.get",
        "List<ErrorViolation>.size",
        "unknown.getDescription",
        "unknown.setCode",
        "unknown.setErrors",
        "unknown.setMessage"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 90,
      "line_end": 100,
      "content": "public static <T> BaseResponse<T> ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.meta.setCode(error.getCode());\n        response.meta.setMessage((message != null) ? message : error.getMessage());\n        response.meta.setErrors((errors != null) ? new ArrayList<>(errors) : null);\n        if(errors != null && errors.size() > 0) {\n            response.meta.setMessage(errors.get(0).getDescription());\n        }\n        response.data = data;\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed",
        "BusinessException.getError",
        "BusinessException.getMessage"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 102,
      "line_end": 104,
      "content": "public static BaseResponse ofFailed(BusinessException exception) {\n        return ofFailed(exception.getError(), exception.getMessage());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed",
        "BusinessException.getError",
        "BusinessException.getMessage"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 106,
      "line_end": 108,
      "content": "public static <T> BaseResponse<T> ofFailed(BusinessException exception, T data) {\n        return ofFailed(exception.getError(), exception.getMessage(), data);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofSucceeded",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofSucceeded",
        "unknown.setRequestId"
      ],
      "called_by": [
        "QuizPubController.getAllQuizzes",
        "BaseResponse.ofSucceeded",
        "BaseResponse.ofGetListSucceeded",
        "BaseService.ofSucceeded"
      ],
      "line_start": 110,
      "line_end": 114,
      "content": "public static <T> BaseResponse<T> ofSucceeded(String requestId, T data) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofGetListSucceeded",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofSucceeded",
        "BasicRequestList.getPageIndex",
        "BasicRequestList.getPageSize",
        "BasicRequestList.getRequestId",
        "BasicRequestList.getTotalItems",
        "unknown.setPageIndex",
        "unknown.setPageSize",
        "unknown.setRequestId",
        "unknown.setTotalItems"
      ],
      "called_by": [
        "BaseService.ofGetListSucceeded"
      ],
      "line_start": 115,
      "line_end": 123,
      "content": "public static <T> BaseResponse<T> ofGetListSucceeded(T data, BasicRequestList requestList) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(requestList.getRequestId());\n        response.meta.setPageSize(requestList.getPageSize());\n        response.meta.setPageIndex(requestList.getPageIndex());\n        response.meta.setTotalItems(requestList.getTotalItems());\n        response.data = data;\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofSucceeded",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofSucceeded",
        "BasicRequest.getRequestId",
        "unknown.setRequestId"
      ],
      "called_by": [
        "QuizPubController.getAllQuizzes",
        "BaseResponse.ofSucceeded",
        "BaseResponse.ofGetListSucceeded",
        "BaseService.ofSucceeded"
      ],
      "line_start": 124,
      "line_end": 128,
      "content": "public static <T> BaseResponse<T> ofSucceeded(BasicRequest request, T data) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(request.getRequestId());\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofSucceeded",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofSucceeded",
        "unknown.setRequestId"
      ],
      "called_by": [
        "QuizPubController.getAllQuizzes",
        "BaseResponse.ofSucceeded",
        "BaseResponse.ofGetListSucceeded",
        "BaseService.ofSucceeded"
      ],
      "line_start": 130,
      "line_end": 134,
      "content": "public static <T> BaseResponse<T> ofSucceeded(String requestId) {\n        BaseResponse<T> response = ofSucceeded();\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed",
        "unknown.setRequestId"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 136,
      "line_end": 140,
      "content": "public static BaseResponse ofFailed(String requestId, BusinessError error) {\n        BaseResponse response = ofFailed(error);\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed",
        "unknown.setRequestId"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 142,
      "line_end": 146,
      "content": "public static BaseResponse ofFailed(String requestId, BusinessError error, String message) {\n        BaseResponse response = ofFailed(error, message);\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed",
        "unknown.setRequestId"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 148,
      "line_end": 153,
      "content": "public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, T data) {\n        BaseResponse<T> response = ofFailed(error, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed",
        "unknown.setRequestId"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 155,
      "line_end": 160,
      "content": "public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, String message, T data) {\n        BaseResponse<T> response = ofFailed(error, message, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed",
        "unknown.setRequestId"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 162,
      "line_end": 166,
      "content": "public static BaseResponse ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors) {\n        BaseResponse response = ofFailed(error, message, errors);\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed",
        "unknown.setRequestId"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 168,
      "line_end": 173,
      "content": "public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        BaseResponse<T> response = ofFailed(error, message, errors, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed",
        "unknown.setRequestId"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 175,
      "line_end": 179,
      "content": "public static BaseResponse ofFailed(String requestId, BusinessException exception) {\n        BaseResponse response = ofFailed(exception);\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BaseResponse.java",
      "class_name": "BaseResponse",
      "method_name": "ofFailed",
      "chunk_type": "other",
      "calls": [
        "BaseResponse.ofFailed",
        "unknown.setRequestId"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ],
      "line_start": 181,
      "line_end": 186,
      "content": "public static <T> BaseResponse<T> ofFailed(String requestId, BusinessException exception, T data) {\n        BaseResponse<T> response = ofFailed(exception, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BasicCreationResponse.java",
      "class_name": "BasicCreationResponse",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 8,
      "line_end": 15,
      "content": "@Data\n@Builder\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\npublic class BasicCreationResponse {\n\n    private String id;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BasicRequest.java",
      "class_name": "BasicRequest",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 17,
      "line_end": 49,
      "content": "@NoArgsConstructor\n@AllArgsConstructor\n@Data\n@SuperBuilder\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\npublic class BasicRequest implements Serializable {\n\n    private static final long serialVersionUID = 1606619939033520333L;\n\n    private String requestId;\n\n    private String uri;\n\n    private String opsUserEmail;\n\n    private String opsUserId;\n\n    private String opsUsername;\n\n    private List<String> manageMerchants;\n\n    private List<String> branchCodes;\n\n    public boolean isValidByManageMerchants(String merchantCode) {\n        if (StringUtils.isBlank(merchantCode)) {\n            return true;\n        }\n\n        return new HashSet<>(manageMerchants).contains(merchantCode);\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BasicRequest.java",
      "class_name": "BasicRequest",
      "method_name": "isValidByManageMerchants",
      "chunk_type": "other",
      "calls": [
        "StringUtils.isBlank",
        "unknown.contains"
      ],
      "called_by": [],
      "line_start": 41,
      "line_end": 47,
      "content": "public boolean isValidByManageMerchants(String merchantCode) {\n        if (StringUtils.isBlank(merchantCode)) {\n            return true;\n        }\n\n        return new HashSet<>(manageMerchants).contains(merchantCode);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/BasicRequestList.java",
      "class_name": "BasicRequestList",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 12,
      "line_end": 37,
      "content": "@NoArgsConstructor\n@AllArgsConstructor\n@Data\n@SuperBuilder\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\npublic class BasicRequestList extends BasicRequest {\n\n    private static final long serialVersionUID = -2411435498386121564L;\n\n    @NotNull(message = \"page_index must not be null!\")\n    private Long pageIndex;\n\n    private Long pageStart;\n\n    @NotNull(message = \"page_size must not be null!\")\n    private Long pageSize;\n\n    private Long totalItems;\n\n    public BasicRequestList(Long totalItems, String requestId) {\n        this.setTotalItems(totalItems);\n        this.setRequestId(requestId);\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/ErrorViolation.java",
      "class_name": "ErrorViolation",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 12,
      "line_end": 26,
      "content": "@Data\n@Accessors(chain = true)\n@AllArgsConstructor\n@NoArgsConstructor\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\n@SuperBuilder\npublic class ErrorViolation {\n\n    private String field;\n\n    private String code;\n\n    private String description;\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/Meta.java",
      "class_name": "Meta",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 11,
      "line_end": 47,
      "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@SuperBuilder\npublic class Meta {\n\n    private Integer code;\n\n    private Long pageIndex;\n\n    private Long pageSize;\n\n    private Long totalItems;\n\n    private List<ErrorViolation> errors;\n\n    private String message;\n\n    private String requestId;\n\n\n    public Meta(String requestId, int code, Long pageIndex, Long pageSize, long totalItems) {\n        this.requestId = requestId;\n        this.code = code;\n        this.pageSize = pageSize;\n        this.pageIndex = pageIndex;\n        this.totalItems = totalItems;\n    }\n\n\n    public Meta(String requestId, int code, String message) {\n        this.requestId = requestId;\n        this.code = code;\n        this.message = message;\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/auth/AuthLoginRequest.java",
      "class_name": "AuthLoginRequest",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 20,
      "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class AuthLoginRequest {\n\n    @NotBlank\n    String username;\n\n    @NotBlank\n    String password;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/auth/AuthProfileResponse.java",
      "class_name": "AuthProfileResponse",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 6,
      "line_end": 28,
      "content": "@AllArgsConstructor\n@Data\npublic class AuthProfileResponse {\n\n    private String email;\n\n    private String username;\n\n    private String firstName;\n\n    private String lastName;\n\n    private String phoneNumber;\n\n    private String gender;\n\n    private String role;\n\n    private String avatar;\n\n    private Boolean isVerified;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/auth/AuthRegisterRequest.java",
      "class_name": "AuthRegisterRequest",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 12,
      "line_end": 31,
      "content": "@Data\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\n@AllArgsConstructor\n@NoArgsConstructor\npublic class AuthRegisterRequest {\n\n    @NotBlank(message = \"Username is required\")\n    String username;\n\n    @NotBlank(message = \"Email is required\")\n    @Email(message = \"Email is invalid\")\n    String email;\n\n    @NotBlank(message = \"Password is required\")\n    String password;\n\n    @NotBlank(message = \"Name is required\")\n    String name;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/auth/AuthRegisterResponse.java",
      "class_name": "AuthRegisterResponse",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 6,
      "line_end": 10,
      "content": "@AllArgsConstructor\n@Data\npublic class AuthRegisterResponse {\n    private String id;\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/pronunciation/GetPronunciationSampleResponseDto.java",
      "class_name": "GetPronunciationSampleResponseDto",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 7,
      "line_end": 18,
      "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class GetPronunciationSampleResponseDto {\n\n    private String ipaTranscript;\n\n    private String realTranscript;\n\n    private String transcriptTranslation;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/pronunciation/GetSampleRequestDto.java",
      "class_name": "GetSampleRequestDto",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 19,
      "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class GetSampleRequestDto {\n\n    @NotNull\n    private PronunciationLevel level;\n\n    private String customText;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/pronunciation/PronunciationAccuracyRequestDto.java",
      "class_name": "PronunciationAccuracyRequestDto",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 8,
      "line_end": 18,
      "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class PronunciationAccuracyRequestDto {\n\n    private String base64Audio;\n\n    private String text;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/pronunciation/PronunciationAccuracyResponseDto.java",
      "class_name": "PronunciationAccuracyResponseDto",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 7,
      "line_end": 34,
      "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class PronunciationAccuracyResponseDto {\n\n    private String startTime;\n\n    private String endTime;\n\n    private String ipaScript;\n\n    private String isLetterCorrectAllWords;\n\n    private String matchedTranscripts;\n\n    private String matchedTranscriptsIpa;\n\n    private String pairAccuracyCategory;\n\n    private Integer pronunciationAccuracy;\n\n    private String realTranscript;\n\n    private String realTranscripts;\n\n    private String realTranscriptsIpa;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/quiz/CreateQuizDto.java",
      "class_name": "CreateQuizDto",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 58,
      "content": "@Data\npublic class CreateQuizDto {\n\n    private String id;\n\n    private String title;\n\n    private String description;\n\n    private List<QuestionDto> questions;\n\n    private LocalDateTime createdAt;\n\n    private LocalDateTime updatedAt;\n\n    private Integer totalPoints;\n\n    private String difficulty;\n\n    private Integer estimatedDuration;\n\n    private List<String> tags;\n\n    private Boolean isPublic;\n\n    private Integer version;\n\n    private QuizNavigationMode navigationMode;\n\n    private Boolean hasTimer;\n\n    private Integer timeLimit;\n\n    private Integer warningTime;\n\n    private Boolean allowQuestionPicker;\n\n    private Boolean shuffleQuestions;\n\n    private Boolean shuffleAnswers;\n\n    private Boolean showProgress;\n\n    private Boolean allowPause;\n\n    private Integer maxAttempts;\n\n    private Integer passingScore;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/quiz/OptionDto.java",
      "class_name": "OptionDto",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 7,
      "line_end": 16,
      "content": "@Data\npublic class OptionDto {\n\n    private UUID id;\n\n    private String text;\n\n    private Boolean isCorrect;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/quiz/QuestionDto.java",
      "class_name": "QuestionDto",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 44,
      "content": "@Data\npublic class QuestionDto {\n\n    private String id;\n\n    private QuestionType type;\n\n    private String text;\n\n    private List<OptionDto> options;\n\n    private String pronunciationText;\n\n    private List<String> correctBlanks;\n\n    private Boolean trueFalseAnswer;\n\n    private String audioUrl;\n\n    private String imageUrl;\n\n    private Integer maxListeningTime;\n\n    private int points;\n\n    private Difficulty difficulty;\n\n    private Integer acceptRate;\n\n    private String category;\n\n    private LocalDateTime createdAt;\n\n    private LocalDateTime updatedAt;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/quiz/StartQuizResponse.java",
      "class_name": "StartQuizResponse",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 22,
      "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class StartQuizResponse {\n\n    private String quizAttemptId;\n\n    private String quizId;\n\n    private String userId;\n\n    private LocalDateTime startedAt;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/quiz/SubmitAnswerRequest.java",
      "class_name": "SubmitAnswerRequest",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 7,
      "line_end": 24,
      "content": "@Data\npublic class SubmitAnswerRequest {\n\n    private String questionId;\n\n    private List<String> selectedOptions;\n\n    private List<String> fillInBlanksAnswers;\n\n    private String answerText;\n\n    private Boolean userAnswerTrueFalse;\n\n    private Integer timeTaken;\n\n    private String audioUrl;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/resource/GetResourceResponse.java",
      "class_name": "GetResourceResponse",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 6,
      "line_end": 14,
      "content": "@Data\n@Builder\npublic class GetResourceResponse {\n\n    private String url;\n\n    private String name;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/dto/user/BasicUserDto.java",
      "class_name": "BasicUserDto",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 23,
      "content": "@Data\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\npublic class BasicUserDto {\n\n    private UUID id;\n\n    private String username;\n\n    private String email;\n\n    private String firstName;\n\n    private String lastName;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/FillInBlanks.java",
      "class_name": "FillInBlanks",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 10,
      "line_end": 17,
      "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class FillInBlanks {\n\n    private List<String> correctBlanks;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/LeaderboardEntry.java",
      "class_name": "LeaderboardEntry",
      "method_name": null,
      "chunk_type": "entity",
      "calls": [],
      "called_by": [],
      "line_start": 12,
      "line_end": 55,
      "content": "@Entity\n@Table(name = \"leaderboard\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@IdClass(LeaderboardEntryId.class)\npublic class LeaderboardEntry {\n\n    @Id\n    @Column(name = \"quiz_id\", nullable = false)\n    private UUID quizId;\n\n    @Id\n    @Column(name = \"user_id\", nullable = false)\n    private UUID userId;\n\n    @Column(name = \"score\", precision = 5, scale = 2)\n    private BigDecimal score;\n\n    @Column(name = \"completion_time\")\n    private Integer completionTime;\n\n    @Column(name = \"accuracy\", precision = 3, scale = 2)\n    private BigDecimal accuracy;\n\n    @Column(name = \"attempts\")\n    private Integer attempts;\n\n    @Column(name = \"last_attempt\")\n    private LocalDateTime lastAttempt;\n\n    @Column(name = \"rank\")\n    private Integer rank;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n    @Transient\n    private Quiz quiz;\n\n    @Transient\n    private User user;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/LeaderboardEntryId.java",
      "class_name": "LeaderboardEntryId",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 11,
      "line_end": 31,
      "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class LeaderboardEntryId implements Serializable {\n    private UUID quizId;\n    private UUID userId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        LeaderboardEntryId that = (LeaderboardEntryId) o;\n        return Objects.equals(quizId, that.quizId) &&\n                Objects.equals(userId, that.userId);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(quizId, userId);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/LeaderboardEntryId.java",
      "class_name": "LeaderboardEntryId",
      "method_name": "equals",
      "chunk_type": "other",
      "calls": [
        "LeaderboardEntryId.getClass",
        "Object.getClass",
        "Objects.equals"
      ],
      "called_by": [],
      "line_start": 18,
      "line_end": 25,
      "content": "@Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        LeaderboardEntryId that = (LeaderboardEntryId) o;\n        return Objects.equals(quizId, that.quizId) &&\n                Objects.equals(userId, that.userId);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/LeaderboardEntryId.java",
      "class_name": "LeaderboardEntryId",
      "method_name": "hashCode",
      "chunk_type": "other",
      "calls": [
        "Objects.hash"
      ],
      "called_by": [],
      "line_start": 27,
      "line_end": 30,
      "content": "@Override\n    public int hashCode() {\n        return Objects.hash(quizId, userId);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/Question.java",
      "class_name": "Question",
      "method_name": null,
      "chunk_type": "entity",
      "calls": [],
      "called_by": [],
      "line_start": 17,
      "line_end": 97,
      "content": "@Entity\n@Table(name = \"questions\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Question {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @Column(name = \"id\")\n    private UUID id;\n\n    @Column(name = \"quiz_id\")\n    private UUID quizId;\n\n    @Column(name = \"type\")\n    private String type;\n\n    @Column(name = \"text\")\n    private String text;\n\n    @JdbcTypeCode(SqlTypes.JSON)\n    @Column(name = \"options\", columnDefinition = \"jsonb\")\n    private List<QuestionOption> options;\n\n    @Column(name = \"pronunciation_text\")\n    private String pronunciationText;\n\n    @JdbcTypeCode(SqlTypes.JSON)\n    @Column(name = \"fill_in_blanks\", columnDefinition = \"jsonb\")\n    private List<String> correctBlanks;\n\n    @Column(name = \"true_false_answer\")\n    private Boolean trueFalseAnswer;\n\n    @Column(name = \"audio_url\")\n    private String audioUrl;\n\n    @Column(name = \"image_url\")\n    private String imageUrl;\n\n    @Column(name = \"max_listening_time\")\n    private Integer maxListeningTime;\n\n    @Column(name = \"correct_answer\", columnDefinition = \"text[]\")\n    @Type(ListArrayType.class)\n    private List<String> correctAnswer = new ArrayList<>();\n\n    @Column(name = \"explanation\")\n    private String explanation;\n\n    @Column(name = \"points\")\n    private Integer points;\n\n    @Column(name = \"time_limit\")\n    private Integer timeLimit;\n\n    @Column(name = \"difficulty\")\n    private String difficulty;\n\n    @Column(name = \"category\")\n    private String category;\n\n    @Column(name = \"accept_rate\")\n    private Integer acceptRate;\n\n    @CreationTimestamp\n    @Column(name = \"created_at\")\n    private LocalDateTime createdAt;\n\n    @UpdateTimestamp\n    @Column(name = \"updated_at\")\n    private LocalDateTime updatedAt;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n    @Transient\n    private Quiz quiz;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/QuestionOption.java",
      "class_name": "QuestionOption",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 20,
      "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class QuestionOption {\n\n    private UUID id;\n\n    private Boolean isCorrect;\n\n    private String text;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/Quiz.java",
      "class_name": "Quiz",
      "method_name": null,
      "chunk_type": "entity",
      "calls": [],
      "called_by": [],
      "line_start": 21,
      "line_end": 128,
      "content": "@Entity\n@Table(name = \"quizzes\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Quiz {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")\n    @Column(name = \"id\", updatable = false, nullable = false)\n    private UUID id;\n\n    @Column(name = \"title\")\n    private String title;\n\n    @Column(name = \"description\")\n    private String description;\n\n    @Column(name = \"category\")\n    private String category;\n\n    @Column(name = \"difficulty\")\n    private String difficulty;\n\n    @Column(name = \"duration\")\n    private Integer duration;\n\n    @Column(name = \"question_count\")\n    private Integer questionCount = 0;\n\n    @Column(name = \"tags\", columnDefinition = \"text[]\")\n    @Type(ListArrayType.class)\n    private List<String> tags = new ArrayList<>();\n\n    @Column(name = \"status\")\n    @Enumerated(EnumType.STRING)\n    private QuizStatus status;\n\n    @CreationTimestamp\n    @Column(name = \"created_at\")\n    private LocalDateTime createdAt;\n\n    @UpdateTimestamp\n    @Column(name = \"updated_at\")\n    private LocalDateTime updatedAt;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n    @Column(name = \"author_id\") // This is the ID field for the conceptual author\n    private UUID authorId;\n\n    @Transient\n    private User author;\n\n    @Column(name = \"rating\", precision = 3, scale = 2)\n    private BigDecimal rating = BigDecimal.valueOf(0.00);\n\n    @Column(name = \"attempts\")\n    private Integer attempts = 0;\n\n    @Column(name = \"passing_score\")\n    private Integer passingScore;\n\n    @Column(name = \"navigation_mode\")\n    private String navigationMode;\n\n    @Column(name = \"has_timer\")\n    private Boolean hasTimer = false;\n\n    @Column(name = \"time_limit\")\n    private Integer timeLimit;\n\n    @Column(name = \"warning_time\")\n    private Integer warningTime;\n\n    @Column(name = \"allow_question_picker\")\n    private Boolean allowQuestionPicker = false;\n\n    @Column(name = \"shuffle_questions\")\n    private Boolean shuffleQuestions = false;\n\n    @Column(name = \"shuffle_answers\")\n    private Boolean shuffleAnswers = false;\n\n    @Column(name = \"show_progress\")\n    private Boolean showProgress = false;\n\n    @Column(name = \"allow_pause\")\n    private Boolean allowPause = false;\n\n    @Column(name = \"max_attempts\")\n    private Integer maxAttempts;\n\n    @Transient\n    private Set<Question> questions;\n\n    @Transient\n    private Set<QuizAttempt> quizAttempts;\n\n    @Transient\n    private Set<User> savedByUsers;\n\n    @Transient\n    private Set<LeaderboardEntry> leaderboardEntries;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/QuizAnswer.java",
      "class_name": "QuizAnswer",
      "method_name": null,
      "chunk_type": "entity",
      "calls": [],
      "called_by": [],
      "line_start": 15,
      "line_end": 59,
      "content": "@Entity\n@Table(name = \"quiz_answers\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class QuizAnswer {\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @Column(name = \"id\", updatable = false, nullable = false)\n    private UUID id;\n\n    @Column(name = \"quiz_attempt_id\", nullable = false)\n    private UUID quizAttemptId;\n\n    @Column(name = \"question_id\", nullable = false)\n    private UUID questionId;\n\n    @JdbcTypeCode(SqlTypes.JSON)\n    @Column(name = \"selected_answers\", columnDefinition = \"jsonb\")\n    private List<QuestionOption> selectedAnswers;\n\n    @JdbcTypeCode(SqlTypes.JSON)\n    @Column(name = \"fill_in_blanks_answers\", columnDefinition = \"jsonb\")\n    private List<String> fillInBlanksAnswers;\n\n    @Column(name = \"answer_text\")\n    private String answerText;\n\n    @Column(name = \"is_correct\")\n    private boolean isCorrect;\n\n    @Column(name = \"score_achieved\")\n    private Integer scoreAchieved;\n\n    @Column(name = \"time_taken\")\n    private Integer timeTaken;\n\n    @Column(name = \"audio_url\")\n    private String audioUrl;\n\n    @CreationTimestamp\n    @Column(name = \"answered_at\")\n    private LocalDateTime answeredAt;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/QuizAttempt.java",
      "class_name": "QuizAttempt",
      "method_name": null,
      "chunk_type": "entity",
      "calls": [],
      "called_by": [],
      "line_start": 17,
      "line_end": 70,
      "content": "@Entity\n@Table(name = \"quiz_attempts\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class QuizAttempt {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")\n    @Column(name = \"id\", updatable = false, nullable = false)\n    private UUID id;\n\n    @Column(name = \"quiz_id\", nullable = false)\n    private UUID quizId;\n\n    @Column(name = \"user_id\", nullable = false)\n    private UUID userId;\n\n    @Transient\n    private Quiz quiz;\n\n    @Transient\n    private User user;\n\n    @Transient\n    private List<QuizAnswer> answers;\n\n    @Column(name = \"score\", precision = 5, scale = 2)\n    private BigDecimal score;\n\n    @Column(name = \"total_questions\")\n    private Integer totalQuestions;\n\n    @Column(name = \"correct_answers\")\n    private Integer correctAnswers;\n\n    @Column(name = \"time_spent\")\n    private Long timeSpent;\n\n    @Column(name = \"completed_at\")\n    private LocalDateTime completedAt;\n\n    @Column(name = \"passed\")\n    private Boolean passed;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n    @Column(name = \"created_at\")\n    @CreationTimestamp\n    private LocalDateTime createdAt;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/Resource.java",
      "class_name": "Resource",
      "method_name": null,
      "chunk_type": "entity",
      "calls": [],
      "called_by": [],
      "line_start": 15,
      "line_end": 63,
      "content": "@Entity\n@Table(name = \"resources\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class Resource {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")\n    @Column(name = \"id\")\n    private UUID id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"path\")\n    private String path; //  e.g., 'documents/reports/q1_report.pdf'\n\n    @Column(name = \"url\")\n    private String url;\n\n    @Column(name = \"owner_id\")\n    private UUID ownerId; // ID of the user who uploaded the resource\n\n    @Column(name = \"extension\")\n    private String extension; // Extension of the file, e.g., 'mp3', 'jpg'.\n\n    @Column(name = \"size_bytes\")\n    private Long sizeBytes;\n\n    @Column(name = \"cloud_id\")\n    private String cloudId; // ID assigned by the cloud storage provider (e.g., S3 ETag, Google Drive File ID)\n\n    @Column(name = \"uploaded_at\")\n    private LocalDateTime uploadedAt;\n\n    @Column(name = \"last_modified_at\")\n    private LocalDateTime lastModifiedAt;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n    @JdbcTypeCode(SqlTypes.JSON)\n    @Column(name = \"metadata\", columnDefinition = \"jsonb\")\n    private String metadata;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/User.java",
      "class_name": "User",
      "method_name": null,
      "chunk_type": "entity",
      "calls": [],
      "called_by": [],
      "line_start": 15,
      "line_end": 69,
      "content": "@Entity\n@Table(name = \"users\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")\n    @Column(name = \"id\", updatable = false, nullable = false)\n    private UUID id;\n\n    @Column(name = \"username\", nullable = false, unique = true)\n    private String username;\n\n    @Column(name = \"name\", nullable = false)\n    private String name;\n\n    @Column(name = \"email\", nullable = false, unique = true)\n    private String email;\n\n    @Column(name = \"avatar\")\n    private String avatar;\n\n    @CreationTimestamp\n    @Column(name = \"joined_at\")\n    private LocalDateTime joinedAt;\n\n    @Column(name = \"last_login_at\")\n    private LocalDateTime lastLoginAt;\n\n    @Column(name = \"is_active\")\n    private Boolean isActive = true;\n\n    @Column(name = \"role\", nullable = false)\n    @Enumerated(EnumType.STRING)\n    private UserRole role;\n\n    @Transient\n    private UserCredential credentials;\n\n    @Transient\n    private Set<Quiz> createdQuizzes;\n\n    @Transient\n    private Set<QuizAttempt> quizAttempts;\n\n    @Transient\n    private Set<Quiz> savedQuizzes;\n\n    @Transient\n    private Set<LeaderboardEntry> leaderboardEntries;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/UserCredential.java",
      "class_name": "UserCredential",
      "method_name": null,
      "chunk_type": "entity",
      "calls": [],
      "called_by": [],
      "line_start": 13,
      "line_end": 44,
      "content": "@Entity\n@Table(name = \"user_credentials\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class UserCredential {\n\n    @Id\n    @Column(name = \"user_id\", updatable = false, nullable = false)\n    private UUID userId;\n\n    @Transient\n    private User user;\n\n    @Column(name = \"password_hash\", nullable = false)\n    private String passwordHash;\n\n    @CreationTimestamp\n    @Column(name = \"last_password_change_at\")\n    private LocalDateTime lastPasswordChangeAt;\n\n    @Column(name = \"failed_login_attempts\")\n    private Integer failedLoginAttempts = 0;\n\n    @Column(name = \"locked_until\")\n    private LocalDateTime lockedUntil;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/UserSavedQuiz.java",
      "class_name": "UserSavedQuiz",
      "method_name": null,
      "chunk_type": "entity",
      "calls": [],
      "called_by": [],
      "line_start": 12,
      "line_end": 40,
      "content": "@Entity\n@Table(name = \"user_saved_quizzes\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@IdClass(UserSavedQuizId.class)\npublic class UserSavedQuiz {\n\n    @Id\n    @Column(name = \"user_id\", nullable = false)\n    private UUID userId;\n\n    @Id\n    @Column(name = \"quiz_id\", nullable = false)\n    private UUID quizId;\n\n    @Transient\n    private User user;\n    @Transient\n    private Quiz quiz;\n\n    @CreationTimestamp\n    @Column(name = \"saved_at\", updatable = false)\n    private LocalDateTime savedAt;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/UserSavedQuizId.java",
      "class_name": "UserSavedQuizId",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 11,
      "line_end": 31,
      "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class UserSavedQuizId implements Serializable {\n    private UUID userId;\n    private UUID quizId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        UserSavedQuizId that = (UserSavedQuizId) o;\n        return Objects.equals(userId, that.userId) &&\n                Objects.equals(quizId, that.quizId);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(userId, quizId);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/UserSavedQuizId.java",
      "class_name": "UserSavedQuizId",
      "method_name": "equals",
      "chunk_type": "other",
      "calls": [
        "Object.getClass",
        "Objects.equals",
        "UserSavedQuizId.getClass"
      ],
      "called_by": [],
      "line_start": 18,
      "line_end": 25,
      "content": "@Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        UserSavedQuizId that = (UserSavedQuizId) o;\n        return Objects.equals(userId, that.userId) &&\n                Objects.equals(quizId, that.quizId);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/entity/UserSavedQuizId.java",
      "class_name": "UserSavedQuizId",
      "method_name": "hashCode",
      "chunk_type": "other",
      "calls": [
        "Objects.hash"
      ],
      "called_by": [],
      "line_start": 27,
      "line_end": 30,
      "content": "@Override\n    public int hashCode() {\n        return Objects.hash(userId, quizId);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/exception/BusinessError.java",
      "class_name": "BusinessError",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 11,
      "line_end": 57,
      "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@SuperBuilder\npublic class BusinessError implements Serializable {\n\n    private static final long serialVersionUID = 2405172041950251807L;\n\n    private int code;\n\n    private String message;\n\n    private HttpStatus httpStatus;\n\n    private Object data;\n\n    public BusinessError(int code, HttpStatus httpStatus) {\n        this.code = code;\n        this.httpStatus = httpStatus;\n    }\n\n    public BusinessError(int code) {\n        this.code = code;\n    }\n\n    public BusinessError(int code, HttpStatus httpStatus, Object data) {\n        this.code = code;\n        this.httpStatus = httpStatus;\n        this.data = data;\n    }\n\n    public BusinessError(int code, Object data) {\n        this.code = code;\n        this.data = data;\n    }\n\n    public BusinessError(int code, String message) {\n        this.code = code;\n        this.message = message;\n    }\n\n    public BusinessError(int code, String message, HttpStatus httpStatus) {\n        this.code = code;\n        this.message = message;\n        this.httpStatus = httpStatus;\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/exception/BusinessException.java",
      "class_name": "BusinessException",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 52,
      "content": "@Getter\n@Builder\npublic class BusinessException extends RuntimeException implements Serializable {\n\n    private static final long serialVersionUID = 1905122041950251207L;\n\n    private final BusinessError error;\n\n    public BusinessException(int code, String message, HttpStatus status) {\n        super(message);\n        this.error = new BusinessError(code, message, status);\n    }\n\n    public BusinessException(int code, HttpStatus status) {\n        this.error = new BusinessError(code, status);\n    }\n\n    public BusinessException(int code) {\n        this.error = new BusinessError(code);\n    }\n\n    public BusinessException(int code, Object data) {\n        this.error = new BusinessError(code, data);\n    }\n\n    public BusinessException(int code, String message) {\n        this.error = new BusinessError(code, message);\n    }\n\n    public BusinessException(BusinessError error) {\n        super(error.getMessage());\n        this.error = error;\n    }\n\n    public BusinessException(BusinessError error, String message) {\n        super(message);\n        this.error = error;\n    }\n\n    public BusinessException(BusinessError error, String message, Throwable cause) {\n        super(message, cause);\n        this.error = error;\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/exception/CommonExceptionHandler.java",
      "class_name": "CommonExceptionHandler",
      "method_name": null,
      "chunk_type": "controller",
      "calls": [],
      "called_by": [],
      "line_start": 25,
      "line_end": 128,
      "content": "@Controller\n@ControllerAdvice\n@Slf4j\npublic class CommonExceptionHandler extends BaseService {\n\n    @ExceptionHandler(BusinessException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleBusinessException(BusinessException exception) {\n        exception.getError().setMessage(getMessage(exception.getError()));\n        Object dataException = exception.getError().getData();\n        BaseResponse<?> data = ofFailed(exception);\n        if(!ObjectUtils.isEmpty(dataException) && dataException instanceof String) {\n            data.getMeta().setErrors(Collections.singletonList(\n                ErrorViolation.builder().description((String) dataException).build()));\n        }\n        return new ResponseEntity<>(data, exception.getError().getHttpStatus() == null\n                ? HttpStatus.OK : exception.getError().getHttpStatus());\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleMethodArgumentNotValidException(MethodArgumentNotValidException exception) {\n        List<ErrorViolation> errors = exception.getBindingResult().getFieldErrors().stream()\n            .map(e -> ErrorViolation.builder()\n                .field(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, e.getField()))\n                .code(Integer.toString(getErrorCode(e.getDefaultMessage(), ErrorConstant.INVALID_PARAMETERS)))\n                .description(getMessage(e.getDefaultMessage()))\n                .build())\n            .collect(Collectors.toList());\n\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), errors);\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }\n\n    @ExceptionHandler(MissingServletRequestParameterException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleMethodArgumentNotValidException(MissingServletRequestParameterException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error,\"Param \" + exception.getParameterName() + \" is required\");\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }\n\n    @ExceptionHandler(Exception.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleException(Exception exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INTERNAL_SERVER_ERROR);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), null);\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }\n    @ExceptionHandler(HttpMessageNotReadableException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleException(HttpMessageNotReadableException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error,\"invalid parameter\");\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }\n\n    @ExceptionHandler(IllegalArgumentException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleIllegalArgumentException(IllegalArgumentException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }\n\n    @ExceptionHandler(HttpStatusCodeException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleHttpStatusCodeException(HttpStatusCodeException exception) {\n        HttpStatus statusCode = (HttpStatus) exception.getStatusCode();\n\n        if (statusCode.value() == HttpStatus.BAD_REQUEST.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.UNAUTHORIZED.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.UNAUTHORIZED);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.FORBIDDEN.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.FORBIDDEN_ERROR);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.NOT_FOUND.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.NOT_FOUND);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.INTERNAL_SERVER_ERROR.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.INTERNAL_SERVER_ERROR);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        throw exception;\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/exception/CommonExceptionHandler.java",
      "class_name": "CommonExceptionHandler",
      "method_name": "handleBusinessException",
      "chunk_type": "controller",
      "calls": [
        "BusinessException.getError",
        "Collections.singletonList",
        "CommonExceptionHandler.getMessage",
        "CommonExceptionHandler.ofFailed",
        "ErrorViolation.builder",
        "ErrorViolation.builder().description",
        "ErrorViolation.builder().description((String) dataException).build",
        "ObjectUtils.isEmpty",
        "unknown.getData",
        "unknown.getHttpStatus",
        "unknown.getMeta",
        "unknown.setErrors",
        "unknown.setMessage"
      ],
      "called_by": [],
      "line_start": 30,
      "line_end": 42,
      "content": "@ExceptionHandler(BusinessException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleBusinessException(BusinessException exception) {\n        exception.getError().setMessage(getMessage(exception.getError()));\n        Object dataException = exception.getError().getData();\n        BaseResponse<?> data = ofFailed(exception);\n        if(!ObjectUtils.isEmpty(dataException) && dataException instanceof String) {\n            data.getMeta().setErrors(Collections.singletonList(\n                ErrorViolation.builder().description((String) dataException).build()));\n        }\n        return new ResponseEntity<>(data, exception.getError().getHttpStatus() == null\n                ? HttpStatus.OK : exception.getError().getHttpStatus());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/exception/CommonExceptionHandler.java",
      "class_name": "CommonExceptionHandler",
      "method_name": "handleMethodArgumentNotValidException",
      "chunk_type": "controller",
      "calls": [
        "CaseFormat.UPPER_CAMEL.to",
        "Collectors.toList",
        "CommonExceptionHandler.getBusinessError",
        "CommonExceptionHandler.getErrorCode",
        "CommonExceptionHandler.getMessage",
        "CommonExceptionHandler.ofFailed",
        "ErrorViolation.builder",
        "ErrorViolation.builder()\n                .field(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, e.getField()))\n                .code(Integer.toString(getErrorCode(e.getDefaultMessage(), ErrorConstant.INVALID_PARAMETERS)))\n                .description(getMessage(e.getDefaultMessage())).build",
        "ErrorViolation.builder()\n                .field(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, e.getField()))\n                .code(Integer.toString(getErrorCode(e.getDefaultMessage(), ErrorConstant.INVALID_PARAMETERS))).description",
        "ErrorViolation.builder()\n                .field(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, e.getField())).code",
        "ErrorViolation.builder().field",
        "Integer.toString",
        "MethodArgumentNotValidException.getBindingResult",
        "unknown.collect",
        "unknown.getDefaultMessage",
        "unknown.getField",
        "unknown.getFieldErrors",
        "unknown.map",
        "unknown.stream"
      ],
      "called_by": [],
      "line_start": 44,
      "line_end": 58,
      "content": "@ExceptionHandler(MethodArgumentNotValidException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleMethodArgumentNotValidException(MethodArgumentNotValidException exception) {\n        List<ErrorViolation> errors = exception.getBindingResult().getFieldErrors().stream()\n            .map(e -> ErrorViolation.builder()\n                .field(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, e.getField()))\n                .code(Integer.toString(getErrorCode(e.getDefaultMessage(), ErrorConstant.INVALID_PARAMETERS)))\n                .description(getMessage(e.getDefaultMessage()))\n                .build())\n            .collect(Collectors.toList());\n\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), errors);\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/exception/CommonExceptionHandler.java",
      "class_name": "CommonExceptionHandler",
      "method_name": "handleMethodArgumentNotValidException",
      "chunk_type": "controller",
      "calls": [
        "CommonExceptionHandler.getBusinessError",
        "CommonExceptionHandler.ofFailed",
        "MissingServletRequestParameterException.getParameterName"
      ],
      "called_by": [],
      "line_start": 60,
      "line_end": 66,
      "content": "@ExceptionHandler(MissingServletRequestParameterException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleMethodArgumentNotValidException(MissingServletRequestParameterException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error,\"Param \" + exception.getParameterName() + \" is required\");\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/exception/CommonExceptionHandler.java",
      "class_name": "CommonExceptionHandler",
      "method_name": "handleException",
      "chunk_type": "controller",
      "calls": [
        "CommonExceptionHandler.getBusinessError",
        "CommonExceptionHandler.getMessage",
        "CommonExceptionHandler.ofFailed"
      ],
      "called_by": [],
      "line_start": 68,
      "line_end": 74,
      "content": "@ExceptionHandler(Exception.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleException(Exception exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INTERNAL_SERVER_ERROR);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), null);\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/exception/CommonExceptionHandler.java",
      "class_name": "CommonExceptionHandler",
      "method_name": "handleException",
      "chunk_type": "controller",
      "calls": [
        "CommonExceptionHandler.getBusinessError",
        "CommonExceptionHandler.ofFailed"
      ],
      "called_by": [],
      "line_start": 75,
      "line_end": 81,
      "content": "@ExceptionHandler(HttpMessageNotReadableException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleException(HttpMessageNotReadableException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error,\"invalid parameter\");\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/exception/CommonExceptionHandler.java",
      "class_name": "CommonExceptionHandler",
      "method_name": "handleIllegalArgumentException",
      "chunk_type": "controller",
      "calls": [
        "CommonExceptionHandler.getBusinessError",
        "CommonExceptionHandler.getMessage",
        "CommonExceptionHandler.ofFailed",
        "IllegalArgumentException.getMessage"
      ],
      "called_by": [],
      "line_start": 83,
      "line_end": 89,
      "content": "@ExceptionHandler(IllegalArgumentException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleIllegalArgumentException(IllegalArgumentException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/exception/CommonExceptionHandler.java",
      "class_name": "CommonExceptionHandler",
      "method_name": "handleHttpStatusCodeException",
      "chunk_type": "controller",
      "calls": [
        "CommonExceptionHandler.getBusinessError",
        "CommonExceptionHandler.getMessage",
        "CommonExceptionHandler.ofFailed",
        "HttpStatus.BAD_REQUEST.value",
        "HttpStatus.FORBIDDEN.value",
        "HttpStatus.INTERNAL_SERVER_ERROR.value",
        "HttpStatus.NOT_FOUND.value",
        "HttpStatus.UNAUTHORIZED.value",
        "HttpStatusCodeException.getMessage",
        "HttpStatusCodeException.getStatusCode",
        "unknown.value"
      ],
      "called_by": [],
      "line_start": 91,
      "line_end": 127,
      "content": "@ExceptionHandler(HttpStatusCodeException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleHttpStatusCodeException(HttpStatusCodeException exception) {\n        HttpStatus statusCode = (HttpStatus) exception.getStatusCode();\n\n        if (statusCode.value() == HttpStatus.BAD_REQUEST.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.UNAUTHORIZED.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.UNAUTHORIZED);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.FORBIDDEN.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.FORBIDDEN_ERROR);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.NOT_FOUND.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.NOT_FOUND);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.INTERNAL_SERVER_ERROR.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.INTERNAL_SERVER_ERROR);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        throw exception;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/filter/ApiKeyVerifyRequestWrapper.java",
      "class_name": "ApiKeyVerifyRequestWrapper",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 16,
      "line_end": 100,
      "content": "public class ApiKeyVerifyRequestWrapper extends HttpServletRequestWrapper {\n\n    private final String body; // Make body final as it's set once in constructor\n\n    public ApiKeyVerifyRequestWrapper(HttpServletRequest request) throws IOException {\n        super(request);\n        StringBuilder stringBuilder = new StringBuilder();\n        BufferedReader bufferedReader = null;\n        try (InputStream inputStream = request.getInputStream()) { // Use try-with-resources for auto-closing\n            if (inputStream != null) {\n                // Use StandardCharsets for consistent character encoding\n                bufferedReader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n                char[] charBuffer = new char[128];\n                int bytesRead;\n                while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {\n                    stringBuilder.append(charBuffer, 0, bytesRead);\n                }\n            }\n        } finally {\n            // bufferedReader will be closed by try-with-resources if created\n            // However, it's good practice to ensure it's not null before closing if not in try-with-resources,\n            // or if dealing with older Java versions. Here, it's redundant due to try-with-resources on inputStream.\n            // But if bufferedReader was directly managed, you'd keep this.\n        }\n        body = stringBuilder.toString();\n    }\n\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n        // Use StandardCharsets for consistent character encoding when getting bytes\n        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_8));\n\n        return new ServletInputStream() {\n            @Override\n            public int read() throws IOException {\n                return byteArrayInputStream.read();\n            }\n\n            @Override\n            public boolean isFinished() {\n                // This indicates if all bytes have been read from the stream.\n                return byteArrayInputStream.available() == 0;\n            }\n\n            @Override\n            public boolean isReady() {\n                // This indicates if data is available to be read without blocking.\n                return true; // Since we're reading from an in-memory byte array, it's always ready.\n            }\n\n            @Override\n            public void setReadListener(ReadListener listener) {\n                // For non-blocking I/O, you'd typically implement async reading here.\n                // For a wrapper that reads from a pre-loaded string, this can be a no-op,\n                // or you could call listener.onAllDataRead() and listener.onDataAvailable() if needed.\n                // For basic use cases with pre-read body, throwing UnsupportedOperationException might be safer\n                // if you don't intend to support async reading from this wrapper.\n                // However, returning true for isReady and overriding read() implies it's blocking-ready.\n                // In a real async scenario, you'd need to manage the listener.\n                // For now, we'll keep it as a no-op as it's common for simple wrappers.\n            }\n        };\n    }\n\n    @Override\n    public BufferedReader getReader() throws IOException {\n        // Ensure consistent encoding when creating the reader from the input stream\n        return new BufferedReader(new InputStreamReader(this.getInputStream(), StandardCharsets.UTF_8));\n    }\n\n    public String getBody() {\n        return body;\n    }\n\n    // Removing setBody as 'body' is final and set in constructor, making the wrapper immutable after creation.\n    // If you need to modify the body, you would create a new wrapper instance or redesign.\n\n    @Override\n    public String getContentType() {\n        String contentType = super.getContentType();\n        // A common default if not explicitly set, or if you expect JSON for most API requests.\n        // Be careful with this default if your API handles various content types.\n        return contentType == null ? MediaType.APPLICATION_JSON_VALUE : contentType;\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/filter/ApiKeyVerifyRequestWrapper.java",
      "class_name": "ApiKeyVerifyRequestWrapper",
      "method_name": "getInputStream",
      "chunk_type": "other",
      "calls": [
        "unknown.available",
        "unknown.getBytes",
        "unknown.read"
      ],
      "called_by": [
        "ApiKeyVerifyRequestWrapper.getReader"
      ],
      "line_start": 43,
      "line_end": 78,
      "content": "@Override\n    public ServletInputStream getInputStream() throws IOException {\n        // Use StandardCharsets for consistent character encoding when getting bytes\n        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_8));\n\n        return new ServletInputStream() {\n            @Override\n            public int read() throws IOException {\n                return byteArrayInputStream.read();\n            }\n\n            @Override\n            public boolean isFinished() {\n                // This indicates if all bytes have been read from the stream.\n                return byteArrayInputStream.available() == 0;\n            }\n\n            @Override\n            public boolean isReady() {\n                // This indicates if data is available to be read without blocking.\n                return true; // Since we're reading from an in-memory byte array, it's always ready.\n            }\n\n            @Override\n            public void setReadListener(ReadListener listener) {\n                // For non-blocking I/O, you'd typically implement async reading here.\n                // For a wrapper that reads from a pre-loaded string, this can be a no-op,\n                // or you could call listener.onAllDataRead() and listener.onDataAvailable() if needed.\n                // For basic use cases with pre-read body, throwing UnsupportedOperationException might be safer\n                // if you don't intend to support async reading from this wrapper.\n                // However, returning true for isReady and overriding read() implies it's blocking-ready.\n                // In a real async scenario, you'd need to manage the listener.\n                // For now, we'll keep it as a no-op as it's common for simple wrappers.\n            }\n        };\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/filter/ApiKeyVerifyRequestWrapper.java",
      "class_name": "ApiKeyVerifyRequestWrapper",
      "method_name": "getReader",
      "chunk_type": "other",
      "calls": [
        "ApiKeyVerifyRequestWrapper.getInputStream"
      ],
      "called_by": [],
      "line_start": 80,
      "line_end": 84,
      "content": "@Override\n    public BufferedReader getReader() throws IOException {\n        // Ensure consistent encoding when creating the reader from the input stream\n        return new BufferedReader(new InputStreamReader(this.getInputStream(), StandardCharsets.UTF_8));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/filter/ApiKeyVerifyRequestWrapper.java",
      "class_name": "ApiKeyVerifyRequestWrapper",
      "method_name": "getBody",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 86,
      "line_end": 88,
      "content": "public String getBody() {\n        return body;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/filter/ApiKeyVerifyRequestWrapper.java",
      "class_name": "ApiKeyVerifyRequestWrapper",
      "method_name": "getContentType",
      "chunk_type": "other",
      "calls": [
        "unknown.getContentType"
      ],
      "called_by": [],
      "line_start": 93,
      "line_end": 99,
      "content": "@Override\n    public String getContentType() {\n        String contentType = super.getContentType();\n        // A common default if not explicitly set, or if you expect JSON for most API requests.\n        // Be careful with this default if your API handles various content types.\n        return contentType == null ? MediaType.APPLICATION_JSON_VALUE : contentType;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/filter/AppCorsFilter.java",
      "class_name": "AppCorsFilter",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 27,
      "line_end": 160,
      "content": "@Component\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Slf4j // Lombok annotation for logging\npublic class AppCorsFilter implements Filter {\n\n    // Spring's standard multipart resolver.\n    // Autowire it if it's a bean, or create it if not.\n    // For a filter, it's often configured via a Bean or WebMvcConfigurer.\n    // If you explicitly add @Bean for MultipartResolver, Spring will use it.\n    private final MultipartResolver multipartResolver;\n\n    // Constructor injection for MultipartResolver\n    // This is good practice for dependency injection in Spring.\n    // Ensure you have a @Bean for MultipartResolver in your config, e.g.,\n    // @Bean public MultipartResolver multipartResolver() { return new StandardServletMultipartResolver(); }\n    public AppCorsFilter(MultipartResolver multipartResolver) {\n        this.multipartResolver = multipartResolver;\n    }\n\n    // Overloaded constructor for cases where Spring might instantiate without explicit injection,\n    // although the above constructor is preferred when using @Component.\n    public AppCorsFilter() {\n        // Fallback for when Spring doesn't inject it via constructor.\n        // In a typical Spring Boot setup, StandardServletMultipartResolver is usually auto-configured\n        // if multipart properties are set (e.g., spring.servlet.multipart.enabled=true).\n        // It's safer to rely on dependency injection.\n        this.multipartResolver = new StandardServletMultipartResolver();\n    }\n\n\n    @Override\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n        HttpServletResponse response = (HttpServletResponse) res;\n        HttpServletRequest request = (HttpServletRequest) req;\n\n        // Skip health check URL\n        if (request.getRequestURI().contains(HEALTH_CHECK_URL)) {\n            chain.doFilter(req, res);\n            return;\n        }\n\n        // Initialize requestId here to ensure it's always set\n        String requestId = UUID.randomUUID().toString(); // Default if not found in header\n        ThreadContext.put(THREAD_REQUEST_ID, requestId); // Always put in ThreadContext early\n\n        try {\n            // Check if it's a multipart request (e.g., file upload)\n            boolean isMultipart = multipartResolver.isMultipart(request); // Use Spring's resolver directly\n\n            if (isMultipart) {\n                // Resolve the multipart request\n                MultipartHttpServletRequest multipartRequest = multipartResolver.resolveMultipart(request);\n\n                // Get or generate X-Request-ID\n                String headerRequestId = multipartRequest.getHeader(X_REQUEST_ID);\n                if (!ObjectUtils.isEmpty(headerRequestId)) {\n                    requestId = headerRequestId;\n                    ThreadContext.put(THREAD_REQUEST_ID, requestId); // Update if found in header\n                }\n\n                // Attach multipart request body to attribute\n                multipartRequest.setAttribute(REQUEST_BODY, multipartRequest);\n                multipartRequest.setAttribute(REQUEST_ID, requestId);\n\n                chain.doFilter(multipartRequest, response);\n\n            } else {\n                // For non-multipart requests, wrap the request to re-read the body\n                ApiKeyVerifyRequestWrapper requestWrapper = new ApiKeyVerifyRequestWrapper(request);\n\n                // Get or generate X-Request-ID from the wrapped request\n                String headerRequestId = requestWrapper.getHeader(X_REQUEST_ID);\n                if (!ObjectUtils.isEmpty(headerRequestId)) {\n                    requestId = headerRequestId;\n                    ThreadContext.put(THREAD_REQUEST_ID, requestId); // Update if found in header\n                }\n\n                // Parse JSON body if available\n                JSONObject dataRequest = new JSONObject();\n                String requestBodyString = requestWrapper.getBody();\n                if (!ObjectUtils.isEmpty(requestBodyString)) {\n                    try {\n                        JSONParser parser = new JSONParser();\n                        dataRequest = (JSONObject) parser.parse(requestBodyString);\n                    } catch (ParseException e) {\n                        log.warn(\"Failed to parse request body as JSON for URI: {}. Body: {}\", request.getRequestURI(), requestBodyString, e);\n                        // Decide how to handle non-JSON bodies. For now, dataRequest remains empty.\n                        // You might want to return 400 Bad Request here if JSON is strictly required.\n                    }\n                }\n\n                // Add request metadata to JSON object and request attributes\n                dataRequest.put(REQUEST_ID, requestId);\n                request.setAttribute(REQUEST_ID, requestId); // Use original request for attributes if chain expects it\n\n                dataRequest.put(API_KEY, requestWrapper.getHeader(API_KEY));\n                request.setAttribute(API_KEY, requestWrapper.getHeader(API_KEY));\n\n                dataRequest.put(API_SECRET, requestWrapper.getHeader(API_SECRET));\n                request.setAttribute(API_SECRET, requestWrapper.getHeader(API_SECRET));\n\n                // Note: request.getRequestURI() is already available from the original request\n                // requestWrapper.getHeader(RequestKeyConstant.URI) doesn't make sense as URI is not a header.\n                // Assuming URI is needed in dataRequest for logging/processing.\n                dataRequest.put(URI, request.getRequestURI());\n                request.setAttribute(URI, request.getRequestURI()); // Set actual URI\n\n                request.setAttribute(REQUEST_PARAMETERS, request.getParameterMap()); // Parameters from original request\n                request.setAttribute(REQUEST_BODY, dataRequest); // The parsed JSON body\n\n                // The requestWrapper's body is immutable (final), so setting it here won't change\n                // the stream that ApiKeyVerifyRequestWrapper provides.\n                // If you intend to *modify* the body and have the modified body flow downstream,\n                // you would need a more sophisticated wrapper that allows body modification\n                // before constructing its InputStream/Reader.\n                // For now, `requestWrapper.setBody(dataRequest.toString());` is removed\n                // as `setBody` was removed in the previous step and it was modifying the internal state\n                // of the wrapper, not the original request input stream for subsequent filters/servlets.\n                // The `requestWrapper` already holds the *original* request body.\n\n                chain.doFilter(requestWrapper, response);\n            }\n        } catch (IOException | ServletException e) {\n            log.error(\"Filter processing error for URI: {}\", request.getRequestURI(), e);\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); // Or SC_BAD_REQUEST depending on error type\n        } catch (Throwable e) { // Catch all other unhandled throwables\n            log.error(\"An unexpected error occurred in filter for URI: {}\", request.getRequestURI(), e);\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n        } finally {\n            // Always clear ThreadContext regardless of success or failure\n            ThreadContext.clearAll();\n        }\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/filter/AppCorsFilter.java",
      "class_name": "AppCorsFilter",
      "method_name": "doFilter",
      "chunk_type": "other",
      "calls": [
        "FilterChain.doFilter",
        "ObjectUtils.isEmpty",
        "ThreadContext.clearAll",
        "ThreadContext.put",
        "UUID.randomUUID",
        "UUID.randomUUID().toString",
        "unknown.contains",
        "unknown.error",
        "unknown.getBody",
        "unknown.getHeader",
        "unknown.getParameterMap",
        "unknown.getRequestURI",
        "unknown.isMultipart",
        "unknown.parse",
        "unknown.put",
        "unknown.resolveMultipart",
        "unknown.setAttribute",
        "unknown.setStatus",
        "unknown.warn"
      ],
      "called_by": [],
      "line_start": 57,
      "line_end": 159,
      "content": "@Override\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n        HttpServletResponse response = (HttpServletResponse) res;\n        HttpServletRequest request = (HttpServletRequest) req;\n\n        // Skip health check URL\n        if (request.getRequestURI().contains(HEALTH_CHECK_URL)) {\n            chain.doFilter(req, res);\n            return;\n        }\n\n        // Initialize requestId here to ensure it's always set\n        String requestId = UUID.randomUUID().toString(); // Default if not found in header\n        ThreadContext.put(THREAD_REQUEST_ID, requestId); // Always put in ThreadContext early\n\n        try {\n            // Check if it's a multipart request (e.g., file upload)\n            boolean isMultipart = multipartResolver.isMultipart(request); // Use Spring's resolver directly\n\n            if (isMultipart) {\n                // Resolve the multipart request\n                MultipartHttpServletRequest multipartRequest = multipartResolver.resolveMultipart(request);\n\n                // Get or generate X-Request-ID\n                String headerRequestId = multipartRequest.getHeader(X_REQUEST_ID);\n                if (!ObjectUtils.isEmpty(headerRequestId)) {\n                    requestId = headerRequestId;\n                    ThreadContext.put(THREAD_REQUEST_ID, requestId); // Update if found in header\n                }\n\n                // Attach multipart request body to attribute\n                multipartRequest.setAttribute(REQUEST_BODY, multipartRequest);\n                multipartRequest.setAttribute(REQUEST_ID, requestId);\n\n                chain.doFilter(multipartRequest, response);\n\n            } else {\n                // For non-multipart requests, wrap the request to re-read the body\n                ApiKeyVerifyRequestWrapper requestWrapper = new ApiKeyVerifyRequestWrapper(request);\n\n                // Get or generate X-Request-ID from the wrapped request\n                String headerRequestId = requestWrapper.getHeader(X_REQUEST_ID);\n                if (!ObjectUtils.isEmpty(headerRequestId)) {\n                    requestId = headerRequestId;\n                    ThreadContext.put(THREAD_REQUEST_ID, requestId); // Update if found in header\n                }\n\n                // Parse JSON body if available\n                JSONObject dataRequest = new JSONObject();\n                String requestBodyString = requestWrapper.getBody();\n                if (!ObjectUtils.isEmpty(requestBodyString)) {\n                    try {\n                        JSONParser parser = new JSONParser();\n                        dataRequest = (JSONObject) parser.parse(requestBodyString);\n                    } catch (ParseException e) {\n                        log.warn(\"Failed to parse request body as JSON for URI: {}. Body: {}\", request.getRequestURI(), requestBodyString, e);\n                        // Decide how to handle non-JSON bodies. For now, dataRequest remains empty.\n                        // You might want to return 400 Bad Request here if JSON is strictly required.\n                    }\n                }\n\n                // Add request metadata to JSON object and request attributes\n                dataRequest.put(REQUEST_ID, requestId);\n                request.setAttribute(REQUEST_ID, requestId); // Use original request for attributes if chain expects it\n\n                dataRequest.put(API_KEY, requestWrapper.getHeader(API_KEY));\n                request.setAttribute(API_KEY, requestWrapper.getHeader(API_KEY));\n\n                dataRequest.put(API_SECRET, requestWrapper.getHeader(API_SECRET));\n                request.setAttribute(API_SECRET, requestWrapper.getHeader(API_SECRET));\n\n                // Note: request.getRequestURI() is already available from the original request\n                // requestWrapper.getHeader(RequestKeyConstant.URI) doesn't make sense as URI is not a header.\n                // Assuming URI is needed in dataRequest for logging/processing.\n                dataRequest.put(URI, request.getRequestURI());\n                request.setAttribute(URI, request.getRequestURI()); // Set actual URI\n\n                request.setAttribute(REQUEST_PARAMETERS, request.getParameterMap()); // Parameters from original request\n                request.setAttribute(REQUEST_BODY, dataRequest); // The parsed JSON body\n\n                // The requestWrapper's body is immutable (final), so setting it here won't change\n                // the stream that ApiKeyVerifyRequestWrapper provides.\n                // If you intend to *modify* the body and have the modified body flow downstream,\n                // you would need a more sophisticated wrapper that allows body modification\n                // before constructing its InputStream/Reader.\n                // For now, `requestWrapper.setBody(dataRequest.toString());` is removed\n                // as `setBody` was removed in the previous step and it was modifying the internal state\n                // of the wrapper, not the original request input stream for subsequent filters/servlets.\n                // The `requestWrapper` already holds the *original* request body.\n\n                chain.doFilter(requestWrapper, response);\n            }\n        } catch (IOException | ServletException e) {\n            log.error(\"Filter processing error for URI: {}\", request.getRequestURI(), e);\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); // Or SC_BAD_REQUEST depending on error type\n        } catch (Throwable e) { // Catch all other unhandled throwables\n            log.error(\"An unexpected error occurred in filter for URI: {}\", request.getRequestURI(), e);\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n        } finally {\n            // Always clear ThreadContext regardless of success or failure\n            ThreadContext.clearAll();\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuestionRepositoryImpl.java",
      "class_name": "QuestionRepositoryImpl",
      "method_name": null,
      "chunk_type": "repository",
      "calls": [],
      "called_by": [],
      "line_start": 12,
      "line_end": 52,
      "content": "@Repository\npublic class QuestionRepositoryImpl implements QuestionRepository {\n\n    private final JpaQuestionRepository repository;\n\n    public QuestionRepositoryImpl(JpaQuestionRepository repository) {\n        this.repository = repository;\n    }\n\n    @Override\n    public Question save(Question question) {\n        return repository.save(question);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Optional<Question> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<Question> findByQuizId(String quizId) {\n        return repository.findByQuizId(UUID.fromString(quizId));\n    }\n\n    @Override\n    public void saveAll(List<Question> questions) {\n        repository.saveAll(questions);\n    }\n\n    @Override\n    public void deleteAll(List<Question> questions) {\n        repository.deleteAll(questions);\n    }\n\n    @Override\n    public Integer countByQuizId(String quizId) {\n        return repository.countByQuizId(UUID.fromString(quizId));\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuestionRepositoryImpl.java",
      "class_name": "QuestionRepositoryImpl",
      "method_name": "save",
      "chunk_type": "repository",
      "calls": [
        "unknown.save"
      ],
      "called_by": [],
      "line_start": 21,
      "line_end": 24,
      "content": "@Override\n    public Question save(Question question) {\n        return repository.save(question);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuestionRepositoryImpl.java",
      "class_name": "QuestionRepositoryImpl",
      "method_name": "findById",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.findById"
      ],
      "called_by": [],
      "line_start": 26,
      "line_end": 30,
      "content": "@Override\n    @Transactional(readOnly = true)\n    public Optional<Question> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuestionRepositoryImpl.java",
      "class_name": "QuestionRepositoryImpl",
      "method_name": "findByQuizId",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.findByQuizId"
      ],
      "called_by": [],
      "line_start": 32,
      "line_end": 36,
      "content": "@Override\n    @Transactional(readOnly = true)\n    public List<Question> findByQuizId(String quizId) {\n        return repository.findByQuizId(UUID.fromString(quizId));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuestionRepositoryImpl.java",
      "class_name": "QuestionRepositoryImpl",
      "method_name": "saveAll",
      "chunk_type": "repository",
      "calls": [
        "unknown.saveAll"
      ],
      "called_by": [],
      "line_start": 38,
      "line_end": 41,
      "content": "@Override\n    public void saveAll(List<Question> questions) {\n        repository.saveAll(questions);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuestionRepositoryImpl.java",
      "class_name": "QuestionRepositoryImpl",
      "method_name": "deleteAll",
      "chunk_type": "repository",
      "calls": [
        "unknown.deleteAll"
      ],
      "called_by": [],
      "line_start": 43,
      "line_end": 46,
      "content": "@Override\n    public void deleteAll(List<Question> questions) {\n        repository.deleteAll(questions);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuestionRepositoryImpl.java",
      "class_name": "QuestionRepositoryImpl",
      "method_name": "countByQuizId",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.countByQuizId"
      ],
      "called_by": [],
      "line_start": 48,
      "line_end": 51,
      "content": "@Override\n    public Integer countByQuizId(String quizId) {\n        return repository.countByQuizId(UUID.fromString(quizId));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAnswerRepositoryImpl.java",
      "class_name": "QuizAnswerRepositoryImpl",
      "method_name": null,
      "chunk_type": "repository",
      "calls": [],
      "called_by": [],
      "line_start": 11,
      "line_end": 44,
      "content": "@Repository\npublic class QuizAnswerRepositoryImpl implements QuizAnswerRepository {\n\n    private final JpaQuizAnswerRepository repository;\n\n    public QuizAnswerRepositoryImpl(JpaQuizAnswerRepository repository) {\n        this.repository = repository;\n    }\n\n    @Override\n    public QuizAnswer save(QuizAnswer answer) {\n        return repository.save(answer);\n    }\n\n    @Override\n    public void saveAll(List<QuizAnswer> answers) {\n        repository.saveAll(answers);\n    }\n\n    @Override\n    public Optional<QuizAnswer> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }\n\n    @Override\n    public List<QuizAnswer> findByQuizAttemptId(String attemptId) {\n        return repository.findByQuizAttemptId(UUID.fromString(attemptId));\n    }\n\n    @Override\n    public void delete(QuizAnswer oldAnswer) {\n        repository.delete(oldAnswer);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAnswerRepositoryImpl.java",
      "class_name": "QuizAnswerRepositoryImpl",
      "method_name": "save",
      "chunk_type": "repository",
      "calls": [
        "unknown.save"
      ],
      "called_by": [],
      "line_start": 20,
      "line_end": 23,
      "content": "@Override\n    public QuizAnswer save(QuizAnswer answer) {\n        return repository.save(answer);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAnswerRepositoryImpl.java",
      "class_name": "QuizAnswerRepositoryImpl",
      "method_name": "saveAll",
      "chunk_type": "repository",
      "calls": [
        "unknown.saveAll"
      ],
      "called_by": [],
      "line_start": 25,
      "line_end": 28,
      "content": "@Override\n    public void saveAll(List<QuizAnswer> answers) {\n        repository.saveAll(answers);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAnswerRepositoryImpl.java",
      "class_name": "QuizAnswerRepositoryImpl",
      "method_name": "findById",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.findById"
      ],
      "called_by": [],
      "line_start": 30,
      "line_end": 33,
      "content": "@Override\n    public Optional<QuizAnswer> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAnswerRepositoryImpl.java",
      "class_name": "QuizAnswerRepositoryImpl",
      "method_name": "findByQuizAttemptId",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.findByQuizAttemptId"
      ],
      "called_by": [],
      "line_start": 35,
      "line_end": 38,
      "content": "@Override\n    public List<QuizAnswer> findByQuizAttemptId(String attemptId) {\n        return repository.findByQuizAttemptId(UUID.fromString(attemptId));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAnswerRepositoryImpl.java",
      "class_name": "QuizAnswerRepositoryImpl",
      "method_name": "delete",
      "chunk_type": "repository",
      "calls": [
        "unknown.delete"
      ],
      "called_by": [],
      "line_start": 40,
      "line_end": 43,
      "content": "@Override\n    public void delete(QuizAnswer oldAnswer) {\n        repository.delete(oldAnswer);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAttemptRepositoryImpl.java",
      "class_name": "QuizAttemptRepositoryImpl",
      "method_name": null,
      "chunk_type": "repository",
      "calls": [],
      "called_by": [],
      "line_start": 11,
      "line_end": 44,
      "content": "@Repository\npublic class QuizAttemptRepositoryImpl implements QuizAttemptRepository {\n\n    private final JpaQuizAttemptRepository jpaQuizAttemptRepository;\n\n    public QuizAttemptRepositoryImpl(JpaQuizAttemptRepository jpaQuizAttemptRepository) {\n        this.jpaQuizAttemptRepository = jpaQuizAttemptRepository;\n    }\n\n    @Override\n    public QuizAttempt save(QuizAttempt attempt) {\n        return jpaQuizAttemptRepository.save(attempt);\n    }\n\n    @Override\n    public Optional<QuizAttempt> findById(String id) {\n        return jpaQuizAttemptRepository.findById(UUID.fromString(id));\n    }\n\n    @Override\n    public List<QuizAttempt> findAll() {\n        return jpaQuizAttemptRepository.findAll();\n    }\n\n    @Override\n    public List<QuizAttempt> findByUserId(UUID id) {\n        return jpaQuizAttemptRepository.findByUserId(id);\n    }\n\n    @Override\n    public List<QuizAttempt> findByQuizId(String id) {\n        return jpaQuizAttemptRepository.findByQuizId(UUID.fromString(id));\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAttemptRepositoryImpl.java",
      "class_name": "QuizAttemptRepositoryImpl",
      "method_name": "save",
      "chunk_type": "repository",
      "calls": [
        "unknown.save"
      ],
      "called_by": [],
      "line_start": 20,
      "line_end": 23,
      "content": "@Override\n    public QuizAttempt save(QuizAttempt attempt) {\n        return jpaQuizAttemptRepository.save(attempt);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAttemptRepositoryImpl.java",
      "class_name": "QuizAttemptRepositoryImpl",
      "method_name": "findById",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.findById"
      ],
      "called_by": [],
      "line_start": 25,
      "line_end": 28,
      "content": "@Override\n    public Optional<QuizAttempt> findById(String id) {\n        return jpaQuizAttemptRepository.findById(UUID.fromString(id));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAttemptRepositoryImpl.java",
      "class_name": "QuizAttemptRepositoryImpl",
      "method_name": "findAll",
      "chunk_type": "repository",
      "calls": [
        "unknown.findAll"
      ],
      "called_by": [],
      "line_start": 30,
      "line_end": 33,
      "content": "@Override\n    public List<QuizAttempt> findAll() {\n        return jpaQuizAttemptRepository.findAll();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAttemptRepositoryImpl.java",
      "class_name": "QuizAttemptRepositoryImpl",
      "method_name": "findByUserId",
      "chunk_type": "repository",
      "calls": [
        "unknown.findByUserId"
      ],
      "called_by": [],
      "line_start": 35,
      "line_end": 38,
      "content": "@Override\n    public List<QuizAttempt> findByUserId(UUID id) {\n        return jpaQuizAttemptRepository.findByUserId(id);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizAttemptRepositoryImpl.java",
      "class_name": "QuizAttemptRepositoryImpl",
      "method_name": "findByQuizId",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.findByQuizId"
      ],
      "called_by": [],
      "line_start": 40,
      "line_end": 43,
      "content": "@Override\n    public List<QuizAttempt> findByQuizId(String id) {\n        return jpaQuizAttemptRepository.findByQuizId(UUID.fromString(id));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizRepositoryImpl.java",
      "class_name": "QuizRepositoryImpl",
      "method_name": null,
      "chunk_type": "repository",
      "calls": [],
      "called_by": [],
      "line_start": 13,
      "line_end": 53,
      "content": "@Repository\npublic class QuizRepositoryImpl implements QuizRepository {\n\n    private final JpaQuizRepository repository;\n\n    public QuizRepositoryImpl(JpaQuizRepository repository) {\n        this.repository = repository;\n    }\n\n    @Override\n    public void save(Quiz quiz) {\n        repository.save(quiz);\n    }\n\n    @Override\n    public Optional<Quiz> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }\n\n    @Override\n    public List<Quiz> findAll() {\n        return repository.findAll();\n    }\n\n    @Override\n    public List<Quiz> findByUserId(UUID id) {\n        return repository.findByAuthorId(id);\n    }\n\n    @Override\n    public List<Quiz> findByIdIn(Set<String> quizId) {\n        return repository.findByIdIn(quizId.stream()\n                .map(UUID::fromString)\n                .toList());\n    }\n\n    @Override\n    public List<Quiz> findAllPublic() {\n        return repository.findByStatus(QuizStatus.PUBLIC);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizRepositoryImpl.java",
      "class_name": "QuizRepositoryImpl",
      "method_name": "save",
      "chunk_type": "repository",
      "calls": [
        "unknown.save"
      ],
      "called_by": [],
      "line_start": 22,
      "line_end": 25,
      "content": "@Override\n    public void save(Quiz quiz) {\n        repository.save(quiz);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizRepositoryImpl.java",
      "class_name": "QuizRepositoryImpl",
      "method_name": "findById",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.findById"
      ],
      "called_by": [],
      "line_start": 27,
      "line_end": 30,
      "content": "@Override\n    public Optional<Quiz> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizRepositoryImpl.java",
      "class_name": "QuizRepositoryImpl",
      "method_name": "findAll",
      "chunk_type": "repository",
      "calls": [
        "unknown.findAll"
      ],
      "called_by": [],
      "line_start": 32,
      "line_end": 35,
      "content": "@Override\n    public List<Quiz> findAll() {\n        return repository.findAll();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizRepositoryImpl.java",
      "class_name": "QuizRepositoryImpl",
      "method_name": "findByUserId",
      "chunk_type": "repository",
      "calls": [
        "unknown.findByAuthorId"
      ],
      "called_by": [],
      "line_start": 37,
      "line_end": 40,
      "content": "@Override\n    public List<Quiz> findByUserId(UUID id) {\n        return repository.findByAuthorId(id);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizRepositoryImpl.java",
      "class_name": "QuizRepositoryImpl",
      "method_name": "findByIdIn",
      "chunk_type": "repository",
      "calls": [
        "Set<String>.stream",
        "unknown.findByIdIn",
        "unknown.map",
        "unknown.toList"
      ],
      "called_by": [],
      "line_start": 42,
      "line_end": 47,
      "content": "@Override\n    public List<Quiz> findByIdIn(Set<String> quizId) {\n        return repository.findByIdIn(quizId.stream()\n                .map(UUID::fromString)\n                .toList());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/QuizRepositoryImpl.java",
      "class_name": "QuizRepositoryImpl",
      "method_name": "findAllPublic",
      "chunk_type": "repository",
      "calls": [
        "unknown.findByStatus"
      ],
      "called_by": [],
      "line_start": 49,
      "line_end": 52,
      "content": "@Override\n    public List<Quiz> findAllPublic() {\n        return repository.findByStatus(QuizStatus.PUBLIC);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/ResourceRepositoryImpl.java",
      "class_name": "ResourceRepositoryImpl",
      "method_name": null,
      "chunk_type": "repository",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 27,
      "content": "@Repository\npublic class ResourceRepositoryImpl implements ResourceRepository {\n\n    private final JpaResourceRepository repository;\n\n    public ResourceRepositoryImpl(JpaResourceRepository repository) {\n        this.repository = repository;\n    }\n\n    @Override\n    public Resource save(Resource resource) {\n        return repository.save(resource);\n    }\n\n    @Override\n    public Resource findById(String id) {\n        return repository.findById(UUID.fromString(id)).orElse(null);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/ResourceRepositoryImpl.java",
      "class_name": "ResourceRepositoryImpl",
      "method_name": "save",
      "chunk_type": "repository",
      "calls": [
        "unknown.save"
      ],
      "called_by": [],
      "line_start": 18,
      "line_end": 21,
      "content": "@Override\n    public Resource save(Resource resource) {\n        return repository.save(resource);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/ResourceRepositoryImpl.java",
      "class_name": "ResourceRepositoryImpl",
      "method_name": "findById",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.findById",
        "unknown.orElse"
      ],
      "called_by": [],
      "line_start": 23,
      "line_end": 26,
      "content": "@Override\n    public Resource findById(String id) {\n        return repository.findById(UUID.fromString(id)).orElse(null);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/SavedQuizRepositoryImpl.java",
      "class_name": "SavedQuizRepositoryImpl",
      "method_name": null,
      "chunk_type": "repository",
      "calls": [],
      "called_by": [],
      "line_start": 11,
      "line_end": 53,
      "content": "@Repository\npublic class SavedQuizRepositoryImpl implements SavedQuizRepository {\n\n    private final JpaSavedQuizRepository jpaSavedQuizRepository;\n\n    public SavedQuizRepositoryImpl(JpaSavedQuizRepository jpaSavedQuizRepository) {\n        this.jpaSavedQuizRepository = jpaSavedQuizRepository;\n    }\n\n    @Override\n    public void saveQuiz(String quizId, String userId) {\n        UserSavedQuiz savedQuiz = new UserSavedQuiz();\n        savedQuiz.setSavedAt(LocalDateTime.now());\n        savedQuiz.setQuizId(UUID.fromString(quizId));\n        savedQuiz.setUserId(UUID.fromString(userId));\n        jpaSavedQuizRepository.save(savedQuiz);\n    }\n\n    @Override\n    public List<UserSavedQuiz> findAllByUserId(String userId) {\n        return jpaSavedQuizRepository.findByUserId(UUID.fromString(userId));\n    }\n\n    @Override\n    public void deleteByQuizIdAndUserId(String quizId, String userId) {\n        jpaSavedQuizRepository.deleteByQuizIdAndUserId(UUID.fromString(quizId), UUID.fromString(userId));\n    }\n\n    @Override\n    public boolean existsByQuizIdAndUserId(String quizId, String userId) {\n        return jpaSavedQuizRepository.existsByQuizIdAndUserId(UUID.fromString(quizId), UUID.fromString(userId));\n    }\n\n    @Override\n    public List<UserSavedQuiz> findAllByQuizId(String quizId) {\n        return jpaSavedQuizRepository.findAllByQuizId(UUID.fromString(quizId));\n    }\n\n    @Override\n    public void update(UserSavedQuiz savedQuiz) {\n        jpaSavedQuizRepository.save(savedQuiz);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/SavedQuizRepositoryImpl.java",
      "class_name": "SavedQuizRepositoryImpl",
      "method_name": "saveQuiz",
      "chunk_type": "repository",
      "calls": [
        "LocalDateTime.now",
        "UUID.fromString",
        "unknown.save",
        "unknown.setQuizId",
        "unknown.setSavedAt",
        "unknown.setUserId"
      ],
      "called_by": [],
      "line_start": 20,
      "line_end": 27,
      "content": "@Override\n    public void saveQuiz(String quizId, String userId) {\n        UserSavedQuiz savedQuiz = new UserSavedQuiz();\n        savedQuiz.setSavedAt(LocalDateTime.now());\n        savedQuiz.setQuizId(UUID.fromString(quizId));\n        savedQuiz.setUserId(UUID.fromString(userId));\n        jpaSavedQuizRepository.save(savedQuiz);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/SavedQuizRepositoryImpl.java",
      "class_name": "SavedQuizRepositoryImpl",
      "method_name": "findAllByUserId",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.findByUserId"
      ],
      "called_by": [],
      "line_start": 29,
      "line_end": 32,
      "content": "@Override\n    public List<UserSavedQuiz> findAllByUserId(String userId) {\n        return jpaSavedQuizRepository.findByUserId(UUID.fromString(userId));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/SavedQuizRepositoryImpl.java",
      "class_name": "SavedQuizRepositoryImpl",
      "method_name": "deleteByQuizIdAndUserId",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.deleteByQuizIdAndUserId"
      ],
      "called_by": [],
      "line_start": 34,
      "line_end": 37,
      "content": "@Override\n    public void deleteByQuizIdAndUserId(String quizId, String userId) {\n        jpaSavedQuizRepository.deleteByQuizIdAndUserId(UUID.fromString(quizId), UUID.fromString(userId));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/SavedQuizRepositoryImpl.java",
      "class_name": "SavedQuizRepositoryImpl",
      "method_name": "existsByQuizIdAndUserId",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.existsByQuizIdAndUserId"
      ],
      "called_by": [],
      "line_start": 39,
      "line_end": 42,
      "content": "@Override\n    public boolean existsByQuizIdAndUserId(String quizId, String userId) {\n        return jpaSavedQuizRepository.existsByQuizIdAndUserId(UUID.fromString(quizId), UUID.fromString(userId));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/SavedQuizRepositoryImpl.java",
      "class_name": "SavedQuizRepositoryImpl",
      "method_name": "findAllByQuizId",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.findAllByQuizId"
      ],
      "called_by": [],
      "line_start": 44,
      "line_end": 47,
      "content": "@Override\n    public List<UserSavedQuiz> findAllByQuizId(String quizId) {\n        return jpaSavedQuizRepository.findAllByQuizId(UUID.fromString(quizId));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/SavedQuizRepositoryImpl.java",
      "class_name": "SavedQuizRepositoryImpl",
      "method_name": "update",
      "chunk_type": "repository",
      "calls": [
        "unknown.save"
      ],
      "called_by": [],
      "line_start": 49,
      "line_end": 52,
      "content": "@Override\n    public void update(UserSavedQuiz savedQuiz) {\n        jpaSavedQuizRepository.save(savedQuiz);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/UserRepositoryImpl.java",
      "class_name": "UserRepositoryImpl",
      "method_name": null,
      "chunk_type": "repository",
      "calls": [],
      "called_by": [],
      "line_start": 13,
      "line_end": 69,
      "content": "@Repository\npublic class UserRepositoryImpl implements UserRepository {\n\n    private final JpaUserRepository repository;\n\n    private final JpaUserCredentialRepository userCredentialRepository;\n\n    public UserRepositoryImpl(JpaUserRepository repository, JpaUserCredentialRepository userCredentialRepository) {\n        this.repository = repository;\n        this.userCredentialRepository = userCredentialRepository;\n    }\n\n    @Override\n    public Optional<User> getUserById(String userId) {\n        return repository.findById(UUID.fromString(userId));\n    }\n\n    @Override\n    public Optional<User> getByUsername(String username) {\n        return repository.findByUsername(username);\n    }\n\n    @Override\n    public Optional<User> getByUsernameForAuth(String username) {\n        Optional<User> user = repository.findByUsername(username);\n        if (user.isPresent()) {\n            UserCredential credentials = userCredentialRepository.findByUserId(user.get().getId());\n            user.get().setCredentials(credentials);\n            return user;\n        }\n        return Optional.empty();\n    }\n\n    @Override\n    public User persist(User user) {\n        User userRes = repository.save(user);\n        UserCredential credentials = user.getCredentials();\n        credentials.setUserId(userRes.getId());\n        userCredentialRepository.save(credentials);\n        return userRes;\n    }\n\n    @Override\n    public List<User> getByUserIdList(List<UUID> studentIds) {\n        return repository.findAllById(studentIds);\n    }\n\n    @Override\n    public List<BasicUserDto> basicSearch(String keyword) {\n        return List.of();\n    }\n\n    @Override\n    public Optional<User> getByEmail(String email) {\n        return repository.findByEmail(email);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/UserRepositoryImpl.java",
      "class_name": "UserRepositoryImpl",
      "method_name": "getUserById",
      "chunk_type": "repository",
      "calls": [
        "UUID.fromString",
        "unknown.findById"
      ],
      "called_by": [],
      "line_start": 25,
      "line_end": 28,
      "content": "@Override\n    public Optional<User> getUserById(String userId) {\n        return repository.findById(UUID.fromString(userId));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/UserRepositoryImpl.java",
      "class_name": "UserRepositoryImpl",
      "method_name": "getByUsername",
      "chunk_type": "repository",
      "calls": [
        "unknown.findByUsername"
      ],
      "called_by": [],
      "line_start": 30,
      "line_end": 33,
      "content": "@Override\n    public Optional<User> getByUsername(String username) {\n        return repository.findByUsername(username);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/UserRepositoryImpl.java",
      "class_name": "UserRepositoryImpl",
      "method_name": "getByUsernameForAuth",
      "chunk_type": "repository",
      "calls": [
        "Optional.empty",
        "unknown.findByUserId",
        "unknown.findByUsername",
        "unknown.get",
        "unknown.getId",
        "unknown.isPresent",
        "unknown.setCredentials"
      ],
      "called_by": [],
      "line_start": 35,
      "line_end": 44,
      "content": "@Override\n    public Optional<User> getByUsernameForAuth(String username) {\n        Optional<User> user = repository.findByUsername(username);\n        if (user.isPresent()) {\n            UserCredential credentials = userCredentialRepository.findByUserId(user.get().getId());\n            user.get().setCredentials(credentials);\n            return user;\n        }\n        return Optional.empty();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/UserRepositoryImpl.java",
      "class_name": "UserRepositoryImpl",
      "method_name": "persist",
      "chunk_type": "repository",
      "calls": [
        "User.getCredentials",
        "unknown.getId",
        "unknown.save",
        "unknown.setUserId"
      ],
      "called_by": [],
      "line_start": 46,
      "line_end": 53,
      "content": "@Override\n    public User persist(User user) {\n        User userRes = repository.save(user);\n        UserCredential credentials = user.getCredentials();\n        credentials.setUserId(userRes.getId());\n        userCredentialRepository.save(credentials);\n        return userRes;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/UserRepositoryImpl.java",
      "class_name": "UserRepositoryImpl",
      "method_name": "getByUserIdList",
      "chunk_type": "repository",
      "calls": [
        "unknown.findAllById"
      ],
      "called_by": [],
      "line_start": 55,
      "line_end": 58,
      "content": "@Override\n    public List<User> getByUserIdList(List<UUID> studentIds) {\n        return repository.findAllById(studentIds);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/UserRepositoryImpl.java",
      "class_name": "UserRepositoryImpl",
      "method_name": "basicSearch",
      "chunk_type": "repository",
      "calls": [
        "List.of"
      ],
      "called_by": [],
      "line_start": 60,
      "line_end": 63,
      "content": "@Override\n    public List<BasicUserDto> basicSearch(String keyword) {\n        return List.of();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/repository/impl/UserRepositoryImpl.java",
      "class_name": "UserRepositoryImpl",
      "method_name": "getByEmail",
      "chunk_type": "repository",
      "calls": [
        "unknown.findByEmail"
      ],
      "called_by": [],
      "line_start": 65,
      "line_end": 68,
      "content": "@Override\n    public Optional<User> getByEmail(String email) {\n        return repository.findByEmail(email);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/AuthConfig.java",
      "class_name": "AuthConfig",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 16,
      "line_end": 46,
      "content": "@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity(prePostEnabled = true)\n@RequiredArgsConstructor\npublic class AuthConfig {\n\n    private final AuthenticationProvider authProvider;\n\n    private final JwtFilter jwtFilter;\n\n    private final JwtAuthenticationEntryPoint unAuthorizedHandler;\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .cors(Customizer.withDefaults())\n                .csrf(AbstractHttpConfigurer::disable)\n                .authorizeHttpRequests(auth -> auth\n                        .requestMatchers(\"/api/v1/pub/**\").permitAll()\n                        .anyRequest().authenticated()\n                )\n                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n                .authenticationProvider(authProvider)\n                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)\n                .exceptionHandling(e -> e.authenticationEntryPoint(unAuthorizedHandler))\n                .securityContext(ctx -> ctx.requireExplicitSave(false));\n\n        return http.build();\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/AuthConfig.java",
      "class_name": "AuthConfig",
      "method_name": "securityFilterChain",
      "chunk_type": "other",
      "calls": [
        "Customizer.withDefaults",
        "HttpSecurity.build",
        "HttpSecurity.cors",
        "unknown.addFilterBefore",
        "unknown.anyRequest",
        "unknown.authenticated",
        "unknown.authenticationEntryPoint",
        "unknown.authenticationProvider",
        "unknown.authorizeHttpRequests",
        "unknown.csrf",
        "unknown.exceptionHandling",
        "unknown.permitAll",
        "unknown.requestMatchers",
        "unknown.requireExplicitSave",
        "unknown.securityContext",
        "unknown.sessionCreationPolicy",
        "unknown.sessionManagement"
      ],
      "called_by": [],
      "line_start": 28,
      "line_end": 44,
      "content": "@Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .cors(Customizer.withDefaults())\n                .csrf(AbstractHttpConfigurer::disable)\n                .authorizeHttpRequests(auth -> auth\n                        .requestMatchers(\"/api/v1/pub/**\").permitAll()\n                        .anyRequest().authenticated()\n                )\n                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n                .authenticationProvider(authProvider)\n                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)\n                .exceptionHandling(e -> e.authenticationEntryPoint(unAuthorizedHandler))\n                .securityContext(ctx -> ctx.requireExplicitSave(false));\n\n        return http.build();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/BeanConfig.java",
      "class_name": "BeanConfig",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 15,
      "line_end": 46,
      "content": "@Configuration\npublic class BeanConfig {\n\n    private final UserRepository userRepository;\n\n    public BeanConfig(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        return new AppUserDetailsService(userRepository);\n    }\n\n    @Bean\n    public AuthenticationProvider authenticationProvider() {\n        DaoAuthenticationProvider daoAuthProvider = new DaoAuthenticationProvider();\n        daoAuthProvider.setUserDetailsService(userDetailsService());\n        daoAuthProvider.setPasswordEncoder(passwordEncoder());\n\n        return daoAuthProvider;\n    }\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\n        return config.getAuthenticationManager();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/BeanConfig.java",
      "class_name": "BeanConfig",
      "method_name": "userDetailsService",
      "chunk_type": "other",
      "calls": [],
      "called_by": [
        "BeanConfig.authenticationProvider"
      ],
      "line_start": 24,
      "line_end": 27,
      "content": "@Bean\n    public UserDetailsService userDetailsService() {\n        return new AppUserDetailsService(userRepository);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/BeanConfig.java",
      "class_name": "BeanConfig",
      "method_name": "authenticationProvider",
      "chunk_type": "other",
      "calls": [
        "BeanConfig.passwordEncoder",
        "BeanConfig.userDetailsService",
        "unknown.setPasswordEncoder",
        "unknown.setUserDetailsService"
      ],
      "called_by": [],
      "line_start": 29,
      "line_end": 36,
      "content": "@Bean\n    public AuthenticationProvider authenticationProvider() {\n        DaoAuthenticationProvider daoAuthProvider = new DaoAuthenticationProvider();\n        daoAuthProvider.setUserDetailsService(userDetailsService());\n        daoAuthProvider.setPasswordEncoder(passwordEncoder());\n\n        return daoAuthProvider;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/BeanConfig.java",
      "class_name": "BeanConfig",
      "method_name": "authenticationManager",
      "chunk_type": "other",
      "calls": [
        "AuthenticationConfiguration.getAuthenticationManager"
      ],
      "called_by": [],
      "line_start": 37,
      "line_end": 40,
      "content": "@Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\n        return config.getAuthenticationManager();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/BeanConfig.java",
      "class_name": "BeanConfig",
      "method_name": "passwordEncoder",
      "chunk_type": "other",
      "calls": [],
      "called_by": [
        "BeanConfig.authenticationProvider"
      ],
      "line_start": 42,
      "line_end": 45,
      "content": "@Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtAuthenticationEntryPoint.java",
      "class_name": "JwtAuthenticationEntryPoint",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 17,
      "line_end": 39,
      "content": "@Component\n@Slf4j\npublic class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {\n\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        log.error(\"Unauthorized error: {}\", authException.getMessage());\n\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n\n        final Map<String, Object> body = new HashMap<>();\n        body.put(\"status\", HttpServletResponse.SC_UNAUTHORIZED);\n        body.put(\"error\", \"Unauthorized\");\n        body.put(\"message\", authException.getMessage());\n        body.put(\"path\", request.getServletPath());\n\n\n\n        final ObjectMapper mapper = new ObjectMapper();\n        mapper.writeValue(response.getOutputStream(), body);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtAuthenticationEntryPoint.java",
      "class_name": "JwtAuthenticationEntryPoint",
      "method_name": "commence",
      "chunk_type": "other",
      "calls": [
        "AuthenticationException.getMessage",
        "HttpServletRequest.getServletPath",
        "HttpServletResponse.getOutputStream",
        "HttpServletResponse.setContentType",
        "HttpServletResponse.setStatus",
        "unknown.error",
        "unknown.put",
        "unknown.writeValue"
      ],
      "called_by": [],
      "line_start": 21,
      "line_end": 38,
      "content": "@Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        log.error(\"Unauthorized error: {}\", authException.getMessage());\n\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n\n        final Map<String, Object> body = new HashMap<>();\n        body.put(\"status\", HttpServletResponse.SC_UNAUTHORIZED);\n        body.put(\"error\", \"Unauthorized\");\n        body.put(\"message\", authException.getMessage());\n        body.put(\"path\", request.getServletPath());\n\n\n\n        final ObjectMapper mapper = new ObjectMapper();\n        mapper.writeValue(response.getOutputStream(), body);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtFilter.java",
      "class_name": "JwtFilter",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 21,
      "line_end": 96,
      "content": "@Component\n@Slf4j\npublic class JwtFilter extends OncePerRequestFilter {\n\n    private final JwtProvider jwtProvider;\n    private final UserDetailsService userDetailsService;\n\n    private static final String[] PUBLIC_URLS = {\n            \"/api/v1/pub/.*\",\n    };\n\n    public JwtFilter(JwtProvider jwtProvider, UserDetailsService userDetailsService) {\n        this.jwtProvider = jwtProvider;\n        this.userDetailsService = userDetailsService;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        final String requestURI = request.getRequestURI();\n\n        boolean isPublicUrl = Arrays.stream(PUBLIC_URLS)\n                .anyMatch(requestURI::matches);\n\n        if (isPublicUrl) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n\n        final String authorizationHeader = request.getHeader(\"Authorization\");\n        String jwt = null;\n        String username = null;\n\n        if (authorizationHeader != null && authorizationHeader.startsWith(\"Bearer \")) {\n            jwt = authorizationHeader.substring(7);\n            try {\n                username = jwtProvider.extractUsername(jwt);\n            } catch (ExpiredJwtException ex) {\n                log.warn(\"JWT token is expired: {}\", ex.getMessage());\n            } catch (MalformedJwtException ex) {\n                log.warn(\"JWT token is malformed: {}\", ex.getMessage());\n            } catch (SignatureException ex) {\n                log.warn(\"JWT signature is invalid: {}\", ex.getMessage());\n            } catch (IllegalArgumentException ex) {\n                log.warn(\"Unable to get JWT Token or JWT claims string is empty: {}\", ex.getMessage());\n            } catch (Exception ex) {\n                log.error(\"An unexpected error occurred during JWT token processing: {}\", ex.getMessage(), ex);\n            }\n        }\n\n        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {\n            try {\n                UserPrincipal userDetails = (UserPrincipal) this.userDetailsService.loadUserByUsername(username);\n\n                if (jwtProvider.isTokenValid(jwt, userDetails)) {\n                    UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(\n                            userDetails,\n                            null,\n                            userDetails.getAuthorities()\n                    );\n\n                    authToken.setDetails(\n                            new WebAuthenticationDetailsSource().buildDetails(request)\n                    );\n\n                    SecurityContextHolder.getContext().setAuthentication(authToken);\n                } else {\n                    log.warn(\"Invalid JWT token for user: {}\", username);\n                }\n            } catch (Exception ex) {\n                log.error(\"Error authenticating user with JWT: {}\", ex.getMessage(), ex);\n            }\n        }\n\n        filterChain.doFilter(request, response);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtFilter.java",
      "class_name": "JwtFilter",
      "method_name": "doFilterInternal",
      "chunk_type": "other",
      "calls": [
        "Arrays.stream",
        "Arrays.stream(PUBLIC_URLS).anyMatch",
        "FilterChain.doFilter",
        "HttpServletRequest.getHeader",
        "HttpServletRequest.getRequestURI",
        "SecurityContextHolder.getContext",
        "SecurityContextHolder.getContext().getAuthentication",
        "SecurityContextHolder.getContext().setAuthentication",
        "unknown.buildDetails",
        "unknown.error",
        "unknown.extractUsername",
        "unknown.getAuthorities",
        "unknown.getMessage",
        "unknown.isTokenValid",
        "unknown.loadUserByUsername",
        "unknown.setDetails",
        "unknown.startsWith",
        "unknown.substring",
        "unknown.warn"
      ],
      "called_by": [],
      "line_start": 37,
      "line_end": 95,
      "content": "@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        final String requestURI = request.getRequestURI();\n\n        boolean isPublicUrl = Arrays.stream(PUBLIC_URLS)\n                .anyMatch(requestURI::matches);\n\n        if (isPublicUrl) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n\n        final String authorizationHeader = request.getHeader(\"Authorization\");\n        String jwt = null;\n        String username = null;\n\n        if (authorizationHeader != null && authorizationHeader.startsWith(\"Bearer \")) {\n            jwt = authorizationHeader.substring(7);\n            try {\n                username = jwtProvider.extractUsername(jwt);\n            } catch (ExpiredJwtException ex) {\n                log.warn(\"JWT token is expired: {}\", ex.getMessage());\n            } catch (MalformedJwtException ex) {\n                log.warn(\"JWT token is malformed: {}\", ex.getMessage());\n            } catch (SignatureException ex) {\n                log.warn(\"JWT signature is invalid: {}\", ex.getMessage());\n            } catch (IllegalArgumentException ex) {\n                log.warn(\"Unable to get JWT Token or JWT claims string is empty: {}\", ex.getMessage());\n            } catch (Exception ex) {\n                log.error(\"An unexpected error occurred during JWT token processing: {}\", ex.getMessage(), ex);\n            }\n        }\n\n        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {\n            try {\n                UserPrincipal userDetails = (UserPrincipal) this.userDetailsService.loadUserByUsername(username);\n\n                if (jwtProvider.isTokenValid(jwt, userDetails)) {\n                    UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(\n                            userDetails,\n                            null,\n                            userDetails.getAuthorities()\n                    );\n\n                    authToken.setDetails(\n                            new WebAuthenticationDetailsSource().buildDetails(request)\n                    );\n\n                    SecurityContextHolder.getContext().setAuthentication(authToken);\n                } else {\n                    log.warn(\"Invalid JWT token for user: {}\", username);\n                }\n            } catch (Exception ex) {\n                log.error(\"Error authenticating user with JWT: {}\", ex.getMessage(), ex);\n            }\n        }\n\n        filterChain.doFilter(request, response);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 21,
      "line_end": 111,
      "content": "@Component\n@Slf4j\npublic class JwtProvider {\n    @Value(\"${security.jwt.secret}\")\n    private String secretKey;\n\n    @Value(\"${security.jwt.access-token-expiration}\")\n    private long accessTokenExpired;\n\n    @Value(\"${security.jwt.refresh-token-expiration}\")\n    private long refreshTokenExpired;\n\n    public String extractUsername(String token) {\n        Claims claims = extractAllClaims(token);\n        return claims.getSubject();\n    }\n\n    private <T> T extractClaims(String token, Function<Claims, T> claimsResolver) {\n        final Claims claims = extractAllClaims(token);\n        return claimsResolver.apply(claims);\n    }\n\n    private Claims extractAllClaims(String token) {\n        return Jwts.\n                parserBuilder().\n                setSigningKey(getSignInKey()).\n                build().\n                parseClaimsJws(token).\n                getBody();\n    }\n\n    private Key getSignInKey() {\n        byte[] keyBytes = Decoders.BASE64.decode(secretKey);\n        return Keys.hmacShaKeyFor(keyBytes);\n    }\n\n    public String generateAccessToken(Authentication authentication) {\n        UserPrincipal userDetails = (UserPrincipal) authentication.getPrincipal();\n        return generateToken(new HashMap<>(), userDetails, accessTokenExpired);\n    }\n\n    public String generateRefreshToken(Authentication authentication) {\n        UserPrincipal userDetails = (UserPrincipal) authentication.getPrincipal();\n        return generateToken(new HashMap<>(), userDetails, refreshTokenExpired);\n    }\n\n    public String generateToken(\n            Map<String, Object> extractClaims,\n            UserPrincipal userDetails,\n            long maxAge\n    ) {\n\n        return Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails))\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis() + maxAge))\n                .signWith(getSignInKey(), SignatureAlgorithm.HS256)\n                .compact();\n    }\n\n    private String buildScope(UserPrincipal user) {\n        StringJoiner stringJoiner = new StringJoiner(\" \");\n\n        if (!CollectionUtils.isEmpty(user.getRoles()))\n            user.getRoles().forEach(role -> {\n                stringJoiner.add(\"ROLE_\" + role);\n            });\n\n        return stringJoiner.toString();\n    }\n\n    public boolean isTokenExpired(String token) {\n        return extractExpiration(token).before(new Date());\n    }\n\n    private Date extractExpiration(String token) {\n        return extractClaims(token, Claims::getExpiration);\n    }\n\n    public boolean isTokenValid(String token, UserPrincipal userDetails) {\n        final String username = extractUsername(token);\n        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": "extractUsername",
      "chunk_type": "other",
      "calls": [
        "JwtProvider.extractAllClaims",
        "unknown.getSubject"
      ],
      "called_by": [
        "JwtProvider.isTokenValid"
      ],
      "line_start": 33,
      "line_end": 36,
      "content": "public String extractUsername(String token) {\n        Claims claims = extractAllClaims(token);\n        return claims.getSubject();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": "extractClaims",
      "chunk_type": "other",
      "calls": [
        "Function<Claims, T>.apply",
        "JwtProvider.extractAllClaims"
      ],
      "called_by": [
        "JwtProvider.extractExpiration"
      ],
      "line_start": 38,
      "line_end": 41,
      "content": "private <T> T extractClaims(String token, Function<Claims, T> claimsResolver) {\n        final Claims claims = extractAllClaims(token);\n        return claimsResolver.apply(claims);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": "extractAllClaims",
      "chunk_type": "other",
      "calls": [
        "JwtProvider.getSignInKey",
        "Jwts.\n                parserBuilder().\n                setSigningKey(getSignInKey()).\n                build().\n                parseClaimsJws(token).getBody",
        "Jwts.\n                parserBuilder().\n                setSigningKey(getSignInKey()).\n                build().parseClaimsJws",
        "Jwts.\n                parserBuilder().\n                setSigningKey(getSignInKey()).build",
        "Jwts.\n                parserBuilder().setSigningKey",
        "Jwts.parserBuilder"
      ],
      "called_by": [
        "JwtProvider.extractUsername",
        "JwtProvider.extractClaims"
      ],
      "line_start": 43,
      "line_end": 50,
      "content": "private Claims extractAllClaims(String token) {\n        return Jwts.\n                parserBuilder().\n                setSigningKey(getSignInKey()).\n                build().\n                parseClaimsJws(token).\n                getBody();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": "getSignInKey",
      "chunk_type": "other",
      "calls": [
        "Decoders.BASE64.decode",
        "Keys.hmacShaKeyFor"
      ],
      "called_by": [
        "JwtProvider.extractAllClaims",
        "JwtProvider.generateToken"
      ],
      "line_start": 52,
      "line_end": 55,
      "content": "private Key getSignInKey() {\n        byte[] keyBytes = Decoders.BASE64.decode(secretKey);\n        return Keys.hmacShaKeyFor(keyBytes);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": "generateAccessToken",
      "chunk_type": "other",
      "calls": [
        "Authentication.getPrincipal",
        "JwtProvider.generateToken"
      ],
      "called_by": [],
      "line_start": 57,
      "line_end": 60,
      "content": "public String generateAccessToken(Authentication authentication) {\n        UserPrincipal userDetails = (UserPrincipal) authentication.getPrincipal();\n        return generateToken(new HashMap<>(), userDetails, accessTokenExpired);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": "generateRefreshToken",
      "chunk_type": "other",
      "calls": [
        "Authentication.getPrincipal",
        "JwtProvider.generateToken"
      ],
      "called_by": [],
      "line_start": 62,
      "line_end": 65,
      "content": "public String generateRefreshToken(Authentication authentication) {\n        UserPrincipal userDetails = (UserPrincipal) authentication.getPrincipal();\n        return generateToken(new HashMap<>(), userDetails, refreshTokenExpired);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": "generateToken",
      "chunk_type": "other",
      "calls": [
        "JwtProvider.buildScope",
        "JwtProvider.getSignInKey",
        "Jwts.builder",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails))\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis() + maxAge))\n                .signWith(getSignInKey(), SignatureAlgorithm.HS256).compact",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails))\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis() + maxAge)).signWith",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails))\n                .setIssuedAt(new Date(System.currentTimeMillis())).setExpiration",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails)).setIssuedAt",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims).setSubject",
        "Jwts.builder().setClaims",
        "System.currentTimeMillis",
        "UserPrincipal.getAuthorities",
        "UserPrincipal.getEmail",
        "UserPrincipal.getId",
        "UserPrincipal.getRoles",
        "UserPrincipal.getUsername"
      ],
      "called_by": [
        "JwtProvider.generateAccessToken",
        "JwtProvider.generateRefreshToken"
      ],
      "line_start": 67,
      "line_end": 86,
      "content": "public String generateToken(\n            Map<String, Object> extractClaims,\n            UserPrincipal userDetails,\n            long maxAge\n    ) {\n\n        return Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails))\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis() + maxAge))\n                .signWith(getSignInKey(), SignatureAlgorithm.HS256)\n                .compact();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": "buildScope",
      "chunk_type": "other",
      "calls": [
        "CollectionUtils.isEmpty",
        "UserPrincipal.getRoles",
        "unknown.add",
        "unknown.forEach",
        "unknown.toString"
      ],
      "called_by": [
        "JwtProvider.generateToken"
      ],
      "line_start": 88,
      "line_end": 97,
      "content": "private String buildScope(UserPrincipal user) {\n        StringJoiner stringJoiner = new StringJoiner(\" \");\n\n        if (!CollectionUtils.isEmpty(user.getRoles()))\n            user.getRoles().forEach(role -> {\n                stringJoiner.add(\"ROLE_\" + role);\n            });\n\n        return stringJoiner.toString();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": "isTokenExpired",
      "chunk_type": "other",
      "calls": [
        "JwtProvider.extractExpiration",
        "unknown.before"
      ],
      "called_by": [
        "JwtProvider.isTokenValid"
      ],
      "line_start": 99,
      "line_end": 101,
      "content": "public boolean isTokenExpired(String token) {\n        return extractExpiration(token).before(new Date());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": "extractExpiration",
      "chunk_type": "other",
      "calls": [
        "JwtProvider.extractClaims"
      ],
      "called_by": [
        "JwtProvider.isTokenExpired"
      ],
      "line_start": 103,
      "line_end": 105,
      "content": "private Date extractExpiration(String token) {\n        return extractClaims(token, Claims::getExpiration);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/JwtProvider.java",
      "class_name": "JwtProvider",
      "method_name": "isTokenValid",
      "chunk_type": "other",
      "calls": [
        "JwtProvider.extractUsername",
        "JwtProvider.isTokenExpired",
        "UserPrincipal.getUsername",
        "unknown.equals"
      ],
      "called_by": [],
      "line_start": 107,
      "line_end": 110,
      "content": "public boolean isTokenValid(String token, UserPrincipal userDetails) {\n        final String username = extractUsername(token);\n        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/UserPrincipal.java",
      "class_name": "UserPrincipal",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 16,
      "line_end": 81,
      "content": "@Getter\n@Builder\n@Slf4j\n@ToString\npublic class UserPrincipal implements UserDetails {\n    private UUID id;\n    private String username;\n    private String email;\n    private String password;\n    private List<String> roles;\n\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities(){\n        return roles.stream()\n                .map(SimpleGrantedAuthority::new)\n                .toList();\n    }\n    public UserPrincipal(UUID id, String username, String email, String password, List<String> roles) {\n        this.id = id;\n        this.username = username;\n        this.email = email;\n        this.password = password;\n        this.roles = roles;\n    }\n\n    public static UserPrincipal from(User user) {\n        return UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername())\n                .email(user.getEmail())\n                .password(user.getCredentials().getPasswordHash())\n                .roles(List.of(user.getRole().toString()))\n                .build();\n    }\n\n    @Override\n    public String getPassword() {\n        return password;\n    }\n\n    @Override\n    public String getUsername() {\n        return username;\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/UserPrincipal.java",
      "class_name": "UserPrincipal",
      "method_name": "getAuthorities",
      "chunk_type": "other",
      "calls": [
        "unknown.map",
        "unknown.stream",
        "unknown.toList"
      ],
      "called_by": [
        "JwtProvider.generateToken"
      ],
      "line_start": 28,
      "line_end": 33,
      "content": "@Override\n    public Collection<? extends GrantedAuthority> getAuthorities(){\n        return roles.stream()\n                .map(SimpleGrantedAuthority::new)\n                .toList();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/UserPrincipal.java",
      "class_name": "UserPrincipal",
      "method_name": "from",
      "chunk_type": "other",
      "calls": [
        "List.of",
        "UUID.fromString",
        "User.getCredentials",
        "User.getEmail",
        "User.getId",
        "User.getRole",
        "User.getUsername",
        "UserPrincipal.builder",
        "UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername())\n                .email(user.getEmail())\n                .password(user.getCredentials().getPasswordHash())\n                .roles(List.of(user.getRole().toString())).build",
        "UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername())\n                .email(user.getEmail())\n                .password(user.getCredentials().getPasswordHash()).roles",
        "UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername())\n                .email(user.getEmail()).password",
        "UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername()).email",
        "UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString())).username",
        "UserPrincipal.builder().id",
        "unknown.getPasswordHash",
        "unknown.toString"
      ],
      "called_by": [
        "AppUserDetailsService.loadUserByUsername"
      ],
      "line_start": 42,
      "line_end": 50,
      "content": "public static UserPrincipal from(User user) {\n        return UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername())\n                .email(user.getEmail())\n                .password(user.getCredentials().getPasswordHash())\n                .roles(List.of(user.getRole().toString()))\n                .build();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/UserPrincipal.java",
      "class_name": "UserPrincipal",
      "method_name": "getPassword",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 52,
      "line_end": 55,
      "content": "@Override\n    public String getPassword() {\n        return password;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/UserPrincipal.java",
      "class_name": "UserPrincipal",
      "method_name": "getUsername",
      "chunk_type": "other",
      "calls": [],
      "called_by": [
        "JwtProvider.generateToken",
        "JwtProvider.isTokenValid"
      ],
      "line_start": 57,
      "line_end": 60,
      "content": "@Override\n    public String getUsername() {\n        return username;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/UserPrincipal.java",
      "class_name": "UserPrincipal",
      "method_name": "isAccountNonExpired",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 62,
      "line_end": 65,
      "content": "@Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/UserPrincipal.java",
      "class_name": "UserPrincipal",
      "method_name": "isAccountNonLocked",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 67,
      "line_end": 70,
      "content": "@Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/UserPrincipal.java",
      "class_name": "UserPrincipal",
      "method_name": "isCredentialsNonExpired",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 72,
      "line_end": 75,
      "content": "@Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/security/UserPrincipal.java",
      "class_name": "UserPrincipal",
      "method_name": "isEnabled",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 77,
      "line_end": 80,
      "content": "@Override\n    public boolean isEnabled() {\n        return true;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/AppUserDetailsService.java",
      "class_name": "AppUserDetailsService",
      "method_name": null,
      "chunk_type": "service",
      "calls": [],
      "called_by": [],
      "line_start": 14,
      "line_end": 30,
      "content": "@Service\n@Slf4j\npublic class AppUserDetailsService implements UserDetailsService {\n\n    private final UserRepository userRepository;\n\n    public AppUserDetailsService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.getByUsernameForAuth(username).orElseThrow(() -> new BusinessException(ErrorConstant.UNAUTHORIZED));\n\n        return UserPrincipal.from(user);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/AppUserDetailsService.java",
      "class_name": "AppUserDetailsService",
      "method_name": "loadUserByUsername",
      "chunk_type": "service",
      "calls": [
        "UserPrincipal.from",
        "unknown.getByUsernameForAuth",
        "unknown.orElseThrow"
      ],
      "called_by": [],
      "line_start": 24,
      "line_end": 29,
      "content": "@Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.getByUsernameForAuth(username).orElseThrow(() -> new BusinessException(ErrorConstant.UNAUTHORIZED));\n\n        return UserPrincipal.from(user);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": null,
      "chunk_type": "service",
      "calls": [],
      "called_by": [],
      "line_start": 23,
      "line_end": 148,
      "content": "@Service\n@Slf4j\npublic class BaseService {\n\n    @Autowired\n    protected Environment env;\n\n    @Value(\"${spring.application.name}\")\n    protected String appName;\n\n    @Autowired\n    protected ObjectMapper objectMapper;\n\n    @Autowired\n    protected HttpServletRequest httpServletRequest;\n\n    @Autowired\n    protected HttpServletResponse httpServletResponse;\n\n    public String getMessage(String key) {\n        try {\n            String result = env.getProperty(key);\n            return ObjectUtils.isEmpty(result) ? key : result;\n        } catch (Exception e) {\n            return key;\n        }\n    }\n\n    public String getMessage(int code) {\n        return getMessage(String.valueOf(code));\n    }\n\n    public String getMessage(BusinessError error) {\n        return ObjectUtils.isEmpty(error.getMessage()) ? getMessage(error.getCode()) : error.getMessage();\n    }\n\n    public Object getRequestValue(String key) {\n        return getRequestValue(key, Object.class);\n    }\n\n    public <T> T getRequestValue(String key, Class<T> clazz) {\n        return clazz.cast(httpServletRequest.getAttribute(key));\n    }\n\n    public String getRequestStringValue(String key) {\n        return getRequestValue(key, String.class);\n    }\n\n    public String getRequestId() {\n        return getRequestValue(RequestKeyConstant.REQUEST_ID).toString();\n    }\n\n    public Object getRequestBody() {\n        return getRequestValue(RequestKeyConstant.REQUEST_BODY);\n    }\n\n    public <T> BaseResponse<T> ofSucceeded(T data) {\n        return BaseResponse.ofSucceeded(getRequestId(), data);\n    }\n\n    public <T> BaseResponse<T> ofGetListSucceeded(T data, BasicRequestList requestList) {\n        return BaseResponse.ofGetListSucceeded(data, requestList);\n    }\n\n    public <T> BaseResponse<T> ofFailed(BusinessException exception, T data) {\n        return BaseResponse.ofFailed(getRequestId(), exception, data);\n    }\n\n    public <T> BaseResponse<T> ofFailed(BusinessError error, String message, T data) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, data);\n    }\n\n    public <T> BaseResponse<T> ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, errors, data);\n    }\n\n    public BaseResponse ofFailed(BusinessException exception) {\n        return BaseResponse.ofFailed(getRequestId(), exception);\n    }\n\n    public BaseResponse ofFailed(BusinessError error, String message) {\n        return BaseResponse.ofFailed(getRequestId(), error, message);\n    }\n\n    public BaseResponse ofFailed(BusinessError error) {\n        return BaseResponse.ofFailed(getRequestId(), error, getMessage(error));\n    }\n\n    public BaseResponse ofFailed(BusinessError error, String message, List<ErrorViolation> errors) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, errors);\n    }\n\n    public BaseResponse ofFailed(int errorCode) {\n        return BaseResponse.ofFailed(getRequestId(), getBusinessError(errorCode));\n    }\n\n    public <T> BaseResponse<T> ofFailed(int errorCode, T data) {\n        return BaseResponse.ofFailed(getRequestId(), getBusinessError(errorCode), data);\n    }\n\n    public BusinessError getBusinessError(int errorCode) {\n        return BusinessError.builder()\n                .code(errorCode)\n                .message(getMessage(errorCode))\n                .build();\n    }\n\n    public HttpHeaders getHeaders() {\n        HttpHeaders headers = new HttpHeaders();\n        Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n        while (headerNames.hasMoreElements()) {\n            String headerName = headerNames.nextElement();\n            String headerValue = httpServletRequest.getHeader(headerName);\n            headers.add(headerName, headerValue);\n        }\n        return headers;\n    }\n\n    public int getErrorCode(String errorCode, int errorCodeDefault) {\n        try {\n            return Integer.parseInt(errorCode);\n        } catch (NumberFormatException e) {\n            return errorCodeDefault;\n        }\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "getMessage",
      "chunk_type": "service",
      "calls": [
        "ObjectUtils.isEmpty",
        "unknown.getProperty"
      ],
      "called_by": [
        "BaseService.getMessage",
        "BaseService.getBusinessError"
      ],
      "line_start": 42,
      "line_end": 49,
      "content": "public String getMessage(String key) {\n        try {\n            String result = env.getProperty(key);\n            return ObjectUtils.isEmpty(result) ? key : result;\n        } catch (Exception e) {\n            return key;\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "getMessage",
      "chunk_type": "service",
      "calls": [
        "BaseService.getMessage",
        "String.valueOf"
      ],
      "called_by": [
        "BaseService.getMessage",
        "BaseService.getBusinessError"
      ],
      "line_start": 51,
      "line_end": 53,
      "content": "public String getMessage(int code) {\n        return getMessage(String.valueOf(code));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "getMessage",
      "chunk_type": "service",
      "calls": [
        "BaseService.getMessage",
        "BusinessError.getCode",
        "BusinessError.getMessage",
        "ObjectUtils.isEmpty"
      ],
      "called_by": [
        "BaseService.getMessage",
        "BaseService.getBusinessError"
      ],
      "line_start": 55,
      "line_end": 57,
      "content": "public String getMessage(BusinessError error) {\n        return ObjectUtils.isEmpty(error.getMessage()) ? getMessage(error.getCode()) : error.getMessage();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "getRequestValue",
      "chunk_type": "service",
      "calls": [
        "BaseService.getRequestValue"
      ],
      "called_by": [
        "BaseService.getRequestStringValue",
        "BaseService.getRequestId",
        "BaseService.getRequestBody"
      ],
      "line_start": 59,
      "line_end": 61,
      "content": "public Object getRequestValue(String key) {\n        return getRequestValue(key, Object.class);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "getRequestValue",
      "chunk_type": "service",
      "calls": [
        "Class<T>.cast",
        "unknown.getAttribute"
      ],
      "called_by": [
        "BaseService.getRequestStringValue",
        "BaseService.getRequestId",
        "BaseService.getRequestBody"
      ],
      "line_start": 63,
      "line_end": 65,
      "content": "public <T> T getRequestValue(String key, Class<T> clazz) {\n        return clazz.cast(httpServletRequest.getAttribute(key));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "getRequestStringValue",
      "chunk_type": "service",
      "calls": [
        "BaseService.getRequestValue"
      ],
      "called_by": [],
      "line_start": 67,
      "line_end": 69,
      "content": "public String getRequestStringValue(String key) {\n        return getRequestValue(key, String.class);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "getRequestId",
      "chunk_type": "service",
      "calls": [
        "BaseService.getRequestValue",
        "unknown.toString"
      ],
      "called_by": [
        "BaseService.ofSucceeded",
        "BaseService.ofFailed"
      ],
      "line_start": 71,
      "line_end": 73,
      "content": "public String getRequestId() {\n        return getRequestValue(RequestKeyConstant.REQUEST_ID).toString();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "getRequestBody",
      "chunk_type": "service",
      "calls": [
        "BaseService.getRequestValue"
      ],
      "called_by": [],
      "line_start": 75,
      "line_end": 77,
      "content": "public Object getRequestBody() {\n        return getRequestValue(RequestKeyConstant.REQUEST_BODY);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "ofSucceeded",
      "chunk_type": "service",
      "calls": [
        "BaseResponse.ofSucceeded",
        "BaseService.getRequestId"
      ],
      "called_by": [],
      "line_start": 79,
      "line_end": 81,
      "content": "public <T> BaseResponse<T> ofSucceeded(T data) {\n        return BaseResponse.ofSucceeded(getRequestId(), data);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "ofGetListSucceeded",
      "chunk_type": "service",
      "calls": [
        "BaseResponse.ofGetListSucceeded"
      ],
      "called_by": [],
      "line_start": 83,
      "line_end": 85,
      "content": "public <T> BaseResponse<T> ofGetListSucceeded(T data, BasicRequestList requestList) {\n        return BaseResponse.ofGetListSucceeded(data, requestList);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "ofFailed",
      "chunk_type": "service",
      "calls": [
        "BaseResponse.ofFailed",
        "BaseService.getRequestId"
      ],
      "called_by": [],
      "line_start": 87,
      "line_end": 89,
      "content": "public <T> BaseResponse<T> ofFailed(BusinessException exception, T data) {\n        return BaseResponse.ofFailed(getRequestId(), exception, data);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "ofFailed",
      "chunk_type": "service",
      "calls": [
        "BaseResponse.ofFailed",
        "BaseService.getRequestId"
      ],
      "called_by": [],
      "line_start": 91,
      "line_end": 93,
      "content": "public <T> BaseResponse<T> ofFailed(BusinessError error, String message, T data) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, data);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "ofFailed",
      "chunk_type": "service",
      "calls": [
        "BaseResponse.ofFailed",
        "BaseService.getRequestId"
      ],
      "called_by": [],
      "line_start": 95,
      "line_end": 97,
      "content": "public <T> BaseResponse<T> ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, errors, data);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "ofFailed",
      "chunk_type": "service",
      "calls": [
        "BaseResponse.ofFailed",
        "BaseService.getRequestId"
      ],
      "called_by": [],
      "line_start": 99,
      "line_end": 101,
      "content": "public BaseResponse ofFailed(BusinessException exception) {\n        return BaseResponse.ofFailed(getRequestId(), exception);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "ofFailed",
      "chunk_type": "service",
      "calls": [
        "BaseResponse.ofFailed",
        "BaseService.getRequestId"
      ],
      "called_by": [],
      "line_start": 103,
      "line_end": 105,
      "content": "public BaseResponse ofFailed(BusinessError error, String message) {\n        return BaseResponse.ofFailed(getRequestId(), error, message);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "ofFailed",
      "chunk_type": "service",
      "calls": [
        "BaseResponse.ofFailed",
        "BaseService.getMessage",
        "BaseService.getRequestId"
      ],
      "called_by": [],
      "line_start": 107,
      "line_end": 109,
      "content": "public BaseResponse ofFailed(BusinessError error) {\n        return BaseResponse.ofFailed(getRequestId(), error, getMessage(error));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "ofFailed",
      "chunk_type": "service",
      "calls": [
        "BaseResponse.ofFailed",
        "BaseService.getRequestId"
      ],
      "called_by": [],
      "line_start": 111,
      "line_end": 113,
      "content": "public BaseResponse ofFailed(BusinessError error, String message, List<ErrorViolation> errors) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, errors);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "ofFailed",
      "chunk_type": "service",
      "calls": [
        "BaseResponse.ofFailed",
        "BaseService.getBusinessError",
        "BaseService.getRequestId"
      ],
      "called_by": [],
      "line_start": 115,
      "line_end": 117,
      "content": "public BaseResponse ofFailed(int errorCode) {\n        return BaseResponse.ofFailed(getRequestId(), getBusinessError(errorCode));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "ofFailed",
      "chunk_type": "service",
      "calls": [
        "BaseResponse.ofFailed",
        "BaseService.getBusinessError",
        "BaseService.getRequestId"
      ],
      "called_by": [],
      "line_start": 119,
      "line_end": 121,
      "content": "public <T> BaseResponse<T> ofFailed(int errorCode, T data) {\n        return BaseResponse.ofFailed(getRequestId(), getBusinessError(errorCode), data);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "getBusinessError",
      "chunk_type": "service",
      "calls": [
        "BaseService.getMessage",
        "BusinessError.builder",
        "BusinessError.builder()\n                .code(errorCode)\n                .message(getMessage(errorCode)).build",
        "BusinessError.builder()\n                .code(errorCode).message",
        "BusinessError.builder().code"
      ],
      "called_by": [
        "BaseService.ofFailed"
      ],
      "line_start": 123,
      "line_end": 128,
      "content": "public BusinessError getBusinessError(int errorCode) {\n        return BusinessError.builder()\n                .code(errorCode)\n                .message(getMessage(errorCode))\n                .build();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "getHeaders",
      "chunk_type": "service",
      "calls": [
        "unknown.add",
        "unknown.getHeader",
        "unknown.getHeaderNames",
        "unknown.hasMoreElements",
        "unknown.nextElement"
      ],
      "called_by": [],
      "line_start": 130,
      "line_end": 139,
      "content": "public HttpHeaders getHeaders() {\n        HttpHeaders headers = new HttpHeaders();\n        Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n        while (headerNames.hasMoreElements()) {\n            String headerName = headerNames.nextElement();\n            String headerValue = httpServletRequest.getHeader(headerName);\n            headers.add(headerName, headerValue);\n        }\n        return headers;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/BaseService.java",
      "class_name": "BaseService",
      "method_name": "getErrorCode",
      "chunk_type": "service",
      "calls": [
        "Integer.parseInt"
      ],
      "called_by": [],
      "line_start": 141,
      "line_end": 147,
      "content": "public int getErrorCode(String errorCode, int errorCodeDefault) {\n        try {\n            return Integer.parseInt(errorCode);\n        } catch (NumberFormatException e) {\n            return errorCodeDefault;\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/AuthServiceImpl.java",
      "class_name": "AuthServiceImpl",
      "method_name": null,
      "chunk_type": "service",
      "calls": [],
      "called_by": [],
      "line_start": 22,
      "line_end": 92,
      "content": "@Service\n@Slf4j\npublic class AuthServiceImpl implements AuthService {\n\n    private final AuthenticationManager authenticationManager;\n\n    private final JwtProvider jwtProvider;\n\n    private final UserRepository userRepository;\n\n    private final PasswordEncoder passwordEncoder;\n\n    private final UserMapper userMapper;\n\n    public AuthServiceImpl(AuthenticationManager authenticationManager,\n                           JwtProvider jwtProvider,\n                           UserRepository userRepository,\n                           PasswordEncoder passwordEncoder,\n                           UserMapper userMapper) {\n        this.authenticationManager = authenticationManager;\n        this.jwtProvider = jwtProvider;\n        this.userRepository = userRepository;\n        this.passwordEncoder = passwordEncoder;\n        this.userMapper = userMapper;\n    }\n\n    @Override\n    public AuthRegisterResponse register(AuthRegisterRequest request) {\n        Optional<User> user = userRepository.getByUsername(request.getUsername());\n        if (user.isPresent()) {\n            throw new RuntimeException(\"Username already exists\");\n        }\n\n        User userData = userMapper.authRegisterRequestToUser(request);\n        userData.setRole(UserRole.USER);\n        UserCredential credentials = UserCredential\n                .builder()\n                .passwordHash(passwordEncoder.encode(request.getPassword()))\n                .userId(userData.getId())\n                .build();\n        userData.setCredentials(credentials);\n        userRepository.persist(userData);\n        return new AuthRegisterResponse(userData.getId().toString());\n    }\n\n    @Override\n    public AuthProfileResponse getAuthProfile(String id) {\n        User user = userRepository.getUserById(id).orElseThrow(() -> new RuntimeException(\"User not found\"));\n\n        return userMapper.userToAuthProfileResponse(user);\n    }\n\n    @Override\n    public AuthLoginResponse login(AuthLoginRequest request) {\n        try {\n            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(\n                    request.getUsername(),\n                    request.getPassword()\n            );\n            Authentication authentication = authenticationManager.authenticate(authenticationToken);\n\n            return new AuthLoginResponse(\n                    jwtProvider.generateAccessToken(authentication),\n                    jwtProvider.generateRefreshToken(authentication));\n        } catch (Exception ex) {\n            log.error(\"Login failed for user {}: {}\", request.getUsername(), ex.getMessage());\n            throw new BusinessException(ErrorConstant.USERNAME_PASSWORD_WRONG);\n        }\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/AuthServiceImpl.java",
      "class_name": "AuthServiceImpl",
      "method_name": "register",
      "chunk_type": "service",
      "calls": [
        "AuthRegisterRequest.getPassword",
        "AuthRegisterRequest.getUsername",
        "UserCredential\n                .builder()\n                .passwordHash(passwordEncoder.encode(request.getPassword()))\n                .userId(userData.getId()).build",
        "UserCredential\n                .builder()\n                .passwordHash(passwordEncoder.encode(request.getPassword())).userId",
        "UserCredential\n                .builder().passwordHash",
        "UserCredential.builder",
        "unknown.authRegisterRequestToUser",
        "unknown.encode",
        "unknown.getByUsername",
        "unknown.getId",
        "unknown.isPresent",
        "unknown.persist",
        "unknown.setCredentials",
        "unknown.setRole",
        "unknown.toString"
      ],
      "called_by": [],
      "line_start": 48,
      "line_end": 65,
      "content": "@Override\n    public AuthRegisterResponse register(AuthRegisterRequest request) {\n        Optional<User> user = userRepository.getByUsername(request.getUsername());\n        if (user.isPresent()) {\n            throw new RuntimeException(\"Username already exists\");\n        }\n\n        User userData = userMapper.authRegisterRequestToUser(request);\n        userData.setRole(UserRole.USER);\n        UserCredential credentials = UserCredential\n                .builder()\n                .passwordHash(passwordEncoder.encode(request.getPassword()))\n                .userId(userData.getId())\n                .build();\n        userData.setCredentials(credentials);\n        userRepository.persist(userData);\n        return new AuthRegisterResponse(userData.getId().toString());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/AuthServiceImpl.java",
      "class_name": "AuthServiceImpl",
      "method_name": "getAuthProfile",
      "chunk_type": "service",
      "calls": [
        "unknown.getUserById",
        "unknown.orElseThrow",
        "unknown.userToAuthProfileResponse"
      ],
      "called_by": [],
      "line_start": 67,
      "line_end": 72,
      "content": "@Override\n    public AuthProfileResponse getAuthProfile(String id) {\n        User user = userRepository.getUserById(id).orElseThrow(() -> new RuntimeException(\"User not found\"));\n\n        return userMapper.userToAuthProfileResponse(user);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/AuthServiceImpl.java",
      "class_name": "AuthServiceImpl",
      "method_name": "login",
      "chunk_type": "service",
      "calls": [
        "AuthLoginRequest.getPassword",
        "AuthLoginRequest.getUsername",
        "unknown.authenticate",
        "unknown.error",
        "unknown.generateAccessToken",
        "unknown.generateRefreshToken",
        "unknown.getMessage"
      ],
      "called_by": [],
      "line_start": 74,
      "line_end": 90,
      "content": "@Override\n    public AuthLoginResponse login(AuthLoginRequest request) {\n        try {\n            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(\n                    request.getUsername(),\n                    request.getPassword()\n            );\n            Authentication authentication = authenticationManager.authenticate(authenticationToken);\n\n            return new AuthLoginResponse(\n                    jwtProvider.generateAccessToken(authentication),\n                    jwtProvider.generateRefreshToken(authentication));\n        } catch (Exception ex) {\n            log.error(\"Login failed for user {}: {}\", request.getUsername(), ex.getMessage());\n            throw new BusinessException(ErrorConstant.USERNAME_PASSWORD_WRONG);\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuestionServiceImpl.java",
      "class_name": "QuestionServiceImpl",
      "method_name": null,
      "chunk_type": "service",
      "calls": [],
      "called_by": [],
      "line_start": 14,
      "line_end": 52,
      "content": "@Service\npublic class QuestionServiceImpl implements QuestionService {\n\n    private final QuestionRepository questionRepository;\n\n    public QuestionServiceImpl(QuestionRepository questionRepository) {\n        this.questionRepository = questionRepository;\n    }\n\n    @Override\n    public BaseCreateUpdateResponse createQuestion(QuestionDto request, UUID authorId) {\n        return null;\n    }\n\n    @Override\n    public BaseCreateUpdateResponse updateQuestion(QuestionDto request) {\n        return null;\n    }\n\n    @Override\n    public List<Question> getAllQuestions() {\n        return List.of();\n    }\n\n    @Override\n    public List<Question> getMyQuestions(UUID id) {\n        return List.of();\n    }\n\n    @Override\n    public Question getById(String id) {\n        return null;\n    }\n\n    @Override\n    public void deleteQuestion(String id) {\n\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuestionServiceImpl.java",
      "class_name": "QuestionServiceImpl",
      "method_name": "createQuestion",
      "chunk_type": "service",
      "calls": [],
      "called_by": [],
      "line_start": 23,
      "line_end": 26,
      "content": "@Override\n    public BaseCreateUpdateResponse createQuestion(QuestionDto request, UUID authorId) {\n        return null;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuestionServiceImpl.java",
      "class_name": "QuestionServiceImpl",
      "method_name": "updateQuestion",
      "chunk_type": "service",
      "calls": [],
      "called_by": [],
      "line_start": 28,
      "line_end": 31,
      "content": "@Override\n    public BaseCreateUpdateResponse updateQuestion(QuestionDto request) {\n        return null;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuestionServiceImpl.java",
      "class_name": "QuestionServiceImpl",
      "method_name": "getAllQuestions",
      "chunk_type": "service",
      "calls": [
        "List.of"
      ],
      "called_by": [],
      "line_start": 33,
      "line_end": 36,
      "content": "@Override\n    public List<Question> getAllQuestions() {\n        return List.of();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuestionServiceImpl.java",
      "class_name": "QuestionServiceImpl",
      "method_name": "getMyQuestions",
      "chunk_type": "service",
      "calls": [
        "List.of"
      ],
      "called_by": [],
      "line_start": 38,
      "line_end": 41,
      "content": "@Override\n    public List<Question> getMyQuestions(UUID id) {\n        return List.of();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuestionServiceImpl.java",
      "class_name": "QuestionServiceImpl",
      "method_name": "getById",
      "chunk_type": "service",
      "calls": [],
      "called_by": [],
      "line_start": 43,
      "line_end": 46,
      "content": "@Override\n    public Question getById(String id) {\n        return null;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuestionServiceImpl.java",
      "class_name": "QuestionServiceImpl",
      "method_name": "deleteQuestion",
      "chunk_type": "service",
      "calls": [],
      "called_by": [],
      "line_start": 48,
      "line_end": 51,
      "content": "@Override\n    public void deleteQuestion(String id) {\n\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": null,
      "chunk_type": "service",
      "calls": [],
      "called_by": [],
      "line_start": 35,
      "line_end": 517,
      "content": "@Service\n@Slf4j\npublic class QuizServiceImpl implements QuizService {\n\n    private final QuizMapper quizMapper;\n\n    private final QuestionMapper questionMapper;\n\n    private final QuizRepository quizRepository;\n\n    private final QuestionRepository questionRepository;\n\n    private final QuizAttemptRepository quizAttemptRepository;\n\n    private final QuizAnswerRepository quizAnswerRepository;\n\n    private final UserRepository userRepository;\n\n    private final SavedQuizRepository savedQuizRepository;\n\n    private final PronunciationServiceImpl pronunciationService;\n\n    private final ResourceService resourceService;\n\n    public QuizServiceImpl(QuizMapper quizMapper,\n                           QuestionMapper questionMapper,\n                           QuizRepository quizRepository,\n                           QuestionRepository questionRepository,\n                           QuizAttemptRepository quizAttemptRepository,\n                           QuizAnswerRepository quizAnswerRepository,\n                           UserRepository userRepository,\n                           SavedQuizRepository savedQuizRepository,\n                           PronunciationServiceImpl pronunciationService,\n                           ResourceService resourceService) {\n        this.quizMapper = quizMapper;\n        this.questionMapper = questionMapper;\n        this.quizRepository = quizRepository;\n        this.questionRepository = questionRepository;\n        this.quizAttemptRepository = quizAttemptRepository;\n        this.quizAnswerRepository = quizAnswerRepository;\n        this.userRepository = userRepository;\n        this.savedQuizRepository = savedQuizRepository;\n        this.pronunciationService = pronunciationService;\n        this.resourceService = resourceService;\n    }\n\n    @Override\n    public BaseCreateUpdateResponse createQuiz(CreateQuizDto request, UUID authorId) {\n        Quiz q = quizMapper.createQuizDtoToQuiz(request);\n        q.setAuthorId(authorId);\n        quizRepository.save(q);\n        return new BaseCreateUpdateResponse(q.getId().toString());\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public BaseCreateUpdateResponse updateQuiz(CreateQuizDto request) {\n        if (request.getId() == null) {\n            throw new IllegalArgumentException(\"Quiz ID must be provided for update operation.\");\n        }\n        UUID quizId = UUID.fromString(request.getId());\n        Quiz existingQuiz = quizRepository.findById(request.getId())\n                .orElseThrow(() -> new EntityNotFoundException(\"Quiz with ID \" + request.getId() + \" not found.\"));\n\n        quizMapper.updateQuizFromDto(request, existingQuiz);\n        existingQuiz.setUpdatedAt(LocalDateTime.now());\n        if (request.getIsPublic()) {\n            existingQuiz.setStatus(QuizStatus.PUBLIC);\n        } else {\n            existingQuiz.setStatus(QuizStatus.DRAFT);\n        }\n\n        List<Question> existingQuestions = questionRepository.findByQuizId(request.getId());\n        Map<UUID, Question> existingQuestionMap = existingQuestions.stream()\n                .collect(Collectors.toMap(Question::getId, q -> q));\n\n        List<Question> questionsToSaveOrUpdate = new ArrayList<>();\n        Set<UUID> questionIdsInDto = request.getQuestions().stream()\n                .filter(qDto -> qDto.getId() != null)\n                .map(qDto -> UUID.fromString(qDto.getId()))\n                .collect(Collectors.toSet());\n\n        for (QuestionDto qDto : request.getQuestions()) {\n            if (qDto.getId() == null) {\n                Question newQuestion = questionMapper.questionDtoToQuestion(qDto);\n                newQuestion.setQuizId(quizId);\n                newQuestion.setCreatedAt(LocalDateTime.now());\n                newQuestion.setUpdatedAt(LocalDateTime.now());\n                if (!CollectionUtils.isEmpty(newQuestion.getOptions())) {\n                    for (QuestionOption option : newQuestion.getOptions()) {\n                        option.setId(UUID.randomUUID());\n                    }\n                }\n                questionsToSaveOrUpdate.add(newQuestion);\n            } else {\n                UUID qId = UUID.fromString(qDto.getId());\n                Question questionToUpdate = existingQuestionMap.get(qId);\n                if (questionToUpdate != null) {\n                    questionMapper.updateQuestionFromDto(qDto, questionToUpdate);\n                    questionToUpdate.setUpdatedAt(LocalDateTime.now());\n                    // Ensure options are updated correctly\n                    if (!CollectionUtils.isEmpty(questionToUpdate.getOptions())) {\n                        for (QuestionOption option : questionToUpdate.getOptions()) {\n                            if (option.getId() == null) {\n                                option.setId(UUID.randomUUID());\n                            }\n                        }\n                    }\n                    questionsToSaveOrUpdate.add(questionToUpdate);\n                }\n            }\n        }\n\n        List<Question> questionsToDelete = existingQuestions.stream()\n                .filter(eq -> !questionIdsInDto.contains(eq.getId()))\n                .collect(Collectors.toList());\n\n        if (!questionsToDelete.isEmpty()) {\n            questionRepository.deleteAll(questionsToDelete);\n        }\n        if (!questionsToSaveOrUpdate.isEmpty()) {\n            questionRepository.saveAll(questionsToSaveOrUpdate);\n        }\n\n        existingQuiz.setQuestionCount(questionRepository.countByQuizId(quizId.toString()));\n\n        quizRepository.save(existingQuiz);\n        return new BaseCreateUpdateResponse(existingQuiz.getId().toString());\n    }\n\n    @Override\n    public List<Quiz> getAllPublicQuizzes() {\n        List<Quiz> quizzes = quizRepository.findAllPublic();\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }\n\n    @Override\n    public List<Quiz> getMyQuizzes(UUID id) {\n        List<Quiz> quizzes = quizRepository.findByUserId(id);\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }\n\n    @Override\n    public Quiz getById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        Set<Question> questions = new HashSet<>(questionRepository.findByQuizId(id));\n        quiz.setQuestions(questions);\n        getQuizAuthor(Collections.singletonList(quiz));\n        return quiz;\n    }\n\n    @Override\n    public void deleteQuiz(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        quiz.setDeletedAt(LocalDateTime.now());\n        quizRepository.save(quiz);\n    }\n\n    @Override\n    @Transactional\n    public BaseCreateUpdateResponse startQuiz(String quizId, UUID userId) {\n        quizRepository.findById(quizId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n\n        QuizAttempt quizAttempt = new QuizAttempt();\n        quizAttempt.setQuizId(UUID.fromString(quizId));\n        quizAttempt.setUserId(userId);\n        quizAttempt.setScore(BigDecimal.ZERO);\n        quizAttempt.setCorrectAnswers(0);\n        quizAttempt.setTimeSpent(0L);\n        quizAttempt.setCompletedAt(null);\n        quizAttempt.setPassed(false);\n\n        QuizAttempt savedAttempt = quizAttemptRepository.save(quizAttempt);\n        return new BaseCreateUpdateResponse(savedAttempt.getId().toString());\n    }\n\n    @Override\n    @Transactional\n    public BaseCreateUpdateResponse submitQuizQuestion(String attemptId, SubmitAnswerRequest request, UUID id) {\n        UUID questionId = UUID.fromString(request.getQuestionId());\n\n        QuizAttempt quizAttempt = quizAttemptRepository.findById(attemptId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n\n        // Ensure the quiz attempt is not already completed\n        if (quizAttempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n\n        Quiz quiz = quizRepository.findById(quizAttempt.getQuizId().toString()).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n\n        // calculate if time is exceeded by field created_at and quiz.getTimeLimit()\n        if (quiz.getTimeLimit() != null && quizAttempt.getCreatedAt() != null) {\n            LocalDateTime start = quizAttempt.getCreatedAt();\n            LocalDateTime end = LocalDateTime.now();\n            long timeSpent = Duration.between(start, end).toMinutes();\n            if (timeSpent > quiz.getTimeLimit()) {\n                quizAttempt.setTimeSpent(timeSpent);\n                quizAttempt.setCompletedAt(quizAttempt.getCreatedAt().plusMinutes(timeSpent));\n                quizAttemptRepository.save(quizAttempt);\n                throw new BusinessException(ErrorConstant.QUIZ_TIME_LIMIT_EXCEEDED);\n            }\n        }\n\n        Question question = questionRepository.findById(request.getQuestionId())\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUESTION_NOT_FOUND));\n\n        if (!Objects.equals(question.getQuizId(), quizAttempt.getQuizId())) {\n            throw new BusinessException(ErrorConstant.QUESTION_DOES_NOT_BELONG_TO_QUIZ);\n        }\n\n        // Prepare QuizAnswer entity\n        QuizAnswer quizAnswer = new QuizAnswer();\n        quizAnswer.setQuestionId(questionId);\n\n        if (QuestionType.MULTIPLE_CHOICE.name().equals(question.getType()) && !CollectionUtils.isEmpty(question.getOptions())) {\n            List<QuestionOption> options = question.getOptions().stream()\n                    .filter(option -> option.getId() != null && request.getSelectedOptions().contains(option.getId().toString()))\n                    .collect(Collectors.toList());\n            quizAnswer.setSelectedAnswers(options);\n        }\n        quizAnswer.setFillInBlanksAnswers(request.getFillInBlanksAnswers());\n        quizAnswer.setAnswerText(request.getAnswerText());\n        quizAnswer.setTimeTaken(request.getTimeTaken());\n        quizAnswer.setAudioUrl(request.getAudioUrl());\n\n        boolean isCorrect = false;\n        Integer scoreAchieved = 0;\n\n        // Determine if the answer is correct based on question type\n        switch (question.getType().toLowerCase()) {\n            case \"multiple_choice\":\n                List<String> userSelectedValues = request.getSelectedOptions() != null ?\n                        request.getSelectedOptions().stream()\n                                .filter(Objects::nonNull)\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                List<String> correctOptionValues = question.getCorrectAnswer() != null ?\n                        question.getOptions().stream().filter(QuestionOption::getIsCorrect).map(i -> i.getId().toString()).sorted().toList() : new ArrayList<>();\n                userSelectedValues.sort(String::compareTo);\n\n                isCorrect = userSelectedValues.equals(correctOptionValues);\n                break;\n            case \"true_false\":\n                isCorrect = (request.getUserAnswerTrueFalse() != null &&\n                        request.getUserAnswerTrueFalse().equals(question.getTrueFalseAnswer()));\n                break;\n            case \"fill_in_the_blank\":\n                List<String> userFillInBlanks = request.getFillInBlanksAnswers() != null ?\n                        request.getFillInBlanksAnswers().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                List<String> correctBlanks = question.getCorrectBlanks() != null ?\n                        question.getCorrectBlanks().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                Collections.sort(userFillInBlanks);\n                Collections.sort(correctBlanks);\n\n                isCorrect = userFillInBlanks.equals(correctBlanks);\n                break;\n            case \"short_answer\":\n                isCorrect = (request.getAnswerText() != null &&\n                        question.getCorrectAnswer() != null &&\n                        !question.getCorrectAnswer().isEmpty() &&\n                        question.getCorrectAnswer().getFirst().equalsIgnoreCase(request.getAnswerText().trim()));\n                break;\n            case \"pronunciation\":\n                if (request.getAudioUrl() == null || request.getAudioUrl().isEmpty()) {\n                    break;\n                }\n                File audioFile = resourceService.downloadResourceFromUrl(request.getAudioUrl());\n                if (audioFile == null || !audioFile.exists()) {\n                    break;\n                }\n                String base64File = \"data:audio/ogg;;base64,\" + FileUtils.convertToBase64(audioFile);\n                if (base64File == null) {\n                    break;\n                }\n                try {\n                    PronunciationAccuracyResponseDto pronunAccuracy = pronunciationService.getAccuracy(\n                            PronunciationAccuracyRequestDto.builder()\n                                    .base64Audio(base64File)\n                                    .text(question.getPronunciationText())\n                                    .build()\n                    );\n                    isCorrect = pronunAccuracy.getPronunciationAccuracy() >= question.getAcceptRate();\n                    quizAnswer.setAnswerText(JsonUtils.toJsonString(pronunAccuracy));\n                } catch (Exception e) {\n                    log.error(\"Error while checking pronunciation accuracy: {}\", e.getMessage());\n                }\n                break;\n\n            default:\n                System.err.println(\"Unknown question type: \" + question.getType());\n        }\n\n        if (isCorrect) {\n            scoreAchieved = question.getPoints() != null ? question.getPoints() : 0;\n        }\n\n        quizAnswer.setCorrect(isCorrect);\n        quizAnswer.setScoreAchieved(scoreAchieved);\n\n        List<QuizAnswer> currentAnswers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n\n        for (int i = 0; i < currentAnswers.size(); i++) {\n            if (currentAnswers.get(i).getQuestionId().equals(questionId)) {\n                QuizAnswer oldAnswer = currentAnswers.get(i);\n                quizAttempt.setScore(quizAttempt.getScore().subtract(BigDecimal.valueOf(oldAnswer.getScoreAchieved())));\n                if (oldAnswer.isCorrect()) {\n                    quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() - 1);\n                }\n                quizAnswerRepository.delete(oldAnswer);\n                break;\n            }\n        }\n\n        quizAnswer.setQuizAttemptId(UUID.fromString(attemptId));\n        // check if question submitted before\n        quizAnswerRepository.save(quizAnswer);\n\n        quizAttempt.setScore(quizAttempt.getScore().add(BigDecimal.valueOf(scoreAchieved)));\n        if (isCorrect) {\n            quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() + 1);\n        }\n\n        // update total score\n        quizAttemptRepository.save(quizAttempt);\n\n        return new BaseCreateUpdateResponse(quizAnswer.getId().toString());\n    }\n\n    @Override\n    public List<Quiz> getMyQuizAttempts(String userId) {\n        List<QuizAttempt> attempts = quizAttemptRepository.findByUserId(UUID.fromString(userId));\n        if (CollectionUtils.isEmpty(attempts)) {\n            return Collections.emptyList();\n        }\n\n        Set<String> quizId = attempts.stream()\n                .map(QuizAttempt::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizId);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n\n        getQuizAuthor(quizzes);\n\n        Map<UUID, List<QuizAttempt>> attemptMap = attempts.stream()\n                .collect(Collectors.groupingBy(QuizAttempt::getQuizId));\n        for (Quiz quiz : quizzes) {\n            quiz.setQuizAttempts(new HashSet<>(attemptMap.get(quiz.getId())));\n        }\n\n        return quizzes;\n    }\n\n    @Override\n    public QuizAttempt getAttempt(String attemptId, UUID userId) {\n        // TODO: check permission\n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        Quiz quiz = this.getById(attempt.getQuizId().toString());\n        getQuizAuthor(Collections.singletonList(quiz));\n        attempt.setQuiz(quiz);\n        List<QuizAnswer> answers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n        attempt.setAnswers(answers);\n\n        return attempt;\n    }\n\n    @Override\n    public void submitQuizComplete(String attemptId, UUID id) {\n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        if (!id.equals(attempt.getUserId())) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_BELONG_TO_USER);\n        }\n\n        if (attempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n        attempt.setCompletedAt(LocalDateTime.now());\n        quizAttemptRepository.save(attempt);\n        log.info(\"saved quiz attempt with id: {}\", attemptId);\n    }\n\n    @Override\n    public Quiz getQuizStatsById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        getQuizAuthor(Collections.singletonList(quiz));\n        List<Question> questions = questionRepository.findByQuizId(id);\n        quiz.setQuestions(new HashSet<>(questions));\n        List<QuizAttempt> attempts = quizAttemptRepository.findByQuizId(quiz.getId().toString());\n\n        attempts.forEach(attempt -> {\n            userRepository.getUserById(attempt.getUserId().toString()).ifPresent(attempt::setUser);\n        });\n\n        quiz.setQuizAttempts(new HashSet<>(attempts));\n        List<User> savedUsers = savedQuizRepository.findAllByQuizId(id)\n                .stream()\n                .map(savedQuiz -> userRepository.getUserById(savedQuiz.getUserId().toString()).orElse(null))\n                .filter(Objects::nonNull)\n                .toList();\n        quiz.setSavedByUsers(new HashSet<>(savedUsers));\n\n        return quiz;\n    }\n\n    @Override\n    public void saveQuiz(String quizId, UUID userId) {\n        savedQuizRepository.saveQuiz(quizId, userId.toString());\n    }\n\n    @Override\n    public List<Quiz> getSavedQuizzes(UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        if (CollectionUtils.isEmpty(savedQuizzes)) {\n            return Collections.emptyList();\n        }\n\n        Set<String> quizIds = savedQuizzes.stream()\n                .map(UserSavedQuiz::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n        if (CollectionUtils.isEmpty(quizIds)) {\n            return Collections.emptyList();\n        }\n\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizIds);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n\n        getQuizAuthor(quizzes);\n\n        return quizzes;\n    }\n\n    @Override\n    public void unsaveQuiz(String quizId, UUID userId) {\n        UserSavedQuiz savedQuiz = savedQuizRepository.findAllByQuizId(quizId)\n                .stream()\n                .filter(q -> q.getUserId().equals(userId))\n                .findFirst()\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_SAVED));\n\n        savedQuiz.setSavedAt(LocalDateTime.now());\n        savedQuiz.setDeletedAt(null);\n        savedQuizRepository.update(savedQuiz);\n    }\n\n    @Override\n    public List<UserSavedQuiz> getUserSavedQuiz(String quizId, UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        savedQuizzes.forEach(savedQuiz -> {\n            userRepository.getUserById(savedQuiz.getUserId().toString()).ifPresent(savedQuiz::setUser);\n        });\n        return savedQuizzes;\n    }\n\n    private void getQuizAuthor(List<Quiz> quizzes) {\n        quizzes.forEach(q -> {\n            if (q.getAuthorId() != null) {\n                q.setAuthor(userRepository.getUserById(q.getAuthorId().toString()).orElse(null));\n            }\n        });\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "createQuiz",
      "chunk_type": "service",
      "calls": [
        "unknown.createQuizDtoToQuiz",
        "unknown.getId",
        "unknown.save",
        "unknown.setAuthorId",
        "unknown.toString"
      ],
      "called_by": [],
      "line_start": 81,
      "line_end": 87,
      "content": "@Override\n    public BaseCreateUpdateResponse createQuiz(CreateQuizDto request, UUID authorId) {\n        Quiz q = quizMapper.createQuizDtoToQuiz(request);\n        q.setAuthorId(authorId);\n        quizRepository.save(q);\n        return new BaseCreateUpdateResponse(q.getId().toString());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "updateQuiz",
      "chunk_type": "service",
      "calls": [
        "CollectionUtils.isEmpty",
        "Collectors.toList",
        "Collectors.toMap",
        "Collectors.toSet",
        "CreateQuizDto.getId",
        "CreateQuizDto.getIsPublic",
        "CreateQuizDto.getQuestions",
        "LocalDateTime.now",
        "UUID.fromString",
        "UUID.randomUUID",
        "unknown.add",
        "unknown.collect",
        "unknown.contains",
        "unknown.countByQuizId",
        "unknown.deleteAll",
        "unknown.filter",
        "unknown.findById",
        "unknown.findByQuizId",
        "unknown.get",
        "unknown.getId",
        "unknown.getOptions",
        "unknown.isEmpty",
        "unknown.map",
        "unknown.orElseThrow",
        "unknown.questionDtoToQuestion",
        "unknown.save",
        "unknown.saveAll",
        "unknown.setCreatedAt",
        "unknown.setId",
        "unknown.setQuestionCount",
        "unknown.setQuizId",
        "unknown.setStatus",
        "unknown.setUpdatedAt",
        "unknown.stream",
        "unknown.toString",
        "unknown.updateQuestionFromDto",
        "unknown.updateQuizFromDto"
      ],
      "called_by": [],
      "line_start": 89,
      "line_end": 163,
      "content": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public BaseCreateUpdateResponse updateQuiz(CreateQuizDto request) {\n        if (request.getId() == null) {\n            throw new IllegalArgumentException(\"Quiz ID must be provided for update operation.\");\n        }\n        UUID quizId = UUID.fromString(request.getId());\n        Quiz existingQuiz = quizRepository.findById(request.getId())\n                .orElseThrow(() -> new EntityNotFoundException(\"Quiz with ID \" + request.getId() + \" not found.\"));\n\n        quizMapper.updateQuizFromDto(request, existingQuiz);\n        existingQuiz.setUpdatedAt(LocalDateTime.now());\n        if (request.getIsPublic()) {\n            existingQuiz.setStatus(QuizStatus.PUBLIC);\n        } else {\n            existingQuiz.setStatus(QuizStatus.DRAFT);\n        }\n\n        List<Question> existingQuestions = questionRepository.findByQuizId(request.getId());\n        Map<UUID, Question> existingQuestionMap = existingQuestions.stream()\n                .collect(Collectors.toMap(Question::getId, q -> q));\n\n        List<Question> questionsToSaveOrUpdate = new ArrayList<>();\n        Set<UUID> questionIdsInDto = request.getQuestions().stream()\n                .filter(qDto -> qDto.getId() != null)\n                .map(qDto -> UUID.fromString(qDto.getId()))\n                .collect(Collectors.toSet());\n\n        for (QuestionDto qDto : request.getQuestions()) {\n            if (qDto.getId() == null) {\n                Question newQuestion = questionMapper.questionDtoToQuestion(qDto);\n                newQuestion.setQuizId(quizId);\n                newQuestion.setCreatedAt(LocalDateTime.now());\n                newQuestion.setUpdatedAt(LocalDateTime.now());\n                if (!CollectionUtils.isEmpty(newQuestion.getOptions())) {\n                    for (QuestionOption option : newQuestion.getOptions()) {\n                        option.setId(UUID.randomUUID());\n                    }\n                }\n                questionsToSaveOrUpdate.add(newQuestion);\n            } else {\n                UUID qId = UUID.fromString(qDto.getId());\n                Question questionToUpdate = existingQuestionMap.get(qId);\n                if (questionToUpdate != null) {\n                    questionMapper.updateQuestionFromDto(qDto, questionToUpdate);\n                    questionToUpdate.setUpdatedAt(LocalDateTime.now());\n                    // Ensure options are updated correctly\n                    if (!CollectionUtils.isEmpty(questionToUpdate.getOptions())) {\n                        for (QuestionOption option : questionToUpdate.getOptions()) {\n                            if (option.getId() == null) {\n                                option.setId(UUID.randomUUID());\n                            }\n                        }\n                    }\n                    questionsToSaveOrUpdate.add(questionToUpdate);\n                }\n            }\n        }\n\n        List<Question> questionsToDelete = existingQuestions.stream()\n                .filter(eq -> !questionIdsInDto.contains(eq.getId()))\n                .collect(Collectors.toList());\n\n        if (!questionsToDelete.isEmpty()) {\n            questionRepository.deleteAll(questionsToDelete);\n        }\n        if (!questionsToSaveOrUpdate.isEmpty()) {\n            questionRepository.saveAll(questionsToSaveOrUpdate);\n        }\n\n        existingQuiz.setQuestionCount(questionRepository.countByQuizId(quizId.toString()));\n\n        quizRepository.save(existingQuiz);\n        return new BaseCreateUpdateResponse(existingQuiz.getId().toString());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "getAllPublicQuizzes",
      "chunk_type": "service",
      "calls": [
        "QuizServiceImpl.getQuizAuthor",
        "unknown.findAllPublic"
      ],
      "called_by": [],
      "line_start": 165,
      "line_end": 170,
      "content": "@Override\n    public List<Quiz> getAllPublicQuizzes() {\n        List<Quiz> quizzes = quizRepository.findAllPublic();\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "getMyQuizzes",
      "chunk_type": "service",
      "calls": [
        "QuizServiceImpl.getQuizAuthor",
        "unknown.findByUserId"
      ],
      "called_by": [],
      "line_start": 172,
      "line_end": 177,
      "content": "@Override\n    public List<Quiz> getMyQuizzes(UUID id) {\n        List<Quiz> quizzes = quizRepository.findByUserId(id);\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "getById",
      "chunk_type": "service",
      "calls": [
        "Collections.singletonList",
        "QuizServiceImpl.getQuizAuthor",
        "unknown.findById",
        "unknown.findByQuizId",
        "unknown.orElseThrow",
        "unknown.setQuestions"
      ],
      "called_by": [
        "QuizServiceImpl.getAttempt"
      ],
      "line_start": 179,
      "line_end": 187,
      "content": "@Override\n    public Quiz getById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        Set<Question> questions = new HashSet<>(questionRepository.findByQuizId(id));\n        quiz.setQuestions(questions);\n        getQuizAuthor(Collections.singletonList(quiz));\n        return quiz;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "deleteQuiz",
      "chunk_type": "service",
      "calls": [
        "LocalDateTime.now",
        "unknown.findById",
        "unknown.orElseThrow",
        "unknown.save",
        "unknown.setDeletedAt"
      ],
      "called_by": [],
      "line_start": 189,
      "line_end": 195,
      "content": "@Override\n    public void deleteQuiz(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        quiz.setDeletedAt(LocalDateTime.now());\n        quizRepository.save(quiz);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "startQuiz",
      "chunk_type": "service",
      "calls": [
        "UUID.fromString",
        "unknown.findById",
        "unknown.getId",
        "unknown.orElseThrow",
        "unknown.save",
        "unknown.setCompletedAt",
        "unknown.setCorrectAnswers",
        "unknown.setPassed",
        "unknown.setQuizId",
        "unknown.setScore",
        "unknown.setTimeSpent",
        "unknown.setUserId",
        "unknown.toString"
      ],
      "called_by": [],
      "line_start": 197,
      "line_end": 214,
      "content": "@Override\n    @Transactional\n    public BaseCreateUpdateResponse startQuiz(String quizId, UUID userId) {\n        quizRepository.findById(quizId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n\n        QuizAttempt quizAttempt = new QuizAttempt();\n        quizAttempt.setQuizId(UUID.fromString(quizId));\n        quizAttempt.setUserId(userId);\n        quizAttempt.setScore(BigDecimal.ZERO);\n        quizAttempt.setCorrectAnswers(0);\n        quizAttempt.setTimeSpent(0L);\n        quizAttempt.setCompletedAt(null);\n        quizAttempt.setPassed(false);\n\n        QuizAttempt savedAttempt = quizAttemptRepository.save(quizAttempt);\n        return new BaseCreateUpdateResponse(savedAttempt.getId().toString());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "submitQuizQuestion",
      "chunk_type": "service",
      "calls": [
        "BigDecimal.valueOf",
        "CollectionUtils.isEmpty",
        "Collections.sort",
        "Collectors.toList",
        "Duration.between",
        "Duration.between(start, end).toMinutes",
        "FileUtils.convertToBase64",
        "JsonUtils.toJsonString",
        "LocalDateTime.now",
        "Objects.equals",
        "PronunciationAccuracyRequestDto.builder",
        "PronunciationAccuracyRequestDto.builder()\n                                    .base64Audio(base64File)\n                                    .text(question.getPronunciationText()).build",
        "PronunciationAccuracyRequestDto.builder()\n                                    .base64Audio(base64File).text",
        "PronunciationAccuracyRequestDto.builder().base64Audio",
        "QuestionType.MULTIPLE_CHOICE.name",
        "QuestionType.MULTIPLE_CHOICE.name().equals",
        "SubmitAnswerRequest.getAnswerText",
        "SubmitAnswerRequest.getAudioUrl",
        "SubmitAnswerRequest.getFillInBlanksAnswers",
        "SubmitAnswerRequest.getQuestionId",
        "SubmitAnswerRequest.getSelectedOptions",
        "SubmitAnswerRequest.getTimeTaken",
        "SubmitAnswerRequest.getUserAnswerTrueFalse",
        "System.err.println",
        "UUID.fromString",
        "unknown.add",
        "unknown.collect",
        "unknown.contains",
        "unknown.delete",
        "unknown.downloadResourceFromUrl",
        "unknown.equals",
        "unknown.equalsIgnoreCase",
        "unknown.error",
        "unknown.exists",
        "unknown.filter",
        "unknown.findById",
        "unknown.findByQuizAttemptId",
        "unknown.get",
        "unknown.getAcceptRate",
        "unknown.getAccuracy",
        "unknown.getCompletedAt",
        "unknown.getCorrectAnswer",
        "unknown.getCorrectAnswers",
        "unknown.getCorrectBlanks",
        "unknown.getCreatedAt",
        "unknown.getFirst",
        "unknown.getId",
        "unknown.getMessage",
        "unknown.getOptions",
        "unknown.getPoints",
        "unknown.getPronunciationAccuracy",
        "unknown.getPronunciationText",
        "unknown.getQuestionId",
        "unknown.getQuizId",
        "unknown.getScore",
        "unknown.getScoreAchieved",
        "unknown.getTimeLimit",
        "unknown.getTrueFalseAnswer",
        "unknown.getType",
        "unknown.isCorrect",
        "unknown.isEmpty",
        "unknown.map",
        "unknown.orElseThrow",
        "unknown.plusMinutes",
        "unknown.save",
        "unknown.setAnswerText",
        "unknown.setAudioUrl",
        "unknown.setCompletedAt",
        "unknown.setCorrect",
        "unknown.setCorrectAnswers",
        "unknown.setFillInBlanksAnswers",
        "unknown.setQuestionId",
        "unknown.setQuizAttemptId",
        "unknown.setScore",
        "unknown.setScoreAchieved",
        "unknown.setSelectedAnswers",
        "unknown.setTimeSpent",
        "unknown.setTimeTaken",
        "unknown.size",
        "unknown.sort",
        "unknown.sorted",
        "unknown.stream",
        "unknown.subtract",
        "unknown.toList",
        "unknown.toLowerCase",
        "unknown.toString",
        "unknown.trim"
      ],
      "called_by": [],
      "line_start": 216,
      "line_end": 375,
      "content": "@Override\n    @Transactional\n    public BaseCreateUpdateResponse submitQuizQuestion(String attemptId, SubmitAnswerRequest request, UUID id) {\n        UUID questionId = UUID.fromString(request.getQuestionId());\n\n        QuizAttempt quizAttempt = quizAttemptRepository.findById(attemptId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n\n        // Ensure the quiz attempt is not already completed\n        if (quizAttempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n\n        Quiz quiz = quizRepository.findById(quizAttempt.getQuizId().toString()).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n\n        // calculate if time is exceeded by field created_at and quiz.getTimeLimit()\n        if (quiz.getTimeLimit() != null && quizAttempt.getCreatedAt() != null) {\n            LocalDateTime start = quizAttempt.getCreatedAt();\n            LocalDateTime end = LocalDateTime.now();\n            long timeSpent = Duration.between(start, end).toMinutes();\n            if (timeSpent > quiz.getTimeLimit()) {\n                quizAttempt.setTimeSpent(timeSpent);\n                quizAttempt.setCompletedAt(quizAttempt.getCreatedAt().plusMinutes(timeSpent));\n                quizAttemptRepository.save(quizAttempt);\n                throw new BusinessException(ErrorConstant.QUIZ_TIME_LIMIT_EXCEEDED);\n            }\n        }\n\n        Question question = questionRepository.findById(request.getQuestionId())\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUESTION_NOT_FOUND));\n\n        if (!Objects.equals(question.getQuizId(), quizAttempt.getQuizId())) {\n            throw new BusinessException(ErrorConstant.QUESTION_DOES_NOT_BELONG_TO_QUIZ);\n        }\n\n        // Prepare QuizAnswer entity\n        QuizAnswer quizAnswer = new QuizAnswer();\n        quizAnswer.setQuestionId(questionId);\n\n        if (QuestionType.MULTIPLE_CHOICE.name().equals(question.getType()) && !CollectionUtils.isEmpty(question.getOptions())) {\n            List<QuestionOption> options = question.getOptions().stream()\n                    .filter(option -> option.getId() != null && request.getSelectedOptions().contains(option.getId().toString()))\n                    .collect(Collectors.toList());\n            quizAnswer.setSelectedAnswers(options);\n        }\n        quizAnswer.setFillInBlanksAnswers(request.getFillInBlanksAnswers());\n        quizAnswer.setAnswerText(request.getAnswerText());\n        quizAnswer.setTimeTaken(request.getTimeTaken());\n        quizAnswer.setAudioUrl(request.getAudioUrl());\n\n        boolean isCorrect = false;\n        Integer scoreAchieved = 0;\n\n        // Determine if the answer is correct based on question type\n        switch (question.getType().toLowerCase()) {\n            case \"multiple_choice\":\n                List<String> userSelectedValues = request.getSelectedOptions() != null ?\n                        request.getSelectedOptions().stream()\n                                .filter(Objects::nonNull)\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                List<String> correctOptionValues = question.getCorrectAnswer() != null ?\n                        question.getOptions().stream().filter(QuestionOption::getIsCorrect).map(i -> i.getId().toString()).sorted().toList() : new ArrayList<>();\n                userSelectedValues.sort(String::compareTo);\n\n                isCorrect = userSelectedValues.equals(correctOptionValues);\n                break;\n            case \"true_false\":\n                isCorrect = (request.getUserAnswerTrueFalse() != null &&\n                        request.getUserAnswerTrueFalse().equals(question.getTrueFalseAnswer()));\n                break;\n            case \"fill_in_the_blank\":\n                List<String> userFillInBlanks = request.getFillInBlanksAnswers() != null ?\n                        request.getFillInBlanksAnswers().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                List<String> correctBlanks = question.getCorrectBlanks() != null ?\n                        question.getCorrectBlanks().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                Collections.sort(userFillInBlanks);\n                Collections.sort(correctBlanks);\n\n                isCorrect = userFillInBlanks.equals(correctBlanks);\n                break;\n            case \"short_answer\":\n                isCorrect = (request.getAnswerText() != null &&\n                        question.getCorrectAnswer() != null &&\n                        !question.getCorrectAnswer().isEmpty() &&\n                        question.getCorrectAnswer().getFirst().equalsIgnoreCase(request.getAnswerText().trim()));\n                break;\n            case \"pronunciation\":\n                if (request.getAudioUrl() == null || request.getAudioUrl().isEmpty()) {\n                    break;\n                }\n                File audioFile = resourceService.downloadResourceFromUrl(request.getAudioUrl());\n                if (audioFile == null || !audioFile.exists()) {\n                    break;\n                }\n                String base64File = \"data:audio/ogg;;base64,\" + FileUtils.convertToBase64(audioFile);\n                if (base64File == null) {\n                    break;\n                }\n                try {\n                    PronunciationAccuracyResponseDto pronunAccuracy = pronunciationService.getAccuracy(\n                            PronunciationAccuracyRequestDto.builder()\n                                    .base64Audio(base64File)\n                                    .text(question.getPronunciationText())\n                                    .build()\n                    );\n                    isCorrect = pronunAccuracy.getPronunciationAccuracy() >= question.getAcceptRate();\n                    quizAnswer.setAnswerText(JsonUtils.toJsonString(pronunAccuracy));\n                } catch (Exception e) {\n                    log.error(\"Error while checking pronunciation accuracy: {}\", e.getMessage());\n                }\n                break;\n\n            default:\n                System.err.println(\"Unknown question type: \" + question.getType());\n        }\n\n        if (isCorrect) {\n            scoreAchieved = question.getPoints() != null ? question.getPoints() : 0;\n        }\n\n        quizAnswer.setCorrect(isCorrect);\n        quizAnswer.setScoreAchieved(scoreAchieved);\n\n        List<QuizAnswer> currentAnswers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n\n        for (int i = 0; i < currentAnswers.size(); i++) {\n            if (currentAnswers.get(i).getQuestionId().equals(questionId)) {\n                QuizAnswer oldAnswer = currentAnswers.get(i);\n                quizAttempt.setScore(quizAttempt.getScore().subtract(BigDecimal.valueOf(oldAnswer.getScoreAchieved())));\n                if (oldAnswer.isCorrect()) {\n                    quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() - 1);\n                }\n                quizAnswerRepository.delete(oldAnswer);\n                break;\n            }\n        }\n\n        quizAnswer.setQuizAttemptId(UUID.fromString(attemptId));\n        // check if question submitted before\n        quizAnswerRepository.save(quizAnswer);\n\n        quizAttempt.setScore(quizAttempt.getScore().add(BigDecimal.valueOf(scoreAchieved)));\n        if (isCorrect) {\n            quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() + 1);\n        }\n\n        // update total score\n        quizAttemptRepository.save(quizAttempt);\n\n        return new BaseCreateUpdateResponse(quizAnswer.getId().toString());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "getMyQuizAttempts",
      "chunk_type": "service",
      "calls": [
        "CollectionUtils.isEmpty",
        "Collections.emptyList",
        "Collectors.groupingBy",
        "Collectors.toSet",
        "QuizServiceImpl.getQuizAuthor",
        "UUID.fromString",
        "unknown.collect",
        "unknown.findByIdIn",
        "unknown.findByUserId",
        "unknown.get",
        "unknown.getId",
        "unknown.map",
        "unknown.setQuizAttempts",
        "unknown.stream"
      ],
      "called_by": [],
      "line_start": 377,
      "line_end": 403,
      "content": "@Override\n    public List<Quiz> getMyQuizAttempts(String userId) {\n        List<QuizAttempt> attempts = quizAttemptRepository.findByUserId(UUID.fromString(userId));\n        if (CollectionUtils.isEmpty(attempts)) {\n            return Collections.emptyList();\n        }\n\n        Set<String> quizId = attempts.stream()\n                .map(QuizAttempt::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizId);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n\n        getQuizAuthor(quizzes);\n\n        Map<UUID, List<QuizAttempt>> attemptMap = attempts.stream()\n                .collect(Collectors.groupingBy(QuizAttempt::getQuizId));\n        for (Quiz quiz : quizzes) {\n            quiz.setQuizAttempts(new HashSet<>(attemptMap.get(quiz.getId())));\n        }\n\n        return quizzes;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "getAttempt",
      "chunk_type": "service",
      "calls": [
        "Collections.singletonList",
        "QuizServiceImpl.getById",
        "QuizServiceImpl.getQuizAuthor",
        "unknown.findById",
        "unknown.findByQuizAttemptId",
        "unknown.getQuizId",
        "unknown.orElseThrow",
        "unknown.setAnswers",
        "unknown.setQuiz",
        "unknown.toString"
      ],
      "called_by": [],
      "line_start": 405,
      "line_end": 416,
      "content": "@Override\n    public QuizAttempt getAttempt(String attemptId, UUID userId) {\n        // TODO: check permission\n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        Quiz quiz = this.getById(attempt.getQuizId().toString());\n        getQuizAuthor(Collections.singletonList(quiz));\n        attempt.setQuiz(quiz);\n        List<QuizAnswer> answers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n        attempt.setAnswers(answers);\n\n        return attempt;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "submitQuizComplete",
      "chunk_type": "service",
      "calls": [
        "LocalDateTime.now",
        "UUID.equals",
        "unknown.findById",
        "unknown.getCompletedAt",
        "unknown.getUserId",
        "unknown.info",
        "unknown.orElseThrow",
        "unknown.save",
        "unknown.setCompletedAt"
      ],
      "called_by": [],
      "line_start": 418,
      "line_end": 431,
      "content": "@Override\n    public void submitQuizComplete(String attemptId, UUID id) {\n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        if (!id.equals(attempt.getUserId())) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_BELONG_TO_USER);\n        }\n\n        if (attempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n        attempt.setCompletedAt(LocalDateTime.now());\n        quizAttemptRepository.save(attempt);\n        log.info(\"saved quiz attempt with id: {}\", attemptId);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "getQuizStatsById",
      "chunk_type": "service",
      "calls": [
        "Collections.singletonList",
        "QuizServiceImpl.getQuizAuthor",
        "unknown.filter",
        "unknown.findAllByQuizId",
        "unknown.findById",
        "unknown.findByQuizId",
        "unknown.forEach",
        "unknown.getId",
        "unknown.getUserById",
        "unknown.getUserId",
        "unknown.ifPresent",
        "unknown.map",
        "unknown.orElse",
        "unknown.orElseThrow",
        "unknown.setQuestions",
        "unknown.setQuizAttempts",
        "unknown.setSavedByUsers",
        "unknown.stream",
        "unknown.toList",
        "unknown.toString"
      ],
      "called_by": [],
      "line_start": 433,
      "line_end": 455,
      "content": "@Override\n    public Quiz getQuizStatsById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        getQuizAuthor(Collections.singletonList(quiz));\n        List<Question> questions = questionRepository.findByQuizId(id);\n        quiz.setQuestions(new HashSet<>(questions));\n        List<QuizAttempt> attempts = quizAttemptRepository.findByQuizId(quiz.getId().toString());\n\n        attempts.forEach(attempt -> {\n            userRepository.getUserById(attempt.getUserId().toString()).ifPresent(attempt::setUser);\n        });\n\n        quiz.setQuizAttempts(new HashSet<>(attempts));\n        List<User> savedUsers = savedQuizRepository.findAllByQuizId(id)\n                .stream()\n                .map(savedQuiz -> userRepository.getUserById(savedQuiz.getUserId().toString()).orElse(null))\n                .filter(Objects::nonNull)\n                .toList();\n        quiz.setSavedByUsers(new HashSet<>(savedUsers));\n\n        return quiz;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "saveQuiz",
      "chunk_type": "service",
      "calls": [
        "UUID.toString",
        "unknown.saveQuiz"
      ],
      "called_by": [],
      "line_start": 457,
      "line_end": 460,
      "content": "@Override\n    public void saveQuiz(String quizId, UUID userId) {\n        savedQuizRepository.saveQuiz(quizId, userId.toString());\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "getSavedQuizzes",
      "chunk_type": "service",
      "calls": [
        "CollectionUtils.isEmpty",
        "Collections.emptyList",
        "Collectors.toSet",
        "QuizServiceImpl.getQuizAuthor",
        "UUID.toString",
        "unknown.collect",
        "unknown.findAllByUserId",
        "unknown.findByIdIn",
        "unknown.map",
        "unknown.stream"
      ],
      "called_by": [],
      "line_start": 462,
      "line_end": 485,
      "content": "@Override\n    public List<Quiz> getSavedQuizzes(UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        if (CollectionUtils.isEmpty(savedQuizzes)) {\n            return Collections.emptyList();\n        }\n\n        Set<String> quizIds = savedQuizzes.stream()\n                .map(UserSavedQuiz::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n        if (CollectionUtils.isEmpty(quizIds)) {\n            return Collections.emptyList();\n        }\n\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizIds);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n\n        getQuizAuthor(quizzes);\n\n        return quizzes;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "unsaveQuiz",
      "chunk_type": "service",
      "calls": [
        "LocalDateTime.now",
        "unknown.equals",
        "unknown.filter",
        "unknown.findAllByQuizId",
        "unknown.findFirst",
        "unknown.getUserId",
        "unknown.orElseThrow",
        "unknown.setDeletedAt",
        "unknown.setSavedAt",
        "unknown.stream",
        "unknown.update"
      ],
      "called_by": [],
      "line_start": 487,
      "line_end": 498,
      "content": "@Override\n    public void unsaveQuiz(String quizId, UUID userId) {\n        UserSavedQuiz savedQuiz = savedQuizRepository.findAllByQuizId(quizId)\n                .stream()\n                .filter(q -> q.getUserId().equals(userId))\n                .findFirst()\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_SAVED));\n\n        savedQuiz.setSavedAt(LocalDateTime.now());\n        savedQuiz.setDeletedAt(null);\n        savedQuizRepository.update(savedQuiz);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "getUserSavedQuiz",
      "chunk_type": "service",
      "calls": [
        "UUID.toString",
        "unknown.findAllByUserId",
        "unknown.forEach",
        "unknown.getUserById",
        "unknown.getUserId",
        "unknown.ifPresent",
        "unknown.toString"
      ],
      "called_by": [],
      "line_start": 500,
      "line_end": 507,
      "content": "@Override\n    public List<UserSavedQuiz> getUserSavedQuiz(String quizId, UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        savedQuizzes.forEach(savedQuiz -> {\n            userRepository.getUserById(savedQuiz.getUserId().toString()).ifPresent(savedQuiz::setUser);\n        });\n        return savedQuizzes;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/QuizServiceImpl.java",
      "class_name": "QuizServiceImpl",
      "method_name": "getQuizAuthor",
      "chunk_type": "service",
      "calls": [
        "List<Quiz>.forEach",
        "unknown.getAuthorId",
        "unknown.getUserById",
        "unknown.orElse",
        "unknown.setAuthor",
        "unknown.toString"
      ],
      "called_by": [
        "QuizServiceImpl.getAllPublicQuizzes",
        "QuizServiceImpl.getMyQuizzes",
        "QuizServiceImpl.getById",
        "QuizServiceImpl.getMyQuizAttempts",
        "QuizServiceImpl.getAttempt",
        "QuizServiceImpl.getQuizStatsById",
        "QuizServiceImpl.getSavedQuizzes"
      ],
      "line_start": 509,
      "line_end": 515,
      "content": "private void getQuizAuthor(List<Quiz> quizzes) {\n        quizzes.forEach(q -> {\n            if (q.getAuthorId() != null) {\n                q.setAuthor(userRepository.getUserById(q.getAuthorId().toString()).orElse(null));\n            }\n        });\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/ResourceServiceImpl.java",
      "class_name": "ResourceServiceImpl",
      "method_name": null,
      "chunk_type": "service",
      "calls": [],
      "called_by": [],
      "line_start": 23,
      "line_end": 103,
      "content": "@Service\n@Slf4j\npublic class ResourceServiceImpl implements ResourceService {\n\n    private final ResourceRepository resourceRepository;\n\n    private final StorageService storageService;\n\n    public ResourceServiceImpl(StorageFactory storageFactory, ResourceRepository resourceRepository) {\n        this.resourceRepository = resourceRepository;\n        this.storageService = storageFactory.getStorageService(Constant.STORAGE_AWS);\n    }\n\n    @Override\n    public Resource uploadResource(MultipartFile file, UUID requestId) {\n\n        String url = storageService.uploadFile(file);\n\n        Resource resource = Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType())\n                .sizeBytes(file.getSize())\n                .cloudId(storageService.getProviderName())\n                .build();\n        resourceRepository.save(resource);\n        return resource;\n    }\n\n    @Override\n    public GetResourceResponse getResource(String id, UUID requestId) {\n        Resource resource = resourceRepository.findById(requestId.toString());\n\n        if (Objects.isNull(resource)) {\n            throw new RuntimeException(\"Resource not found\");\n        }\n\n        try {\n            if (!requestId.equals(resource.getOwnerId())) {\n                throw new RuntimeException(\"You are not allowed to access this resource\");\n            }\n\n            String url = storageService.getFileUrl(resource.getUrl());\n\n            return GetResourceResponse.builder()\n                    .name(resource.getName())\n                    .url(url)\n                    .build();\n\n        } catch (Exception e) {\n            log.info(\"Generate url failed {}\", e.getMessage());\n            throw new RuntimeException(\"Generate url failed\");\n        }\n    }\n\n    @Override\n    public File downloadResourceFromUrl(String urlString) {\n        try {\n            URI uri = URI.create(urlString);\n            URL url = uri.toURL();\n\n            String fileName = Path.of(uri.getPath()).getFileName().toString();\n            File outputFile = File.createTempFile(\"download_\", \"_\" + fileName);\n\n            try (InputStream in = url.openStream();\n                 FileOutputStream out = new FileOutputStream(outputFile)) {\n                byte[] buffer = new byte[8192];\n                int bytesRead;\n                while ((bytesRead = in.read(buffer)) != -1) {\n                    out.write(buffer, 0, bytesRead);\n                }\n            }\n\n            return outputFile;\n\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to download file from URL: \" + urlString, e);\n        }\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/ResourceServiceImpl.java",
      "class_name": "ResourceServiceImpl",
      "method_name": "uploadResource",
      "chunk_type": "service",
      "calls": [
        "MultipartFile.getContentType",
        "MultipartFile.getOriginalFilename",
        "MultipartFile.getSize",
        "Resource.builder",
        "Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType())\n                .sizeBytes(file.getSize())\n                .cloudId(storageService.getProviderName()).build",
        "Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType())\n                .sizeBytes(file.getSize()).cloudId",
        "Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType()).sizeBytes",
        "Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId).extension",
        "Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url).ownerId",
        "Resource.builder()\n                .name(file.getOriginalFilename()).url",
        "Resource.builder().name",
        "unknown.getProviderName",
        "unknown.save",
        "unknown.uploadFile"
      ],
      "called_by": [],
      "line_start": 36,
      "line_end": 51,
      "content": "@Override\n    public Resource uploadResource(MultipartFile file, UUID requestId) {\n\n        String url = storageService.uploadFile(file);\n\n        Resource resource = Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType())\n                .sizeBytes(file.getSize())\n                .cloudId(storageService.getProviderName())\n                .build();\n        resourceRepository.save(resource);\n        return resource;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/ResourceServiceImpl.java",
      "class_name": "ResourceServiceImpl",
      "method_name": "getResource",
      "chunk_type": "service",
      "calls": [
        "GetResourceResponse.builder",
        "GetResourceResponse.builder()\n                    .name(resource.getName())\n                    .url(url).build",
        "GetResourceResponse.builder()\n                    .name(resource.getName()).url",
        "GetResourceResponse.builder().name",
        "Objects.isNull",
        "UUID.equals",
        "UUID.toString",
        "unknown.findById",
        "unknown.getFileUrl",
        "unknown.getMessage",
        "unknown.getName",
        "unknown.getOwnerId",
        "unknown.getUrl",
        "unknown.info"
      ],
      "called_by": [],
      "line_start": 53,
      "line_end": 77,
      "content": "@Override\n    public GetResourceResponse getResource(String id, UUID requestId) {\n        Resource resource = resourceRepository.findById(requestId.toString());\n\n        if (Objects.isNull(resource)) {\n            throw new RuntimeException(\"Resource not found\");\n        }\n\n        try {\n            if (!requestId.equals(resource.getOwnerId())) {\n                throw new RuntimeException(\"You are not allowed to access this resource\");\n            }\n\n            String url = storageService.getFileUrl(resource.getUrl());\n\n            return GetResourceResponse.builder()\n                    .name(resource.getName())\n                    .url(url)\n                    .build();\n\n        } catch (Exception e) {\n            log.info(\"Generate url failed {}\", e.getMessage());\n            throw new RuntimeException(\"Generate url failed\");\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/service/impl/ResourceServiceImpl.java",
      "class_name": "ResourceServiceImpl",
      "method_name": "downloadResourceFromUrl",
      "chunk_type": "service",
      "calls": [
        "File.createTempFile",
        "Path.of",
        "Path.of(uri.getPath()).getFileName",
        "Path.of(uri.getPath()).getFileName().toString",
        "URI.create",
        "unknown.getPath",
        "unknown.openStream",
        "unknown.read",
        "unknown.toURL",
        "unknown.write"
      ],
      "called_by": [],
      "line_start": 79,
      "line_end": 102,
      "content": "@Override\n    public File downloadResourceFromUrl(String urlString) {\n        try {\n            URI uri = URI.create(urlString);\n            URL url = uri.toURL();\n\n            String fileName = Path.of(uri.getPath()).getFileName().toString();\n            File outputFile = File.createTempFile(\"download_\", \"_\" + fileName);\n\n            try (InputStream in = url.openStream();\n                 FileOutputStream out = new FileOutputStream(outputFile)) {\n                byte[] buffer = new byte[8192];\n                int bytesRead;\n                while ((bytesRead = in.read(buffer)) != -1) {\n                    out.write(buffer, 0, bytesRead);\n                }\n            }\n\n            return outputFile;\n\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to download file from URL: \" + urlString, e);\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/pronunciation_svc/PronunciationServiceImpl.java",
      "class_name": "PronunciationServiceImpl",
      "method_name": null,
      "chunk_type": "service",
      "calls": [],
      "called_by": [],
      "line_start": 17,
      "line_end": 55,
      "content": "@Service\npublic class PronunciationServiceImpl implements PronunciationService {\n\n    private final PronunciationFeignClient pronunciationFeignClient;\n\n    private final PronunciationMapper pronunciationMapper;\n\n    public PronunciationServiceImpl(PronunciationFeignClient pronunciationFeignClient, PronunciationMapper pronunciationMapper) {\n        this.pronunciationFeignClient = pronunciationFeignClient;\n        this.pronunciationMapper = pronunciationMapper;\n    }\n\n    @Override\n    public GetPronunciationSampleResponseDto getSample(GetSampleRequestDto request) {\n        GetSampleRequest req = pronunciationMapper.toSampleRequest(request);\n        req.setCategory(request.getLevel().getValue());\n        req.setLanguage(\"en\");\n        GetSampleResponse response = pronunciationFeignClient.getSample(req);\n\n        if (response == null) {\n            throw new BusinessException(ErrorConstant.GET_PRONUNCIATION_SAMPLE_ERROR);\n        }\n\n        return pronunciationMapper.toGetPronunciationSampleResponseDto(response);\n    }\n\n    @Override\n    public PronunciationAccuracyResponseDto getAccuracy(PronunciationAccuracyRequestDto request) {\n        PronunciationAccuracyRequest req = pronunciationMapper.toPronunciationAccuracyRequest(request);\n        req.setLanguage(\"en\");\n        PronunciationAccuracyResponse response = pronunciationFeignClient.getAccuracyFromRecordedAudio(req);\n\n        if (response == null) {\n            throw new BusinessException(ErrorConstant.GET_PRONUNCIATION_ACCURACY_ERROR);\n        }\n\n        return pronunciationMapper.toPronunciationAccuracyResponseDto(response);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/pronunciation_svc/PronunciationServiceImpl.java",
      "class_name": "PronunciationServiceImpl",
      "method_name": "getSample",
      "chunk_type": "service",
      "calls": [
        "GetSampleRequestDto.getLevel",
        "unknown.getSample",
        "unknown.getValue",
        "unknown.setCategory",
        "unknown.setLanguage",
        "unknown.toGetPronunciationSampleResponseDto",
        "unknown.toSampleRequest"
      ],
      "called_by": [],
      "line_start": 29,
      "line_end": 41,
      "content": "@Override\n    public GetPronunciationSampleResponseDto getSample(GetSampleRequestDto request) {\n        GetSampleRequest req = pronunciationMapper.toSampleRequest(request);\n        req.setCategory(request.getLevel().getValue());\n        req.setLanguage(\"en\");\n        GetSampleResponse response = pronunciationFeignClient.getSample(req);\n\n        if (response == null) {\n            throw new BusinessException(ErrorConstant.GET_PRONUNCIATION_SAMPLE_ERROR);\n        }\n\n        return pronunciationMapper.toGetPronunciationSampleResponseDto(response);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/pronunciation_svc/PronunciationServiceImpl.java",
      "class_name": "PronunciationServiceImpl",
      "method_name": "getAccuracy",
      "chunk_type": "service",
      "calls": [
        "unknown.getAccuracyFromRecordedAudio",
        "unknown.setLanguage",
        "unknown.toPronunciationAccuracyRequest",
        "unknown.toPronunciationAccuracyResponseDto"
      ],
      "called_by": [],
      "line_start": 43,
      "line_end": 54,
      "content": "@Override\n    public PronunciationAccuracyResponseDto getAccuracy(PronunciationAccuracyRequestDto request) {\n        PronunciationAccuracyRequest req = pronunciationMapper.toPronunciationAccuracyRequest(request);\n        req.setLanguage(\"en\");\n        PronunciationAccuracyResponse response = pronunciationFeignClient.getAccuracyFromRecordedAudio(req);\n\n        if (response == null) {\n            throw new BusinessException(ErrorConstant.GET_PRONUNCIATION_ACCURACY_ERROR);\n        }\n\n        return pronunciationMapper.toPronunciationAccuracyResponseDto(response);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/pronunciation_svc/request/GetSampleRequest.java",
      "class_name": "GetSampleRequest",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 6,
      "line_end": 16,
      "content": "@Data\npublic class GetSampleRequest {\n\n    private String category;\n\n    private String language;\n\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    private String transcript;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/pronunciation_svc/request/PronunciationAccuracyRequest.java",
      "class_name": "PronunciationAccuracyRequest",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 6,
      "line_end": 16,
      "content": "@Data\npublic class PronunciationAccuracyRequest {\n\n    private String base64Audio;\n\n    private String language;\n\n    @JsonProperty(\"title\")\n    private String text;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/pronunciation_svc/response/GetSampleResponse.java",
      "class_name": "GetSampleResponse",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 8,
      "line_end": 22,
      "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class GetSampleResponse {\n\n    @JsonProperty(\"ipa_transcript\")\n    private String ipaTranscript;\n\n    @JsonProperty(\"real_transcript\")\n    private String realTranscript;\n\n    @JsonProperty(\"transcript_translation\")\n    private String transcriptTranslation;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/pronunciation_svc/response/PronunciationAccuracyResponse.java",
      "class_name": "PronunciationAccuracyResponse",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 7,
      "line_end": 33,
      "content": "@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\n@Data\npublic class PronunciationAccuracyResponse {\n\n    private String startTime;\n\n    private String endTime;\n\n    private String ipaScript;\n\n    private String isLetterCorrectAllWords;\n\n    private String matchedTranscripts;\n\n    private String matchedTranscriptsIpa;\n\n    private String pairAccuracyCategory;\n\n    private Integer pronunciationAccuracy;\n\n    private String realTranscript;\n\n    private String realTranscripts;\n\n    private String realTranscriptsIpa;\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/AwsStorageServiceImpl.java",
      "class_name": "AwsStorageServiceImpl",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 20,
      "line_end": 114,
      "content": "@Component(\"awsStorageService\")\n@Slf4j\npublic class AwsStorageServiceImpl extends StorageService {\n    private final S3Client s3Client;\n\n    @Value(\"${aws.s3.bucket.name}\")\n    private String bucketName;\n\n    @Value(\"${aws.s3.bucket.domain}\")\n    private String domain;\n\n    public AwsStorageServiceImpl(S3Client s3Client) {\n        this.s3Client = s3Client;\n    }\n\n    @Override\n    public String getFileUrl(String fileName) {\n        return String.format(\"%s/%s\", domain, fileName);\n    }\n\n    @Override\n    public String uploadFile(MultipartFile file) {\n        File fileObj = null;\n        try {\n            fileObj = convertMultiPartFileToFile(file);\n            String fileName = Objects.requireNonNull(file.getOriginalFilename()).replace(\" \", \"\") + \"_\" + System.currentTimeMillis() + \".\"\n                    + Objects.requireNonNull(file.getContentType()).split(\"/\")[1];\n\n            PutObjectRequest putObjectRequest = PutObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .contentType(file.getContentType())\n                    .build();\n\n            s3Client.putObject(putObjectRequest, RequestBody.fromFile(fileObj));\n\n            return getFileUrl(fileName);\n        } catch (IOException e) {\n            log.error(\"Error during file processing (conversion or deletion): {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error processing file for S3 upload\", e);\n        }\n        catch (Exception e) {\n            log.error(\"Error while uploading file to S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while uploading file to S3\", e);\n        } finally {\n            if (fileObj != null && fileObj.exists()) {\n                if (!fileObj.delete()) {\n                    log.warn(\"Failed to delete temporary file: {}\", fileObj.getAbsolutePath());\n                }\n            }\n        }\n    }\n\n    @Override\n    public String getProviderName() {\n        return Constant.STORAGE_AWS;\n    }\n\n    @Override\n    public byte[] downloadFile(String fileName) {\n        try {\n            // Build the GetObjectRequest for S3 download\n            GetObjectRequest getObjectRequest = GetObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .build();\n\n            // Get the object content as a ResponseInputStream and read all bytes\n            ResponseInputStream<GetObjectResponse> s3Object = s3Client.getObject(getObjectRequest);\n            return s3Object.readAllBytes();\n        } catch (IOException e) {\n            log.error(\"Error reading downloaded file content: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while reading downloaded file content\", e);\n        } catch (Exception e) {\n            log.error(\"Error while downloading file from S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while downloading file from S3\", e);\n        }\n    }\n\n    @Override\n    public String deleteFile(String fileName) {\n        try {\n            // Build the DeleteObjectRequest for S3 deletion\n            DeleteObjectRequest deleteObjectRequest = DeleteObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .build();\n            s3Client.deleteObject(deleteObjectRequest);\n            return fileName + \" removed ...\";\n        } catch (Exception e) {\n            log.error(\"Error while deleting file from S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while deleting file from S3\", e);\n        }\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/AwsStorageServiceImpl.java",
      "class_name": "AwsStorageServiceImpl",
      "method_name": "getFileUrl",
      "chunk_type": "other",
      "calls": [
        "String.format"
      ],
      "called_by": [
        "AwsStorageServiceImpl.uploadFile"
      ],
      "line_start": 35,
      "line_end": 38,
      "content": "@Override\n    public String getFileUrl(String fileName) {\n        return String.format(\"%s/%s\", domain, fileName);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/AwsStorageServiceImpl.java",
      "class_name": "AwsStorageServiceImpl",
      "method_name": "uploadFile",
      "chunk_type": "other",
      "calls": [
        "AwsStorageServiceImpl.convertMultiPartFileToFile",
        "AwsStorageServiceImpl.getFileUrl",
        "MultipartFile.getContentType",
        "MultipartFile.getOriginalFilename",
        "Objects.requireNonNull",
        "Objects.requireNonNull(file.getContentType()).split",
        "Objects.requireNonNull(file.getOriginalFilename()).replace",
        "PutObjectRequest.builder",
        "PutObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .contentType(file.getContentType()).build",
        "PutObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName).contentType",
        "PutObjectRequest.builder()\n                    .bucket(bucketName).key",
        "PutObjectRequest.builder().bucket",
        "RequestBody.fromFile",
        "System.currentTimeMillis",
        "unknown.delete",
        "unknown.error",
        "unknown.exists",
        "unknown.getAbsolutePath",
        "unknown.getMessage",
        "unknown.putObject",
        "unknown.warn"
      ],
      "called_by": [],
      "line_start": 40,
      "line_end": 71,
      "content": "@Override\n    public String uploadFile(MultipartFile file) {\n        File fileObj = null;\n        try {\n            fileObj = convertMultiPartFileToFile(file);\n            String fileName = Objects.requireNonNull(file.getOriginalFilename()).replace(\" \", \"\") + \"_\" + System.currentTimeMillis() + \".\"\n                    + Objects.requireNonNull(file.getContentType()).split(\"/\")[1];\n\n            PutObjectRequest putObjectRequest = PutObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .contentType(file.getContentType())\n                    .build();\n\n            s3Client.putObject(putObjectRequest, RequestBody.fromFile(fileObj));\n\n            return getFileUrl(fileName);\n        } catch (IOException e) {\n            log.error(\"Error during file processing (conversion or deletion): {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error processing file for S3 upload\", e);\n        }\n        catch (Exception e) {\n            log.error(\"Error while uploading file to S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while uploading file to S3\", e);\n        } finally {\n            if (fileObj != null && fileObj.exists()) {\n                if (!fileObj.delete()) {\n                    log.warn(\"Failed to delete temporary file: {}\", fileObj.getAbsolutePath());\n                }\n            }\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/AwsStorageServiceImpl.java",
      "class_name": "AwsStorageServiceImpl",
      "method_name": "getProviderName",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 73,
      "line_end": 76,
      "content": "@Override\n    public String getProviderName() {\n        return Constant.STORAGE_AWS;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/AwsStorageServiceImpl.java",
      "class_name": "AwsStorageServiceImpl",
      "method_name": "downloadFile",
      "chunk_type": "other",
      "calls": [
        "GetObjectRequest.builder",
        "GetObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName).build",
        "GetObjectRequest.builder()\n                    .bucket(bucketName).key",
        "GetObjectRequest.builder().bucket",
        "unknown.error",
        "unknown.getMessage",
        "unknown.getObject",
        "unknown.readAllBytes"
      ],
      "called_by": [],
      "line_start": 78,
      "line_end": 97,
      "content": "@Override\n    public byte[] downloadFile(String fileName) {\n        try {\n            // Build the GetObjectRequest for S3 download\n            GetObjectRequest getObjectRequest = GetObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .build();\n\n            // Get the object content as a ResponseInputStream and read all bytes\n            ResponseInputStream<GetObjectResponse> s3Object = s3Client.getObject(getObjectRequest);\n            return s3Object.readAllBytes();\n        } catch (IOException e) {\n            log.error(\"Error reading downloaded file content: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while reading downloaded file content\", e);\n        } catch (Exception e) {\n            log.error(\"Error while downloading file from S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while downloading file from S3\", e);\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/AwsStorageServiceImpl.java",
      "class_name": "AwsStorageServiceImpl",
      "method_name": "deleteFile",
      "chunk_type": "other",
      "calls": [
        "DeleteObjectRequest.builder",
        "DeleteObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName).build",
        "DeleteObjectRequest.builder()\n                    .bucket(bucketName).key",
        "DeleteObjectRequest.builder().bucket",
        "unknown.deleteObject",
        "unknown.error",
        "unknown.getMessage"
      ],
      "called_by": [],
      "line_start": 99,
      "line_end": 113,
      "content": "@Override\n    public String deleteFile(String fileName) {\n        try {\n            // Build the DeleteObjectRequest for S3 deletion\n            DeleteObjectRequest deleteObjectRequest = DeleteObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .build();\n            s3Client.deleteObject(deleteObjectRequest);\n            return fileName + \" removed ...\";\n        } catch (Exception e) {\n            log.error(\"Error while deleting file from S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while deleting file from S3\", e);\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/GoogleStorageServiceImpl.java",
      "class_name": "GoogleStorageServiceImpl",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 23,
      "line_end": 141,
      "content": "@Component(\"googleStorageService\")\n@Slf4j\npublic class GoogleStorageServiceImpl extends StorageService {\n\n    @Value(\"${gcp.bucket.name}\")\n    private String bucketName;\n\n    @Value(\"${gcp.project.id}\")\n    private String projectId;\n\n    @Value(\"${gcp.bucket.domain}\")\n    private String domain;\n\n    @Value(\"${gcp.credentials.file}\")\n    private String gcpCredentials;\n\n    // No S3Client in constructor\n    public GoogleStorageServiceImpl() {\n\n    }\n\n    @Override\n    public String getFileUrl(String fileName) {\n        return String.format(\"%s/%s\", domain, fileName);\n    }\n\n    @Override\n    public String uploadFile(MultipartFile file) {\n        File tempFile = null;\n        String uploadedFileName = null;\n        try {\n            // Validate file presence\n            if (file.isEmpty()) {\n                throw new IllegalArgumentException(\"Cannot upload empty file.\");\n            }\n\n            String originalFilename = Objects.requireNonNull(file.getOriginalFilename());\n            String fileExtension = \"\";\n            int dotIndex = originalFilename.lastIndexOf('.');\n            if (dotIndex > 0 && dotIndex < originalFilename.length() - 1) {\n                fileExtension = originalFilename.substring(dotIndex);\n            }\n            // Use UUID for robust unique naming\n            uploadedFileName = UUID.randomUUID().toString() + fileExtension;\n\n            // Convert MultipartFile to a temporary File\n            tempFile = File.createTempFile(\"upload-\", fileExtension);\n            file.transferTo(tempFile);\n\n            InputStream inputStream = new ClassPathResource(gcpCredentials).getInputStream();\n\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).setCredentials(GoogleCredentials.fromStream(inputStream)).build().getService();\n            BlobId blobId = BlobId.of(bucketName, uploadedFileName);\n            String contentType = file.getContentType() != null ? file.getContentType() : \"application/octet-stream\";\n            BlobInfo blobInfo = BlobInfo.newBuilder(blobId)\n                    .setContentType(contentType)\n                    .build();\n\n            storage.createFrom(blobInfo, Files.newInputStream(tempFile.toPath()));\n\n            log.info(\"File {} uploaded to Google Cloud Storage bucket {} as {}\", originalFilename, bucketName, uploadedFileName);\n            return uploadedFileName;\n\n        } catch (IOException e) {\n            log.error(\"Error during file processing or upload to Google Cloud Storage: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error processing file for Google Cloud Storage upload\", e);\n        } catch (Exception e) {\n            log.error(\"An unexpected error occurred while uploading file to Google Cloud Storage: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"An unexpected error occurred during Google Cloud Storage upload\", e);\n        } finally {\n            // Ensure the temporary file is deleted\n            if (tempFile != null && tempFile.exists()) {\n                try {\n                    Files.delete(tempFile.toPath());\n                    log.debug(\"Temporary file deleted: {}\", tempFile.getAbsolutePath());\n                } catch (IOException e) {\n                    log.warn(\"Failed to delete temporary file: {}\", tempFile.getAbsolutePath(), e);\n                }\n            }\n        }\n    }\n\n    @Override\n    public String getProviderName() {\n        return Constant.STORAGE_GCP;\n    }\n\n    @Override\n    public byte[] downloadFile(String fileName) {\n        try {\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\n            BlobId blobId = BlobId.of(bucketName, fileName);\n            return storage.readAllBytes(blobId);\n        } catch (Exception e) {\n            log.error(\"Error while downloading file {} from Google Cloud Storage: {}\", fileName, e.getMessage(), e);\n            throw new RuntimeException(\"Error while downloading file from Google Cloud Storage\", e);\n        }\n    }\n\n    @Override\n    public String deleteFile(String fileName) {\n        try {\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\n            BlobId blobId = BlobId.of(bucketName, fileName);\n            boolean deleted = storage.delete(blobId);\n\n            if (deleted) {\n                log.info(\"File {} deleted from Google Cloud Storage bucket {}\", fileName, bucketName);\n                return fileName + \" removed ...\";\n            } else {\n                log.warn(\"File {} not found in Google Cloud Storage bucket {} for deletion.\", fileName, bucketName);\n                return fileName + \" not found or could not be deleted.\";\n            }\n        } catch (Exception e) {\n            log.error(\"Error while deleting file {} from Google Cloud Storage: {}\", fileName, e.getMessage(), e);\n            throw new RuntimeException(\"Error while deleting file from Google Cloud Storage\", e);\n        }\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/GoogleStorageServiceImpl.java",
      "class_name": "GoogleStorageServiceImpl",
      "method_name": "getFileUrl",
      "chunk_type": "other",
      "calls": [
        "String.format"
      ],
      "called_by": [],
      "line_start": 44,
      "line_end": 47,
      "content": "@Override\n    public String getFileUrl(String fileName) {\n        return String.format(\"%s/%s\", domain, fileName);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/GoogleStorageServiceImpl.java",
      "class_name": "GoogleStorageServiceImpl",
      "method_name": "uploadFile",
      "chunk_type": "other",
      "calls": [
        "BlobId.of",
        "BlobInfo.newBuilder",
        "BlobInfo.newBuilder(blobId)\n                    .setContentType(contentType).build",
        "BlobInfo.newBuilder(blobId).setContentType",
        "File.createTempFile",
        "Files.delete",
        "Files.newInputStream",
        "GoogleCredentials.fromStream",
        "MultipartFile.getContentType",
        "MultipartFile.getOriginalFilename",
        "MultipartFile.isEmpty",
        "MultipartFile.transferTo",
        "Objects.requireNonNull",
        "StorageOptions.newBuilder",
        "StorageOptions.newBuilder().setProjectId",
        "StorageOptions.newBuilder().setProjectId(projectId).setCredentials",
        "StorageOptions.newBuilder().setProjectId(projectId).setCredentials(GoogleCredentials.fromStream(inputStream)).build",
        "StorageOptions.newBuilder().setProjectId(projectId).setCredentials(GoogleCredentials.fromStream(inputStream)).build().getService",
        "UUID.randomUUID",
        "UUID.randomUUID().toString",
        "unknown.createFrom",
        "unknown.debug",
        "unknown.error",
        "unknown.exists",
        "unknown.getAbsolutePath",
        "unknown.getInputStream",
        "unknown.getMessage",
        "unknown.info",
        "unknown.lastIndexOf",
        "unknown.length",
        "unknown.substring",
        "unknown.toPath",
        "unknown.warn"
      ],
      "called_by": [],
      "line_start": 49,
      "line_end": 103,
      "content": "@Override\n    public String uploadFile(MultipartFile file) {\n        File tempFile = null;\n        String uploadedFileName = null;\n        try {\n            // Validate file presence\n            if (file.isEmpty()) {\n                throw new IllegalArgumentException(\"Cannot upload empty file.\");\n            }\n\n            String originalFilename = Objects.requireNonNull(file.getOriginalFilename());\n            String fileExtension = \"\";\n            int dotIndex = originalFilename.lastIndexOf('.');\n            if (dotIndex > 0 && dotIndex < originalFilename.length() - 1) {\n                fileExtension = originalFilename.substring(dotIndex);\n            }\n            // Use UUID for robust unique naming\n            uploadedFileName = UUID.randomUUID().toString() + fileExtension;\n\n            // Convert MultipartFile to a temporary File\n            tempFile = File.createTempFile(\"upload-\", fileExtension);\n            file.transferTo(tempFile);\n\n            InputStream inputStream = new ClassPathResource(gcpCredentials).getInputStream();\n\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).setCredentials(GoogleCredentials.fromStream(inputStream)).build().getService();\n            BlobId blobId = BlobId.of(bucketName, uploadedFileName);\n            String contentType = file.getContentType() != null ? file.getContentType() : \"application/octet-stream\";\n            BlobInfo blobInfo = BlobInfo.newBuilder(blobId)\n                    .setContentType(contentType)\n                    .build();\n\n            storage.createFrom(blobInfo, Files.newInputStream(tempFile.toPath()));\n\n            log.info(\"File {} uploaded to Google Cloud Storage bucket {} as {}\", originalFilename, bucketName, uploadedFileName);\n            return uploadedFileName;\n\n        } catch (IOException e) {\n            log.error(\"Error during file processing or upload to Google Cloud Storage: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error processing file for Google Cloud Storage upload\", e);\n        } catch (Exception e) {\n            log.error(\"An unexpected error occurred while uploading file to Google Cloud Storage: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"An unexpected error occurred during Google Cloud Storage upload\", e);\n        } finally {\n            // Ensure the temporary file is deleted\n            if (tempFile != null && tempFile.exists()) {\n                try {\n                    Files.delete(tempFile.toPath());\n                    log.debug(\"Temporary file deleted: {}\", tempFile.getAbsolutePath());\n                } catch (IOException e) {\n                    log.warn(\"Failed to delete temporary file: {}\", tempFile.getAbsolutePath(), e);\n                }\n            }\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/GoogleStorageServiceImpl.java",
      "class_name": "GoogleStorageServiceImpl",
      "method_name": "getProviderName",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 105,
      "line_end": 108,
      "content": "@Override\n    public String getProviderName() {\n        return Constant.STORAGE_GCP;\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/GoogleStorageServiceImpl.java",
      "class_name": "GoogleStorageServiceImpl",
      "method_name": "downloadFile",
      "chunk_type": "other",
      "calls": [
        "BlobId.of",
        "StorageOptions.newBuilder",
        "StorageOptions.newBuilder().setProjectId",
        "StorageOptions.newBuilder().setProjectId(projectId).build",
        "StorageOptions.newBuilder().setProjectId(projectId).build().getService",
        "unknown.error",
        "unknown.getMessage",
        "unknown.readAllBytes"
      ],
      "called_by": [],
      "line_start": 110,
      "line_end": 120,
      "content": "@Override\n    public byte[] downloadFile(String fileName) {\n        try {\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\n            BlobId blobId = BlobId.of(bucketName, fileName);\n            return storage.readAllBytes(blobId);\n        } catch (Exception e) {\n            log.error(\"Error while downloading file {} from Google Cloud Storage: {}\", fileName, e.getMessage(), e);\n            throw new RuntimeException(\"Error while downloading file from Google Cloud Storage\", e);\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/GoogleStorageServiceImpl.java",
      "class_name": "GoogleStorageServiceImpl",
      "method_name": "deleteFile",
      "chunk_type": "other",
      "calls": [
        "BlobId.of",
        "StorageOptions.newBuilder",
        "StorageOptions.newBuilder().setProjectId",
        "StorageOptions.newBuilder().setProjectId(projectId).build",
        "StorageOptions.newBuilder().setProjectId(projectId).build().getService",
        "unknown.delete",
        "unknown.error",
        "unknown.getMessage",
        "unknown.info",
        "unknown.warn"
      ],
      "called_by": [],
      "line_start": 122,
      "line_end": 140,
      "content": "@Override\n    public String deleteFile(String fileName) {\n        try {\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\n            BlobId blobId = BlobId.of(bucketName, fileName);\n            boolean deleted = storage.delete(blobId);\n\n            if (deleted) {\n                log.info(\"File {} deleted from Google Cloud Storage bucket {}\", fileName, bucketName);\n                return fileName + \" removed ...\";\n            } else {\n                log.warn(\"File {} not found in Google Cloud Storage bucket {} for deletion.\", fileName, bucketName);\n                return fileName + \" not found or could not be deleted.\";\n            }\n        } catch (Exception e) {\n            log.error(\"Error while deleting file {} from Google Cloud Storage: {}\", fileName, e.getMessage(), e);\n            throw new RuntimeException(\"Error while deleting file from Google Cloud Storage\", e);\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/StorageFactory.java",
      "class_name": "StorageFactory",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 7,
      "line_end": 22,
      "content": "@Component\npublic class StorageFactory {\n\n    private final List<StorageService> services;\n\n    public StorageFactory(List<StorageService> services) {\n        this.services = services;\n    }\n\n    public StorageService getStorageService(String providerName) {\n        return services.stream()\n                .filter(service -> service.getProviderName().equalsIgnoreCase(providerName))\n                .findFirst()\n                .orElseThrow(() -> new IllegalArgumentException(\"No storage service found for provider: \" + providerName));\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/StorageFactory.java",
      "class_name": "StorageFactory",
      "method_name": "getStorageService",
      "chunk_type": "other",
      "calls": [
        "unknown.equalsIgnoreCase",
        "unknown.filter",
        "unknown.findFirst",
        "unknown.getProviderName",
        "unknown.orElseThrow",
        "unknown.stream"
      ],
      "called_by": [],
      "line_start": 16,
      "line_end": 21,
      "content": "public StorageService getStorageService(String providerName) {\n        return services.stream()\n                .filter(service -> service.getProviderName().equalsIgnoreCase(providerName))\n                .findFirst()\n                .orElseThrow(() -> new IllegalArgumentException(\"No storage service found for provider: \" + providerName));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/StorageService.java",
      "class_name": "StorageService",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 12,
      "line_end": 42,
      "content": "@Slf4j\npublic abstract class StorageService {\n\n    public abstract String getFileUrl(String fileName);\n\n    public abstract String uploadFile(MultipartFile file);\n\n    public abstract String getProviderName();\n\n    public abstract byte[] downloadFile(String fileName);\n\n    public abstract String deleteFile(String fileName);\n\n    protected File convertMultiPartFileToFile(MultipartFile file) throws IOException {\n        String originalFilename = Objects.requireNonNull(file.getOriginalFilename());\n        String name = originalFilename;\n        String extension = \"\";\n        int lastDotIndex = originalFilename.lastIndexOf(\".\");\n        if (lastDotIndex != -1) {\n            name = originalFilename.substring(0, lastDotIndex);\n            extension = originalFilename.substring(lastDotIndex);\n        }\n\n        Path tempFilePath = Files.createTempFile(name + \"_\", extension);\n\n        file.transferTo(tempFilePath.toFile());\n\n        log.debug(\"Created temporary file: {}\", tempFilePath.toAbsolutePath());\n        return tempFilePath.toFile();\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/StorageService.java",
      "class_name": "StorageService",
      "method_name": "getFileUrl",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 15,
      "line_end": 15,
      "content": "public abstract String getFileUrl(String fileName);",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/StorageService.java",
      "class_name": "StorageService",
      "method_name": "uploadFile",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 17,
      "line_end": 17,
      "content": "public abstract String uploadFile(MultipartFile file);",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/StorageService.java",
      "class_name": "StorageService",
      "method_name": "getProviderName",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 19,
      "line_end": 19,
      "content": "public abstract String getProviderName();",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/StorageService.java",
      "class_name": "StorageService",
      "method_name": "downloadFile",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 21,
      "line_end": 21,
      "content": "public abstract byte[] downloadFile(String fileName);",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/StorageService.java",
      "class_name": "StorageService",
      "method_name": "deleteFile",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 23,
      "line_end": 23,
      "content": "public abstract String deleteFile(String fileName);",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/thirdparty/storage/StorageService.java",
      "class_name": "StorageService",
      "method_name": "convertMultiPartFileToFile",
      "chunk_type": "other",
      "calls": [
        "Files.createTempFile",
        "MultipartFile.getOriginalFilename",
        "MultipartFile.transferTo",
        "Objects.requireNonNull",
        "unknown.debug",
        "unknown.lastIndexOf",
        "unknown.substring",
        "unknown.toAbsolutePath",
        "unknown.toFile"
      ],
      "called_by": [],
      "line_start": 25,
      "line_end": 41,
      "content": "protected File convertMultiPartFileToFile(MultipartFile file) throws IOException {\n        String originalFilename = Objects.requireNonNull(file.getOriginalFilename());\n        String name = originalFilename;\n        String extension = \"\";\n        int lastDotIndex = originalFilename.lastIndexOf(\".\");\n        if (lastDotIndex != -1) {\n            name = originalFilename.substring(0, lastDotIndex);\n            extension = originalFilename.substring(lastDotIndex);\n        }\n\n        Path tempFilePath = Files.createTempFile(name + \"_\", extension);\n\n        file.transferTo(tempFilePath.toFile());\n\n        log.debug(\"Created temporary file: {}\", tempFilePath.toAbsolutePath());\n        return tempFilePath.toFile();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/FileUtils.java",
      "class_name": "FileUtils",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 21,
      "content": "@Slf4j\npublic class FileUtils {\n\n    public static String convertToBase64(File file) {\n        try {\n            byte[] fileContent = Files.readAllBytes(file.toPath());\n            return Base64.getEncoder().encodeToString(fileContent);\n        } catch (Exception e) {\n            log.warn(\"failed to convert file to Base64: {}\", e.getMessage());\n            return null;\n        }\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/FileUtils.java",
      "class_name": "FileUtils",
      "method_name": "convertToBase64",
      "chunk_type": "other",
      "calls": [
        "Base64.getEncoder",
        "Base64.getEncoder().encodeToString",
        "File.toPath",
        "Files.readAllBytes",
        "unknown.getMessage",
        "unknown.warn"
      ],
      "called_by": [
        "QuizServiceImpl.submitQuizQuestion"
      ],
      "line_start": 12,
      "line_end": 20,
      "content": "public static String convertToBase64(File file) {\n        try {\n            byte[] fileContent = Files.readAllBytes(file.toPath());\n            return Base64.getEncoder().encodeToString(fileContent);\n        } catch (Exception e) {\n            log.warn(\"failed to convert file to Base64: {}\", e.getMessage());\n            return null;\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/FunctionHelper.java",
      "class_name": "FunctionHelper",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 10,
      "line_end": 47,
      "content": "public class FunctionHelper {\n    public static String[] getNullPropertyNames (Object source, String... ignorePropertyNames) {\n        final BeanWrapper src = new BeanWrapperImpl(source);\n        java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();\n\n        Set<String> emptyNames = new HashSet<>(Arrays.stream(ignorePropertyNames).toList());\n        for(java.beans.PropertyDescriptor pd : pds) {\n            Object srcValue = src.getPropertyValue(pd.getName());\n            if (srcValue == null) emptyNames.add(pd.getName());\n        }\n\n        String[] result = new String[emptyNames.size() + ignorePropertyNames.length];\n        return emptyNames.toArray(result);\n    }\n    public static String[] getNullPropertyNames (Object source) {\n        final BeanWrapper src = new BeanWrapperImpl(source);\n        java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();\n\n        Set<String> emptyNames = new HashSet<>();\n        for(java.beans.PropertyDescriptor pd : pds) {\n            Object srcValue = src.getPropertyValue(pd.getName());\n            if (srcValue == null) emptyNames.add(pd.getName());\n        }\n\n        String[] result = new String[emptyNames.size()];\n        return emptyNames.toArray(result);\n    }\n\n    public static String generateRandomString(int length) {\n        String ALPHA_NUMERIC_STRING = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n        StringBuilder builder = new StringBuilder();\n        while (length-- != 0) {\n            int character = (int)(Math.random()*ALPHA_NUMERIC_STRING.length());\n            builder.append(ALPHA_NUMERIC_STRING.charAt(character));\n        }\n        return builder.toString();\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/FunctionHelper.java",
      "class_name": "FunctionHelper",
      "method_name": "getNullPropertyNames",
      "chunk_type": "other",
      "calls": [
        "Arrays.stream",
        "Arrays.stream(ignorePropertyNames).toList",
        "unknown.add",
        "unknown.getName",
        "unknown.getPropertyDescriptors",
        "unknown.getPropertyValue",
        "unknown.size",
        "unknown.toArray"
      ],
      "called_by": [],
      "line_start": 11,
      "line_end": 23,
      "content": "public static String[] getNullPropertyNames (Object source, String... ignorePropertyNames) {\n        final BeanWrapper src = new BeanWrapperImpl(source);\n        java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();\n\n        Set<String> emptyNames = new HashSet<>(Arrays.stream(ignorePropertyNames).toList());\n        for(java.beans.PropertyDescriptor pd : pds) {\n            Object srcValue = src.getPropertyValue(pd.getName());\n            if (srcValue == null) emptyNames.add(pd.getName());\n        }\n\n        String[] result = new String[emptyNames.size() + ignorePropertyNames.length];\n        return emptyNames.toArray(result);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/FunctionHelper.java",
      "class_name": "FunctionHelper",
      "method_name": "getNullPropertyNames",
      "chunk_type": "other",
      "calls": [
        "unknown.add",
        "unknown.getName",
        "unknown.getPropertyDescriptors",
        "unknown.getPropertyValue",
        "unknown.size",
        "unknown.toArray"
      ],
      "called_by": [],
      "line_start": 24,
      "line_end": 36,
      "content": "public static String[] getNullPropertyNames (Object source) {\n        final BeanWrapper src = new BeanWrapperImpl(source);\n        java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();\n\n        Set<String> emptyNames = new HashSet<>();\n        for(java.beans.PropertyDescriptor pd : pds) {\n            Object srcValue = src.getPropertyValue(pd.getName());\n            if (srcValue == null) emptyNames.add(pd.getName());\n        }\n\n        String[] result = new String[emptyNames.size()];\n        return emptyNames.toArray(result);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/FunctionHelper.java",
      "class_name": "FunctionHelper",
      "method_name": "generateRandomString",
      "chunk_type": "other",
      "calls": [
        "ALPHA_NUMERIC_STRING.charAt",
        "ALPHA_NUMERIC_STRING.length",
        "Math.random",
        "unknown.append",
        "unknown.toString"
      ],
      "called_by": [],
      "line_start": 38,
      "line_end": 46,
      "content": "public static String generateRandomString(int length) {\n        String ALPHA_NUMERIC_STRING = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n        StringBuilder builder = new StringBuilder();\n        while (length-- != 0) {\n            int character = (int)(Math.random()*ALPHA_NUMERIC_STRING.length());\n            builder.append(ALPHA_NUMERIC_STRING.charAt(character));\n        }\n        return builder.toString();\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/JsonUtils.java",
      "class_name": "JsonUtils",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 10,
      "line_end": 63,
      "content": "public class JsonUtils {\n\n    private JsonUtils() {}\n\n    public static <T> T getGenericObject(Object input, Class<T> clazz) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            objectMapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n            return objectMapper.convertValue(input, clazz);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    public static  <T> T getEntityFromJsonStr(String input, Class<T> clazz) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            objectMapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n            return objectMapper.readValue(input, clazz);\n        } catch (IOException e) {\n            return null;\n        }\n    }\n\n    public static String convertObjectToString(Object obj) throws JsonProcessingException {\n        return new ObjectMapper().writeValueAsString(obj);\n    }\n\n    public static String toJsonString(Object input) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            return objectMapper.writeValueAsString(input);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"\";\n        }\n    }\n\n    public static <T> T readObject(String input, Class<T> clazz) throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        return objectMapper.readValue(input, clazz);\n    }\n\n    public static <T> T  readListObject(Object input, Class<T> clazz) throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        return objectMapper.readValue(objectMapper.writeValueAsString(input),\n                objectMapper.getTypeFactory().constructCollectionType(List.class, clazz));\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/JsonUtils.java",
      "class_name": "JsonUtils",
      "method_name": "getGenericObject",
      "chunk_type": "other",
      "calls": [
        "unknown.configure",
        "unknown.convertValue",
        "unknown.enable"
      ],
      "called_by": [
        "LogsActivityAOPHandler.displayLog"
      ],
      "line_start": 14,
      "line_end": 23,
      "content": "public static <T> T getGenericObject(Object input, Class<T> clazz) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            objectMapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n            return objectMapper.convertValue(input, clazz);\n        } catch (Exception e) {\n            return null;\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/JsonUtils.java",
      "class_name": "JsonUtils",
      "method_name": "getEntityFromJsonStr",
      "chunk_type": "other",
      "calls": [
        "unknown.configure",
        "unknown.enable",
        "unknown.readValue"
      ],
      "called_by": [],
      "line_start": 25,
      "line_end": 34,
      "content": "public static  <T> T getEntityFromJsonStr(String input, Class<T> clazz) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            objectMapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n            return objectMapper.readValue(input, clazz);\n        } catch (IOException e) {\n            return null;\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/JsonUtils.java",
      "class_name": "JsonUtils",
      "method_name": "convertObjectToString",
      "chunk_type": "other",
      "calls": [
        "unknown.writeValueAsString"
      ],
      "called_by": [
        "LogsActivityAOPHandler.logsActivityAnnotation"
      ],
      "line_start": 36,
      "line_end": 38,
      "content": "public static String convertObjectToString(Object obj) throws JsonProcessingException {\n        return new ObjectMapper().writeValueAsString(obj);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/JsonUtils.java",
      "class_name": "JsonUtils",
      "method_name": "toJsonString",
      "chunk_type": "other",
      "calls": [
        "unknown.configure",
        "unknown.printStackTrace",
        "unknown.writeValueAsString"
      ],
      "called_by": [
        "QuizServiceImpl.submitQuizQuestion"
      ],
      "line_start": 40,
      "line_end": 49,
      "content": "public static String toJsonString(Object input) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            return objectMapper.writeValueAsString(input);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"\";\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/JsonUtils.java",
      "class_name": "JsonUtils",
      "method_name": "readObject",
      "chunk_type": "other",
      "calls": [
        "unknown.configure",
        "unknown.readValue"
      ],
      "called_by": [],
      "line_start": 51,
      "line_end": 55,
      "content": "public static <T> T readObject(String input, Class<T> clazz) throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        return objectMapper.readValue(input, clazz);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/JsonUtils.java",
      "class_name": "JsonUtils",
      "method_name": "readListObject",
      "chunk_type": "other",
      "calls": [
        "unknown.configure",
        "unknown.constructCollectionType",
        "unknown.getTypeFactory",
        "unknown.readValue",
        "unknown.writeValueAsString"
      ],
      "called_by": [],
      "line_start": 57,
      "line_end": 62,
      "content": "public static <T> T  readListObject(Object input, Class<T> clazz) throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        return objectMapper.readValue(objectMapper.writeValueAsString(input),\n                objectMapper.getTypeFactory().constructCollectionType(List.class, clazz));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/Utils.java",
      "class_name": "Utils",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 20,
      "line_end": 136,
      "content": "public class Utils {\n\n    private static final String REGEX_FILTER_KEY =\n            \"[ : ]+((?=\\\\[)\\\\[[^]]*\\\\]|(?=\\\\{)\\\\{[^\\\\}]*\\\\}|\\\\\\\"[^\\\"]*\\\\\\\"|(\\\\d+(\\\\.\\\\d+)?))\";\n    private static final Logger log = LoggerFactory.getLogger(Utils.class);\n\n    static List<String> redactKeys = Collections.unmodifiableList(Arrays.asList(\n            \"api_key\", \"apiKey\", \"api_secret\", \"apiSecret\", \"otp\", \"pin\", \"access_token\", \"accessToken\", \"full_name\",\n            \"fullName\", \"phone_number\", \"phoneNumber\", \"email\", \"mobile_number\", \"mobileNumber\", \"email_address\", \"emailAddress\",\n            \"email_preference\", \"emailReference\", \"authorization\", \"verified_token\", \"verifiedToken\", \"x-api-secret\", \"xApiSecret\",\n            \"x-api-key\", \"xApiKey\", \"Authorization\", \"partner\", \"client_id\", \"clientId\", \"public_key\", \"publicKey\",\n            \"private_key\", \"privateKey\", \"x-public-key\", \"xPublicKey\", \"x-private-key\", \"xPrivateKey\", \"newrelic\",\n            \"refresh_token\", \"refreshToken\", \"password\", \"passcode\"));\n\n    public static long genAutoId(String key) {\n        if (StringUtils.isBlank(key)) {\n            key = UUID.randomUUID().toString();\n        }\n        byte[] bytes = key.getBytes(StandardCharsets.UTF_8);\n        long h = MurmurHash3.hash64(bytes);\n        return Math.abs(h);\n    }\n\n\n    public static String redact(@NonNull String string) {\n        try {\n            for (String key : redactKeys) {\n                Matcher matcher = Pattern.compile(String.format(\"\\\"%s\\\"%s\", key, REGEX_FILTER_KEY)).matcher(string);\n                if (matcher.find() && matcher.group(1) != null) {\n                    String group = matcher.group(1);\n                    if (!ObjectUtils.isEmpty(group.trim()) && !\"\\\"\\\"\".equals(group)) {\n                        string = string.replace(group, \"\\\"**********\\\"\");\n                    }\n                }\n            }\n            return string;\n        } catch (Exception e) {\n            return string;\n        }\n    }\n\n    public static <T> Map<String, T> convertListToMap(List<T> list, Function<T, String> keyExtractor) {\n        return list.stream().collect(Collectors.toMap(keyExtractor, Function.identity(), (oldVal, newVal) -> newVal));\n    }\n\n    public static String convertDateToyyyyMMdd(Long input){\n        String pattern = \"yyyyMMdd\";\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);\n        Date date = new Date(input);\n        return simpleDateFormat.format(date);\n    }\n\n    public static boolean isMatchRegex(String str, String regex) {\n        try {\n            if (str == null || regex == null) {\n                return false;\n            }\n\n            Pattern pattern = Pattern.compile(regex);\n            Matcher matcher = pattern.matcher(str);\n\n            return matcher.matches();\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            return false;\n        }\n\n    }\n\n\n    public static String[] getBlankProperties(Object obj) {\n        return Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        return value == null || (value instanceof String && StringUtils.isBlank((String) value));\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName)\n                .toArray(String[]::new);\n    }\n\n    public static String[] getExistedProperties(Object obj) {\n        return Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        if (value instanceof String) {\n                            return !StringUtils.isBlank((String) value);\n                        }\n                        return value != null;\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName)\n                .toArray(String[]::new);\n    }\n\n    public static <T extends Enum<T>> T enumOf(Class<T> enumType, String value) {\n        return Arrays.stream(enumType.getEnumConstants())\n                .filter(e -> e.name().equalsIgnoreCase(value))\n                .findFirst()\n                .orElse(null);\n    }\n\n    public static LocalDateTime stringToLocalDateTime(String dateOfBirth) {\n        if (StringUtils.isBlank(dateOfBirth)) {\n            return null;\n        }\n        return LocalDateTime.parse(dateOfBirth);\n    }\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/Utils.java",
      "class_name": "Utils",
      "method_name": "genAutoId",
      "chunk_type": "other",
      "calls": [
        "Math.abs",
        "MurmurHash3.hash64",
        "String.getBytes",
        "StringUtils.isBlank",
        "UUID.randomUUID",
        "UUID.randomUUID().toString"
      ],
      "called_by": [],
      "line_start": 34,
      "line_end": 41,
      "content": "public static long genAutoId(String key) {\n        if (StringUtils.isBlank(key)) {\n            key = UUID.randomUUID().toString();\n        }\n        byte[] bytes = key.getBytes(StandardCharsets.UTF_8);\n        long h = MurmurHash3.hash64(bytes);\n        return Math.abs(h);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/Utils.java",
      "class_name": "Utils",
      "method_name": "redact",
      "chunk_type": "other",
      "calls": [
        "ObjectUtils.isEmpty",
        "Pattern.compile",
        "Pattern.compile(String.format(\"\\\"%s\\\"%s\", key, REGEX_FILTER_KEY)).matcher",
        "String.format",
        "String.replace",
        "unknown.equals",
        "unknown.find",
        "unknown.group",
        "unknown.trim"
      ],
      "called_by": [
        "LogsActivityAOPHandler.logsActivityAnnotation",
        "LogsActivityAOPHandler.displayLog"
      ],
      "line_start": 44,
      "line_end": 59,
      "content": "public static String redact(@NonNull String string) {\n        try {\n            for (String key : redactKeys) {\n                Matcher matcher = Pattern.compile(String.format(\"\\\"%s\\\"%s\", key, REGEX_FILTER_KEY)).matcher(string);\n                if (matcher.find() && matcher.group(1) != null) {\n                    String group = matcher.group(1);\n                    if (!ObjectUtils.isEmpty(group.trim()) && !\"\\\"\\\"\".equals(group)) {\n                        string = string.replace(group, \"\\\"**********\\\"\");\n                    }\n                }\n            }\n            return string;\n        } catch (Exception e) {\n            return string;\n        }\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/Utils.java",
      "class_name": "Utils",
      "method_name": "convertListToMap",
      "chunk_type": "other",
      "calls": [
        "Collectors.toMap",
        "Function.identity",
        "List<T>.stream",
        "unknown.collect"
      ],
      "called_by": [],
      "line_start": 61,
      "line_end": 63,
      "content": "public static <T> Map<String, T> convertListToMap(List<T> list, Function<T, String> keyExtractor) {\n        return list.stream().collect(Collectors.toMap(keyExtractor, Function.identity(), (oldVal, newVal) -> newVal));\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/Utils.java",
      "class_name": "Utils",
      "method_name": "convertDateToyyyyMMdd",
      "chunk_type": "other",
      "calls": [
        "unknown.format"
      ],
      "called_by": [],
      "line_start": 65,
      "line_end": 70,
      "content": "public static String convertDateToyyyyMMdd(Long input){\n        String pattern = \"yyyyMMdd\";\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);\n        Date date = new Date(input);\n        return simpleDateFormat.format(date);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/Utils.java",
      "class_name": "Utils",
      "method_name": "isMatchRegex",
      "chunk_type": "other",
      "calls": [
        "Pattern.compile",
        "unknown.error",
        "unknown.getMessage",
        "unknown.matcher",
        "unknown.matches"
      ],
      "called_by": [],
      "line_start": 72,
      "line_end": 87,
      "content": "public static boolean isMatchRegex(String str, String regex) {\n        try {\n            if (str == null || regex == null) {\n                return false;\n            }\n\n            Pattern pattern = Pattern.compile(regex);\n            Matcher matcher = pattern.matcher(str);\n\n            return matcher.matches();\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            return false;\n        }\n\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/Utils.java",
      "class_name": "Utils",
      "method_name": "getBlankProperties",
      "chunk_type": "other",
      "calls": [
        "Arrays.stream",
        "Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        return value == null || (value instanceof String && StringUtils.isBlank((String) value));\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName).toArray",
        "Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        return value == null || (value instanceof String && StringUtils.isBlank((String) value));\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                }).map",
        "Arrays.stream(obj.getClass().getDeclaredFields()).filter",
        "Object.getClass",
        "StringUtils.isBlank",
        "unknown.get",
        "unknown.getDeclaredFields",
        "unknown.setAccessible"
      ],
      "called_by": [],
      "line_start": 90,
      "line_end": 103,
      "content": "public static String[] getBlankProperties(Object obj) {\n        return Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        return value == null || (value instanceof String && StringUtils.isBlank((String) value));\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName)\n                .toArray(String[]::new);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/Utils.java",
      "class_name": "Utils",
      "method_name": "getExistedProperties",
      "chunk_type": "other",
      "calls": [
        "Arrays.stream",
        "Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        if (value instanceof String) {\n                            return !StringUtils.isBlank((String) value);\n                        }\n                        return value != null;\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName).toArray",
        "Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        if (value instanceof String) {\n                            return !StringUtils.isBlank((String) value);\n                        }\n                        return value != null;\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                }).map",
        "Arrays.stream(obj.getClass().getDeclaredFields()).filter",
        "Object.getClass",
        "StringUtils.isBlank",
        "unknown.get",
        "unknown.getDeclaredFields",
        "unknown.setAccessible"
      ],
      "called_by": [],
      "line_start": 105,
      "line_end": 121,
      "content": "public static String[] getExistedProperties(Object obj) {\n        return Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        if (value instanceof String) {\n                            return !StringUtils.isBlank((String) value);\n                        }\n                        return value != null;\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName)\n                .toArray(String[]::new);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/Utils.java",
      "class_name": "Utils",
      "method_name": "enumOf",
      "chunk_type": "other",
      "calls": [
        "Arrays.stream",
        "Arrays.stream(enumType.getEnumConstants())\n                .filter(e -> e.name().equalsIgnoreCase(value))\n                .findFirst().orElse",
        "Arrays.stream(enumType.getEnumConstants())\n                .filter(e -> e.name().equalsIgnoreCase(value)).findFirst",
        "Arrays.stream(enumType.getEnumConstants()).filter",
        "Class<T>.getEnumConstants",
        "unknown.equalsIgnoreCase",
        "unknown.name"
      ],
      "called_by": [],
      "line_start": 123,
      "line_end": 128,
      "content": "public static <T extends Enum<T>> T enumOf(Class<T> enumType, String value) {\n        return Arrays.stream(enumType.getEnumConstants())\n                .filter(e -> e.name().equalsIgnoreCase(value))\n                .findFirst()\n                .orElse(null);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/main/java/com/edu/onestudy/utils/Utils.java",
      "class_name": "Utils",
      "method_name": "stringToLocalDateTime",
      "chunk_type": "other",
      "calls": [
        "LocalDateTime.parse",
        "StringUtils.isBlank"
      ],
      "called_by": [],
      "line_start": 130,
      "line_end": 135,
      "content": "public static LocalDateTime stringToLocalDateTime(String dateOfBirth) {\n        if (StringUtils.isBlank(dateOfBirth)) {\n            return null;\n        }\n        return LocalDateTime.parse(dateOfBirth);\n    }",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/test/java/com/edu/onestudy/OnestudyApplicationTests.java",
      "class_name": "OnestudyApplicationTests",
      "method_name": null,
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 6,
      "line_end": 13,
      "content": "@SpringBootTest\nclass OnestudyApplicationTests {\n\n    @Test\n    void contextLoads() {\n    }\n\n}",
      "endpoints": [],
      "summary": ""
    },
    {
      "file_path": "storage/repos/test-onestudy15/src/test/java/com/edu/onestudy/OnestudyApplicationTests.java",
      "class_name": "OnestudyApplicationTests",
      "method_name": "contextLoads",
      "chunk_type": "other",
      "calls": [],
      "called_by": [],
      "line_start": 9,
      "line_end": 11,
      "content": "@Test\n    void contextLoads() {\n    }",
      "endpoints": [],
      "summary": ""
    }
  ],
  "dependency_graph": {
    "OneStudyApplication": {
      "calls": [],
      "called_by": []
    },
    "OneStudyApplication.main": {
      "calls": [
        "SpringApplication.run"
      ],
      "called_by": []
    },
    "LogsActivityAOPHandler": {
      "calls": [],
      "called_by": []
    },
    "LogsActivityAOPHandler.logsActivityAnnotation": {
      "calls": [
        "JsonUtils.convertObjectToString",
        "LogsActivityAOPHandler.displayLog",
        "LogsActivityAOPHandler.getHeaders",
        "LogsActivityAOPHandler.getRequestId",
        "ProceedingJoinPoint.getArgs",
        "ProceedingJoinPoint.getSignature",
        "ProceedingJoinPoint.proceed",
        "Utils.redact",
        "unknown.getDeclaringTypeName",
        "unknown.getName",
        "unknown.getParameterMap",
        "unknown.getQueryString",
        "unknown.getRequestURI",
        "unknown.getTime",
        "unknown.put"
      ],
      "called_by": []
    },
    "LogsActivityAOPHandler.displayLog": {
      "calls": [
        "JsonUtils.getGenericObject",
        "LogsActivityAOPHandler.entries",
        "LogsActivityAOPHandler.getRequestBody",
        "LogsActivityAOPHandler.getRequestId",
        "Map<String, Object>.get",
        "ObjectUtils.isEmpty",
        "Utils.redact",
        "unknown.equals",
        "unknown.error",
        "unknown.getBody",
        "unknown.getData",
        "unknown.getError",
        "unknown.getMessage",
        "unknown.info",
        "unknown.toString",
        "unknown.writeValueAsString"
      ],
      "called_by": [
        "LogsActivityAOPHandler.logsActivityAnnotation"
      ]
    },
    "ValueOfEnumValidator": {
      "calls": [],
      "called_by": []
    },
    "ValueOfEnumValidator.initialize": {
      "calls": [
        "Collectors.toList",
        "Stream.of",
        "Stream.of(annotation.enumClass().getEnumConstants())\n                .map(Enum::name).collect",
        "Stream.of(annotation.enumClass().getEnumConstants()).map",
        "ValueOfEnum.enumClass",
        "unknown.getEnumConstants"
      ],
      "called_by": []
    },
    "ValueOfEnumValidator.isValid": {
      "calls": [
        "CharSequence.toString",
        "unknown.contains"
      ],
      "called_by": []
    },
    "AppConfig": {
      "calls": [],
      "called_by": []
    },
    "AppConfig.corsConfigurationSource": {
      "calls": [
        "Arrays.stream",
        "Arrays.stream(corsWhitelistString.split(\",\"))\n                .map(String::trim)\n                .filter(origin -> !origin.isEmpty()).toList",
        "Arrays.stream(corsWhitelistString.split(\",\"))\n                .map(String::trim).filter",
        "Arrays.stream(corsWhitelistString.split(\",\")).map",
        "List.of",
        "unknown.isEmpty",
        "unknown.registerCorsConfiguration",
        "unknown.setAllowCredentials",
        "unknown.setAllowedHeaders",
        "unknown.setAllowedMethods",
        "unknown.setAllowedOrigins",
        "unknown.split"
      ],
      "called_by": []
    },
    "AwsS3Config": {
      "calls": [],
      "called_by": []
    },
    "AwsS3Config.getS3Client": {
      "calls": [
        "AwsBasicCredentials.create",
        "Region.of",
        "S3Client.builder",
        "S3Client.builder()\n                .region(Region.of(region))\n                .credentialsProvider(StaticCredentialsProvider.create(credentials)).build",
        "S3Client.builder()\n                .region(Region.of(region)).credentialsProvider",
        "S3Client.builder().region",
        "StaticCredentialsProvider.create"
      ],
      "called_by": []
    },
    "StringListConverter": {
      "calls": [],
      "called_by": []
    },
    "StringListConverter.convertToDatabaseColumn": {
      "calls": [
        "List<String>.isEmpty",
        "String.join"
      ],
      "called_by": []
    },
    "StringListConverter.convertToEntityAttribute": {
      "calls": [
        "Arrays.asList",
        "String.isEmpty",
        "String.replaceAll",
        "unknown.split"
      ],
      "called_by": []
    },
    "Constant": {
      "calls": [],
      "called_by": []
    },
    "ErrorConstant": {
      "calls": [],
      "called_by": []
    },
    "RequestKeyConstant": {
      "calls": [],
      "called_by": []
    },
    "Symbol": {
      "calls": [],
      "called_by": []
    },
    "UrlConstant": {
      "calls": [],
      "called_by": []
    },
    "AuthController": {
      "calls": [],
      "called_by": []
    },
    "AuthController.whoAmI": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.getAuthProfile",
        "unknown.ofSucceeded",
        "unknown.toString"
      ],
      "called_by": []
    },
    "QuestionController": {
      "calls": [],
      "called_by": []
    },
    "QuizController": {
      "calls": [],
      "called_by": []
    },
    "QuizController.createQuiz": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.createQuiz",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "QuizController.updateQuiz": {
      "calls": [
        "unknown.ofSucceeded",
        "unknown.updateQuiz"
      ],
      "called_by": []
    },
    "QuizController.getQuizById": {
      "calls": [
        "unknown.getById",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "QuizController.getQuizStatsById": {
      "calls": [
        "unknown.getQuizStatsById",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "QuizController.getMyQuizzes": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.getMyQuizzes",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "QuizController.deleteQuiz": {
      "calls": [
        "unknown.deleteQuiz",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "QuizController.saveQuiz": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.saveQuiz"
      ],
      "called_by": []
    },
    "QuizController.unsaveQuiz": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.unsaveQuiz"
      ],
      "called_by": []
    },
    "QuizController.getListUserSavedQuiz": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.getUserSavedQuiz",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "QuizController.getSavedQuizzes": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.getSavedQuizzes",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "QuizController.attemptQuiz": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.startQuiz"
      ],
      "called_by": []
    },
    "QuizController.getQuizAttempts": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.getMyQuizAttempts",
        "unknown.ofSucceeded",
        "unknown.toString"
      ],
      "called_by": []
    },
    "QuizController.getQuizAttempt": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.getAttempt",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "QuizController.submitQuizQuestion": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.submitQuizQuestion"
      ],
      "called_by": []
    },
    "QuizController.submitQuizComplete": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.submitQuizComplete"
      ],
      "called_by": []
    },
    "ResourceController": {
      "calls": [],
      "called_by": []
    },
    "ResourceController.uploadResource": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.ofSucceeded",
        "unknown.uploadResource"
      ],
      "called_by": []
    },
    "ResourceController.getResource": {
      "calls": [
        "UserPrincipal.getId",
        "unknown.getResource",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "UserController": {
      "calls": [],
      "called_by": []
    },
    "UserController.uploadResource": {
      "calls": [
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "AuthPubController": {
      "calls": [],
      "called_by": []
    },
    "AuthPubController.login": {
      "calls": [
        "unknown.login",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "AuthPubController.register": {
      "calls": [
        "unknown.ofSucceeded",
        "unknown.register"
      ],
      "called_by": []
    },
    "PronunciationController": {
      "calls": [],
      "called_by": []
    },
    "PronunciationController.getSamplePronunciations": {
      "calls": [
        "unknown.getSample",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "PronunciationController.getAccuracy": {
      "calls": [
        "unknown.getAccuracy",
        "unknown.ofSucceeded"
      ],
      "called_by": []
    },
    "QuizPubController": {
      "calls": [],
      "called_by": []
    },
    "QuizPubController.getAllQuizzes": {
      "calls": [
        "BaseResponse.ofSucceeded",
        "unknown.getAllPublicQuizzes"
      ],
      "called_by": []
    },
    "BaseCreateUpdateResponse": {
      "calls": [],
      "called_by": []
    },
    "BaseResponse": {
      "calls": [],
      "called_by": []
    },
    "BaseResponse.verifyMetaResponse": {
      "calls": [
        "Objects.isNull",
        "unknown.getCode",
        "unknown.getMessage"
      ],
      "called_by": []
    },
    "BaseResponse.ofSucceeded": {
      "calls": [
        "BaseResponse.ofSucceeded",
        "unknown.setRequestId"
      ],
      "called_by": [
        "QuizPubController.getAllQuizzes",
        "BaseResponse.ofSucceeded",
        "BaseResponse.ofGetListSucceeded",
        "BaseService.ofSucceeded"
      ]
    },
    "BaseResponse.ofFailed": {
      "calls": [
        "BaseResponse.ofFailed",
        "unknown.setRequestId"
      ],
      "called_by": [
        "BaseResponse.ofFailed",
        "BaseService.ofFailed"
      ]
    },
    "BaseResponse.ofGetListSucceeded": {
      "calls": [
        "BaseResponse.ofSucceeded",
        "BasicRequestList.getPageIndex",
        "BasicRequestList.getPageSize",
        "BasicRequestList.getRequestId",
        "BasicRequestList.getTotalItems",
        "unknown.setPageIndex",
        "unknown.setPageSize",
        "unknown.setRequestId",
        "unknown.setTotalItems"
      ],
      "called_by": [
        "BaseService.ofGetListSucceeded"
      ]
    },
    "BasicCreationResponse": {
      "calls": [],
      "called_by": []
    },
    "BasicRequest": {
      "calls": [],
      "called_by": []
    },
    "BasicRequest.isValidByManageMerchants": {
      "calls": [
        "StringUtils.isBlank",
        "unknown.contains"
      ],
      "called_by": []
    },
    "BasicRequestList": {
      "calls": [],
      "called_by": []
    },
    "ErrorViolation": {
      "calls": [],
      "called_by": []
    },
    "Meta": {
      "calls": [],
      "called_by": []
    },
    "AuthLoginRequest": {
      "calls": [],
      "called_by": []
    },
    "AuthProfileResponse": {
      "calls": [],
      "called_by": []
    },
    "AuthRegisterRequest": {
      "calls": [],
      "called_by": []
    },
    "AuthRegisterResponse": {
      "calls": [],
      "called_by": []
    },
    "GetPronunciationSampleResponseDto": {
      "calls": [],
      "called_by": []
    },
    "GetSampleRequestDto": {
      "calls": [],
      "called_by": []
    },
    "PronunciationAccuracyRequestDto": {
      "calls": [],
      "called_by": []
    },
    "PronunciationAccuracyResponseDto": {
      "calls": [],
      "called_by": []
    },
    "CreateQuizDto": {
      "calls": [],
      "called_by": []
    },
    "OptionDto": {
      "calls": [],
      "called_by": []
    },
    "QuestionDto": {
      "calls": [],
      "called_by": []
    },
    "StartQuizResponse": {
      "calls": [],
      "called_by": []
    },
    "SubmitAnswerRequest": {
      "calls": [],
      "called_by": []
    },
    "GetResourceResponse": {
      "calls": [],
      "called_by": []
    },
    "BasicUserDto": {
      "calls": [],
      "called_by": []
    },
    "FillInBlanks": {
      "calls": [],
      "called_by": []
    },
    "LeaderboardEntry": {
      "calls": [],
      "called_by": []
    },
    "LeaderboardEntryId": {
      "calls": [],
      "called_by": []
    },
    "LeaderboardEntryId.equals": {
      "calls": [
        "LeaderboardEntryId.getClass",
        "Object.getClass",
        "Objects.equals"
      ],
      "called_by": []
    },
    "LeaderboardEntryId.hashCode": {
      "calls": [
        "Objects.hash"
      ],
      "called_by": []
    },
    "Question": {
      "calls": [],
      "called_by": []
    },
    "QuestionOption": {
      "calls": [],
      "called_by": []
    },
    "Quiz": {
      "calls": [],
      "called_by": []
    },
    "QuizAnswer": {
      "calls": [],
      "called_by": []
    },
    "QuizAttempt": {
      "calls": [],
      "called_by": []
    },
    "Resource": {
      "calls": [],
      "called_by": []
    },
    "User": {
      "calls": [],
      "called_by": []
    },
    "UserCredential": {
      "calls": [],
      "called_by": []
    },
    "UserSavedQuiz": {
      "calls": [],
      "called_by": []
    },
    "UserSavedQuizId": {
      "calls": [],
      "called_by": []
    },
    "UserSavedQuizId.equals": {
      "calls": [
        "Object.getClass",
        "Objects.equals",
        "UserSavedQuizId.getClass"
      ],
      "called_by": []
    },
    "UserSavedQuizId.hashCode": {
      "calls": [
        "Objects.hash"
      ],
      "called_by": []
    },
    "BusinessError": {
      "calls": [],
      "called_by": []
    },
    "BusinessException": {
      "calls": [],
      "called_by": []
    },
    "CommonExceptionHandler": {
      "calls": [],
      "called_by": []
    },
    "CommonExceptionHandler.handleBusinessException": {
      "calls": [
        "BusinessException.getError",
        "Collections.singletonList",
        "CommonExceptionHandler.getMessage",
        "CommonExceptionHandler.ofFailed",
        "ErrorViolation.builder",
        "ErrorViolation.builder().description",
        "ErrorViolation.builder().description((String) dataException).build",
        "ObjectUtils.isEmpty",
        "unknown.getData",
        "unknown.getHttpStatus",
        "unknown.getMeta",
        "unknown.setErrors",
        "unknown.setMessage"
      ],
      "called_by": []
    },
    "CommonExceptionHandler.handleMethodArgumentNotValidException": {
      "calls": [
        "CommonExceptionHandler.getBusinessError",
        "CommonExceptionHandler.ofFailed",
        "MissingServletRequestParameterException.getParameterName"
      ],
      "called_by": []
    },
    "CommonExceptionHandler.handleException": {
      "calls": [
        "CommonExceptionHandler.getBusinessError",
        "CommonExceptionHandler.ofFailed"
      ],
      "called_by": []
    },
    "CommonExceptionHandler.handleIllegalArgumentException": {
      "calls": [
        "CommonExceptionHandler.getBusinessError",
        "CommonExceptionHandler.getMessage",
        "CommonExceptionHandler.ofFailed",
        "IllegalArgumentException.getMessage"
      ],
      "called_by": []
    },
    "CommonExceptionHandler.handleHttpStatusCodeException": {
      "calls": [
        "CommonExceptionHandler.getBusinessError",
        "CommonExceptionHandler.getMessage",
        "CommonExceptionHandler.ofFailed",
        "HttpStatus.BAD_REQUEST.value",
        "HttpStatus.FORBIDDEN.value",
        "HttpStatus.INTERNAL_SERVER_ERROR.value",
        "HttpStatus.NOT_FOUND.value",
        "HttpStatus.UNAUTHORIZED.value",
        "HttpStatusCodeException.getMessage",
        "HttpStatusCodeException.getStatusCode",
        "unknown.value"
      ],
      "called_by": []
    },
    "ApiKeyVerifyRequestWrapper": {
      "calls": [],
      "called_by": []
    },
    "ApiKeyVerifyRequestWrapper.getInputStream": {
      "calls": [
        "unknown.available",
        "unknown.getBytes",
        "unknown.read"
      ],
      "called_by": [
        "ApiKeyVerifyRequestWrapper.getReader"
      ]
    },
    "ApiKeyVerifyRequestWrapper.getReader": {
      "calls": [
        "ApiKeyVerifyRequestWrapper.getInputStream"
      ],
      "called_by": []
    },
    "ApiKeyVerifyRequestWrapper.getBody": {
      "calls": [],
      "called_by": []
    },
    "ApiKeyVerifyRequestWrapper.getContentType": {
      "calls": [
        "unknown.getContentType"
      ],
      "called_by": []
    },
    "AppCorsFilter": {
      "calls": [],
      "called_by": []
    },
    "AppCorsFilter.doFilter": {
      "calls": [
        "FilterChain.doFilter",
        "ObjectUtils.isEmpty",
        "ThreadContext.clearAll",
        "ThreadContext.put",
        "UUID.randomUUID",
        "UUID.randomUUID().toString",
        "unknown.contains",
        "unknown.error",
        "unknown.getBody",
        "unknown.getHeader",
        "unknown.getParameterMap",
        "unknown.getRequestURI",
        "unknown.isMultipart",
        "unknown.parse",
        "unknown.put",
        "unknown.resolveMultipart",
        "unknown.setAttribute",
        "unknown.setStatus",
        "unknown.warn"
      ],
      "called_by": []
    },
    "QuestionRepositoryImpl": {
      "calls": [],
      "called_by": []
    },
    "QuestionRepositoryImpl.save": {
      "calls": [
        "unknown.save"
      ],
      "called_by": []
    },
    "QuestionRepositoryImpl.findById": {
      "calls": [
        "UUID.fromString",
        "unknown.findById"
      ],
      "called_by": []
    },
    "QuestionRepositoryImpl.findByQuizId": {
      "calls": [
        "UUID.fromString",
        "unknown.findByQuizId"
      ],
      "called_by": []
    },
    "QuestionRepositoryImpl.saveAll": {
      "calls": [
        "unknown.saveAll"
      ],
      "called_by": []
    },
    "QuestionRepositoryImpl.deleteAll": {
      "calls": [
        "unknown.deleteAll"
      ],
      "called_by": []
    },
    "QuestionRepositoryImpl.countByQuizId": {
      "calls": [
        "UUID.fromString",
        "unknown.countByQuizId"
      ],
      "called_by": []
    },
    "QuizAnswerRepositoryImpl": {
      "calls": [],
      "called_by": []
    },
    "QuizAnswerRepositoryImpl.save": {
      "calls": [
        "unknown.save"
      ],
      "called_by": []
    },
    "QuizAnswerRepositoryImpl.saveAll": {
      "calls": [
        "unknown.saveAll"
      ],
      "called_by": []
    },
    "QuizAnswerRepositoryImpl.findById": {
      "calls": [
        "UUID.fromString",
        "unknown.findById"
      ],
      "called_by": []
    },
    "QuizAnswerRepositoryImpl.findByQuizAttemptId": {
      "calls": [
        "UUID.fromString",
        "unknown.findByQuizAttemptId"
      ],
      "called_by": []
    },
    "QuizAnswerRepositoryImpl.delete": {
      "calls": [
        "unknown.delete"
      ],
      "called_by": []
    },
    "QuizAttemptRepositoryImpl": {
      "calls": [],
      "called_by": []
    },
    "QuizAttemptRepositoryImpl.save": {
      "calls": [
        "unknown.save"
      ],
      "called_by": []
    },
    "QuizAttemptRepositoryImpl.findById": {
      "calls": [
        "UUID.fromString",
        "unknown.findById"
      ],
      "called_by": []
    },
    "QuizAttemptRepositoryImpl.findAll": {
      "calls": [
        "unknown.findAll"
      ],
      "called_by": []
    },
    "QuizAttemptRepositoryImpl.findByUserId": {
      "calls": [
        "unknown.findByUserId"
      ],
      "called_by": []
    },
    "QuizAttemptRepositoryImpl.findByQuizId": {
      "calls": [
        "UUID.fromString",
        "unknown.findByQuizId"
      ],
      "called_by": []
    },
    "QuizRepositoryImpl": {
      "calls": [],
      "called_by": []
    },
    "QuizRepositoryImpl.save": {
      "calls": [
        "unknown.save"
      ],
      "called_by": []
    },
    "QuizRepositoryImpl.findById": {
      "calls": [
        "UUID.fromString",
        "unknown.findById"
      ],
      "called_by": []
    },
    "QuizRepositoryImpl.findAll": {
      "calls": [
        "unknown.findAll"
      ],
      "called_by": []
    },
    "QuizRepositoryImpl.findByUserId": {
      "calls": [
        "unknown.findByAuthorId"
      ],
      "called_by": []
    },
    "QuizRepositoryImpl.findByIdIn": {
      "calls": [
        "Set<String>.stream",
        "unknown.findByIdIn",
        "unknown.map",
        "unknown.toList"
      ],
      "called_by": []
    },
    "QuizRepositoryImpl.findAllPublic": {
      "calls": [
        "unknown.findByStatus"
      ],
      "called_by": []
    },
    "ResourceRepositoryImpl": {
      "calls": [],
      "called_by": []
    },
    "ResourceRepositoryImpl.save": {
      "calls": [
        "unknown.save"
      ],
      "called_by": []
    },
    "ResourceRepositoryImpl.findById": {
      "calls": [
        "UUID.fromString",
        "unknown.findById",
        "unknown.orElse"
      ],
      "called_by": []
    },
    "SavedQuizRepositoryImpl": {
      "calls": [],
      "called_by": []
    },
    "SavedQuizRepositoryImpl.saveQuiz": {
      "calls": [
        "LocalDateTime.now",
        "UUID.fromString",
        "unknown.save",
        "unknown.setQuizId",
        "unknown.setSavedAt",
        "unknown.setUserId"
      ],
      "called_by": []
    },
    "SavedQuizRepositoryImpl.findAllByUserId": {
      "calls": [
        "UUID.fromString",
        "unknown.findByUserId"
      ],
      "called_by": []
    },
    "SavedQuizRepositoryImpl.deleteByQuizIdAndUserId": {
      "calls": [
        "UUID.fromString",
        "unknown.deleteByQuizIdAndUserId"
      ],
      "called_by": []
    },
    "SavedQuizRepositoryImpl.existsByQuizIdAndUserId": {
      "calls": [
        "UUID.fromString",
        "unknown.existsByQuizIdAndUserId"
      ],
      "called_by": []
    },
    "SavedQuizRepositoryImpl.findAllByQuizId": {
      "calls": [
        "UUID.fromString",
        "unknown.findAllByQuizId"
      ],
      "called_by": []
    },
    "SavedQuizRepositoryImpl.update": {
      "calls": [
        "unknown.save"
      ],
      "called_by": []
    },
    "UserRepositoryImpl": {
      "calls": [],
      "called_by": []
    },
    "UserRepositoryImpl.getUserById": {
      "calls": [
        "UUID.fromString",
        "unknown.findById"
      ],
      "called_by": []
    },
    "UserRepositoryImpl.getByUsername": {
      "calls": [
        "unknown.findByUsername"
      ],
      "called_by": []
    },
    "UserRepositoryImpl.getByUsernameForAuth": {
      "calls": [
        "Optional.empty",
        "unknown.findByUserId",
        "unknown.findByUsername",
        "unknown.get",
        "unknown.getId",
        "unknown.isPresent",
        "unknown.setCredentials"
      ],
      "called_by": []
    },
    "UserRepositoryImpl.persist": {
      "calls": [
        "User.getCredentials",
        "unknown.getId",
        "unknown.save",
        "unknown.setUserId"
      ],
      "called_by": []
    },
    "UserRepositoryImpl.getByUserIdList": {
      "calls": [
        "unknown.findAllById"
      ],
      "called_by": []
    },
    "UserRepositoryImpl.basicSearch": {
      "calls": [
        "List.of"
      ],
      "called_by": []
    },
    "UserRepositoryImpl.getByEmail": {
      "calls": [
        "unknown.findByEmail"
      ],
      "called_by": []
    },
    "AuthConfig": {
      "calls": [],
      "called_by": []
    },
    "AuthConfig.securityFilterChain": {
      "calls": [
        "Customizer.withDefaults",
        "HttpSecurity.build",
        "HttpSecurity.cors",
        "unknown.addFilterBefore",
        "unknown.anyRequest",
        "unknown.authenticated",
        "unknown.authenticationEntryPoint",
        "unknown.authenticationProvider",
        "unknown.authorizeHttpRequests",
        "unknown.csrf",
        "unknown.exceptionHandling",
        "unknown.permitAll",
        "unknown.requestMatchers",
        "unknown.requireExplicitSave",
        "unknown.securityContext",
        "unknown.sessionCreationPolicy",
        "unknown.sessionManagement"
      ],
      "called_by": []
    },
    "BeanConfig": {
      "calls": [],
      "called_by": []
    },
    "BeanConfig.userDetailsService": {
      "calls": [],
      "called_by": [
        "BeanConfig.authenticationProvider"
      ]
    },
    "BeanConfig.authenticationProvider": {
      "calls": [
        "BeanConfig.passwordEncoder",
        "BeanConfig.userDetailsService",
        "unknown.setPasswordEncoder",
        "unknown.setUserDetailsService"
      ],
      "called_by": []
    },
    "BeanConfig.authenticationManager": {
      "calls": [
        "AuthenticationConfiguration.getAuthenticationManager"
      ],
      "called_by": []
    },
    "BeanConfig.passwordEncoder": {
      "calls": [],
      "called_by": [
        "BeanConfig.authenticationProvider"
      ]
    },
    "JwtAuthenticationEntryPoint": {
      "calls": [],
      "called_by": []
    },
    "JwtAuthenticationEntryPoint.commence": {
      "calls": [
        "AuthenticationException.getMessage",
        "HttpServletRequest.getServletPath",
        "HttpServletResponse.getOutputStream",
        "HttpServletResponse.setContentType",
        "HttpServletResponse.setStatus",
        "unknown.error",
        "unknown.put",
        "unknown.writeValue"
      ],
      "called_by": []
    },
    "JwtFilter": {
      "calls": [],
      "called_by": []
    },
    "JwtFilter.doFilterInternal": {
      "calls": [
        "Arrays.stream",
        "Arrays.stream(PUBLIC_URLS).anyMatch",
        "FilterChain.doFilter",
        "HttpServletRequest.getHeader",
        "HttpServletRequest.getRequestURI",
        "SecurityContextHolder.getContext",
        "SecurityContextHolder.getContext().getAuthentication",
        "SecurityContextHolder.getContext().setAuthentication",
        "unknown.buildDetails",
        "unknown.error",
        "unknown.extractUsername",
        "unknown.getAuthorities",
        "unknown.getMessage",
        "unknown.isTokenValid",
        "unknown.loadUserByUsername",
        "unknown.setDetails",
        "unknown.startsWith",
        "unknown.substring",
        "unknown.warn"
      ],
      "called_by": []
    },
    "JwtProvider": {
      "calls": [],
      "called_by": []
    },
    "JwtProvider.extractUsername": {
      "calls": [
        "JwtProvider.extractAllClaims",
        "unknown.getSubject"
      ],
      "called_by": [
        "JwtProvider.isTokenValid"
      ]
    },
    "JwtProvider.extractClaims": {
      "calls": [
        "Function<Claims, T>.apply",
        "JwtProvider.extractAllClaims"
      ],
      "called_by": [
        "JwtProvider.extractExpiration"
      ]
    },
    "JwtProvider.extractAllClaims": {
      "calls": [
        "JwtProvider.getSignInKey",
        "Jwts.\n                parserBuilder().\n                setSigningKey(getSignInKey()).\n                build().\n                parseClaimsJws(token).getBody",
        "Jwts.\n                parserBuilder().\n                setSigningKey(getSignInKey()).\n                build().parseClaimsJws",
        "Jwts.\n                parserBuilder().\n                setSigningKey(getSignInKey()).build",
        "Jwts.\n                parserBuilder().setSigningKey",
        "Jwts.parserBuilder"
      ],
      "called_by": [
        "JwtProvider.extractUsername",
        "JwtProvider.extractClaims"
      ]
    },
    "JwtProvider.getSignInKey": {
      "calls": [
        "Decoders.BASE64.decode",
        "Keys.hmacShaKeyFor"
      ],
      "called_by": [
        "JwtProvider.extractAllClaims",
        "JwtProvider.generateToken"
      ]
    },
    "JwtProvider.generateAccessToken": {
      "calls": [
        "Authentication.getPrincipal",
        "JwtProvider.generateToken"
      ],
      "called_by": []
    },
    "JwtProvider.generateRefreshToken": {
      "calls": [
        "Authentication.getPrincipal",
        "JwtProvider.generateToken"
      ],
      "called_by": []
    },
    "JwtProvider.generateToken": {
      "calls": [
        "JwtProvider.buildScope",
        "JwtProvider.getSignInKey",
        "Jwts.builder",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails))\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis() + maxAge))\n                .signWith(getSignInKey(), SignatureAlgorithm.HS256).compact",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails))\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis() + maxAge)).signWith",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails))\n                .setIssuedAt(new Date(System.currentTimeMillis())).setExpiration",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails)).setIssuedAt",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername()).claim",
        "Jwts.builder()\n                .setClaims(extractClaims).setSubject",
        "Jwts.builder().setClaims",
        "System.currentTimeMillis",
        "UserPrincipal.getAuthorities",
        "UserPrincipal.getEmail",
        "UserPrincipal.getId",
        "UserPrincipal.getRoles",
        "UserPrincipal.getUsername"
      ],
      "called_by": [
        "JwtProvider.generateAccessToken",
        "JwtProvider.generateRefreshToken"
      ]
    },
    "JwtProvider.buildScope": {
      "calls": [
        "CollectionUtils.isEmpty",
        "UserPrincipal.getRoles",
        "unknown.add",
        "unknown.forEach",
        "unknown.toString"
      ],
      "called_by": [
        "JwtProvider.generateToken"
      ]
    },
    "JwtProvider.isTokenExpired": {
      "calls": [
        "JwtProvider.extractExpiration",
        "unknown.before"
      ],
      "called_by": [
        "JwtProvider.isTokenValid"
      ]
    },
    "JwtProvider.extractExpiration": {
      "calls": [
        "JwtProvider.extractClaims"
      ],
      "called_by": [
        "JwtProvider.isTokenExpired"
      ]
    },
    "JwtProvider.isTokenValid": {
      "calls": [
        "JwtProvider.extractUsername",
        "JwtProvider.isTokenExpired",
        "UserPrincipal.getUsername",
        "unknown.equals"
      ],
      "called_by": []
    },
    "UserPrincipal": {
      "calls": [],
      "called_by": []
    },
    "UserPrincipal.getAuthorities": {
      "calls": [
        "unknown.map",
        "unknown.stream",
        "unknown.toList"
      ],
      "called_by": [
        "JwtProvider.generateToken"
      ]
    },
    "UserPrincipal.from": {
      "calls": [
        "List.of",
        "UUID.fromString",
        "User.getCredentials",
        "User.getEmail",
        "User.getId",
        "User.getRole",
        "User.getUsername",
        "UserPrincipal.builder",
        "UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername())\n                .email(user.getEmail())\n                .password(user.getCredentials().getPasswordHash())\n                .roles(List.of(user.getRole().toString())).build",
        "UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername())\n                .email(user.getEmail())\n                .password(user.getCredentials().getPasswordHash()).roles",
        "UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername())\n                .email(user.getEmail()).password",
        "UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername()).email",
        "UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString())).username",
        "UserPrincipal.builder().id",
        "unknown.getPasswordHash",
        "unknown.toString"
      ],
      "called_by": [
        "AppUserDetailsService.loadUserByUsername"
      ]
    },
    "UserPrincipal.getPassword": {
      "calls": [],
      "called_by": []
    },
    "UserPrincipal.getUsername": {
      "calls": [],
      "called_by": [
        "JwtProvider.generateToken",
        "JwtProvider.isTokenValid"
      ]
    },
    "UserPrincipal.isAccountNonExpired": {
      "calls": [],
      "called_by": []
    },
    "UserPrincipal.isAccountNonLocked": {
      "calls": [],
      "called_by": []
    },
    "UserPrincipal.isCredentialsNonExpired": {
      "calls": [],
      "called_by": []
    },
    "UserPrincipal.isEnabled": {
      "calls": [],
      "called_by": []
    },
    "AppUserDetailsService": {
      "calls": [],
      "called_by": []
    },
    "AppUserDetailsService.loadUserByUsername": {
      "calls": [
        "UserPrincipal.from",
        "unknown.getByUsernameForAuth",
        "unknown.orElseThrow"
      ],
      "called_by": []
    },
    "BaseService": {
      "calls": [],
      "called_by": []
    },
    "BaseService.getMessage": {
      "calls": [
        "BaseService.getMessage",
        "BusinessError.getCode",
        "BusinessError.getMessage",
        "ObjectUtils.isEmpty"
      ],
      "called_by": [
        "BaseService.getMessage",
        "BaseService.getBusinessError"
      ]
    },
    "BaseService.getRequestValue": {
      "calls": [
        "Class<T>.cast",
        "unknown.getAttribute"
      ],
      "called_by": [
        "BaseService.getRequestStringValue",
        "BaseService.getRequestId",
        "BaseService.getRequestBody"
      ]
    },
    "BaseService.getRequestStringValue": {
      "calls": [
        "BaseService.getRequestValue"
      ],
      "called_by": []
    },
    "BaseService.getRequestId": {
      "calls": [
        "BaseService.getRequestValue",
        "unknown.toString"
      ],
      "called_by": [
        "BaseService.ofSucceeded",
        "BaseService.ofFailed"
      ]
    },
    "BaseService.getRequestBody": {
      "calls": [
        "BaseService.getRequestValue"
      ],
      "called_by": []
    },
    "BaseService.ofSucceeded": {
      "calls": [
        "BaseResponse.ofSucceeded",
        "BaseService.getRequestId"
      ],
      "called_by": []
    },
    "BaseService.ofGetListSucceeded": {
      "calls": [
        "BaseResponse.ofGetListSucceeded"
      ],
      "called_by": []
    },
    "BaseService.ofFailed": {
      "calls": [
        "BaseResponse.ofFailed",
        "BaseService.getBusinessError",
        "BaseService.getRequestId"
      ],
      "called_by": []
    },
    "BaseService.getBusinessError": {
      "calls": [
        "BaseService.getMessage",
        "BusinessError.builder",
        "BusinessError.builder()\n                .code(errorCode)\n                .message(getMessage(errorCode)).build",
        "BusinessError.builder()\n                .code(errorCode).message",
        "BusinessError.builder().code"
      ],
      "called_by": [
        "BaseService.ofFailed"
      ]
    },
    "BaseService.getHeaders": {
      "calls": [
        "unknown.add",
        "unknown.getHeader",
        "unknown.getHeaderNames",
        "unknown.hasMoreElements",
        "unknown.nextElement"
      ],
      "called_by": []
    },
    "BaseService.getErrorCode": {
      "calls": [
        "Integer.parseInt"
      ],
      "called_by": []
    },
    "AuthServiceImpl": {
      "calls": [],
      "called_by": []
    },
    "AuthServiceImpl.register": {
      "calls": [
        "AuthRegisterRequest.getPassword",
        "AuthRegisterRequest.getUsername",
        "UserCredential\n                .builder()\n                .passwordHash(passwordEncoder.encode(request.getPassword()))\n                .userId(userData.getId()).build",
        "UserCredential\n                .builder()\n                .passwordHash(passwordEncoder.encode(request.getPassword())).userId",
        "UserCredential\n                .builder().passwordHash",
        "UserCredential.builder",
        "unknown.authRegisterRequestToUser",
        "unknown.encode",
        "unknown.getByUsername",
        "unknown.getId",
        "unknown.isPresent",
        "unknown.persist",
        "unknown.setCredentials",
        "unknown.setRole",
        "unknown.toString"
      ],
      "called_by": []
    },
    "AuthServiceImpl.getAuthProfile": {
      "calls": [
        "unknown.getUserById",
        "unknown.orElseThrow",
        "unknown.userToAuthProfileResponse"
      ],
      "called_by": []
    },
    "AuthServiceImpl.login": {
      "calls": [
        "AuthLoginRequest.getPassword",
        "AuthLoginRequest.getUsername",
        "unknown.authenticate",
        "unknown.error",
        "unknown.generateAccessToken",
        "unknown.generateRefreshToken",
        "unknown.getMessage"
      ],
      "called_by": []
    },
    "QuestionServiceImpl": {
      "calls": [],
      "called_by": []
    },
    "QuestionServiceImpl.createQuestion": {
      "calls": [],
      "called_by": []
    },
    "QuestionServiceImpl.updateQuestion": {
      "calls": [],
      "called_by": []
    },
    "QuestionServiceImpl.getAllQuestions": {
      "calls": [
        "List.of"
      ],
      "called_by": []
    },
    "QuestionServiceImpl.getMyQuestions": {
      "calls": [
        "List.of"
      ],
      "called_by": []
    },
    "QuestionServiceImpl.getById": {
      "calls": [],
      "called_by": []
    },
    "QuestionServiceImpl.deleteQuestion": {
      "calls": [],
      "called_by": []
    },
    "QuizServiceImpl": {
      "calls": [],
      "called_by": []
    },
    "QuizServiceImpl.createQuiz": {
      "calls": [
        "unknown.createQuizDtoToQuiz",
        "unknown.getId",
        "unknown.save",
        "unknown.setAuthorId",
        "unknown.toString"
      ],
      "called_by": []
    },
    "QuizServiceImpl.updateQuiz": {
      "calls": [
        "CollectionUtils.isEmpty",
        "Collectors.toList",
        "Collectors.toMap",
        "Collectors.toSet",
        "CreateQuizDto.getId",
        "CreateQuizDto.getIsPublic",
        "CreateQuizDto.getQuestions",
        "LocalDateTime.now",
        "UUID.fromString",
        "UUID.randomUUID",
        "unknown.add",
        "unknown.collect",
        "unknown.contains",
        "unknown.countByQuizId",
        "unknown.deleteAll",
        "unknown.filter",
        "unknown.findById",
        "unknown.findByQuizId",
        "unknown.get",
        "unknown.getId",
        "unknown.getOptions",
        "unknown.isEmpty",
        "unknown.map",
        "unknown.orElseThrow",
        "unknown.questionDtoToQuestion",
        "unknown.save",
        "unknown.saveAll",
        "unknown.setCreatedAt",
        "unknown.setId",
        "unknown.setQuestionCount",
        "unknown.setQuizId",
        "unknown.setStatus",
        "unknown.setUpdatedAt",
        "unknown.stream",
        "unknown.toString",
        "unknown.updateQuestionFromDto",
        "unknown.updateQuizFromDto"
      ],
      "called_by": []
    },
    "QuizServiceImpl.getAllPublicQuizzes": {
      "calls": [
        "QuizServiceImpl.getQuizAuthor",
        "unknown.findAllPublic"
      ],
      "called_by": []
    },
    "QuizServiceImpl.getMyQuizzes": {
      "calls": [
        "QuizServiceImpl.getQuizAuthor",
        "unknown.findByUserId"
      ],
      "called_by": []
    },
    "QuizServiceImpl.getById": {
      "calls": [
        "Collections.singletonList",
        "QuizServiceImpl.getQuizAuthor",
        "unknown.findById",
        "unknown.findByQuizId",
        "unknown.orElseThrow",
        "unknown.setQuestions"
      ],
      "called_by": [
        "QuizServiceImpl.getAttempt"
      ]
    },
    "QuizServiceImpl.deleteQuiz": {
      "calls": [
        "LocalDateTime.now",
        "unknown.findById",
        "unknown.orElseThrow",
        "unknown.save",
        "unknown.setDeletedAt"
      ],
      "called_by": []
    },
    "QuizServiceImpl.startQuiz": {
      "calls": [
        "UUID.fromString",
        "unknown.findById",
        "unknown.getId",
        "unknown.orElseThrow",
        "unknown.save",
        "unknown.setCompletedAt",
        "unknown.setCorrectAnswers",
        "unknown.setPassed",
        "unknown.setQuizId",
        "unknown.setScore",
        "unknown.setTimeSpent",
        "unknown.setUserId",
        "unknown.toString"
      ],
      "called_by": []
    },
    "QuizServiceImpl.submitQuizQuestion": {
      "calls": [
        "BigDecimal.valueOf",
        "CollectionUtils.isEmpty",
        "Collections.sort",
        "Collectors.toList",
        "Duration.between",
        "Duration.between(start, end).toMinutes",
        "FileUtils.convertToBase64",
        "JsonUtils.toJsonString",
        "LocalDateTime.now",
        "Objects.equals",
        "PronunciationAccuracyRequestDto.builder",
        "PronunciationAccuracyRequestDto.builder()\n                                    .base64Audio(base64File)\n                                    .text(question.getPronunciationText()).build",
        "PronunciationAccuracyRequestDto.builder()\n                                    .base64Audio(base64File).text",
        "PronunciationAccuracyRequestDto.builder().base64Audio",
        "QuestionType.MULTIPLE_CHOICE.name",
        "QuestionType.MULTIPLE_CHOICE.name().equals",
        "SubmitAnswerRequest.getAnswerText",
        "SubmitAnswerRequest.getAudioUrl",
        "SubmitAnswerRequest.getFillInBlanksAnswers",
        "SubmitAnswerRequest.getQuestionId",
        "SubmitAnswerRequest.getSelectedOptions",
        "SubmitAnswerRequest.getTimeTaken",
        "SubmitAnswerRequest.getUserAnswerTrueFalse",
        "System.err.println",
        "UUID.fromString",
        "unknown.add",
        "unknown.collect",
        "unknown.contains",
        "unknown.delete",
        "unknown.downloadResourceFromUrl",
        "unknown.equals",
        "unknown.equalsIgnoreCase",
        "unknown.error",
        "unknown.exists",
        "unknown.filter",
        "unknown.findById",
        "unknown.findByQuizAttemptId",
        "unknown.get",
        "unknown.getAcceptRate",
        "unknown.getAccuracy",
        "unknown.getCompletedAt",
        "unknown.getCorrectAnswer",
        "unknown.getCorrectAnswers",
        "unknown.getCorrectBlanks",
        "unknown.getCreatedAt",
        "unknown.getFirst",
        "unknown.getId",
        "unknown.getMessage",
        "unknown.getOptions",
        "unknown.getPoints",
        "unknown.getPronunciationAccuracy",
        "unknown.getPronunciationText",
        "unknown.getQuestionId",
        "unknown.getQuizId",
        "unknown.getScore",
        "unknown.getScoreAchieved",
        "unknown.getTimeLimit",
        "unknown.getTrueFalseAnswer",
        "unknown.getType",
        "unknown.isCorrect",
        "unknown.isEmpty",
        "unknown.map",
        "unknown.orElseThrow",
        "unknown.plusMinutes",
        "unknown.save",
        "unknown.setAnswerText",
        "unknown.setAudioUrl",
        "unknown.setCompletedAt",
        "unknown.setCorrect",
        "unknown.setCorrectAnswers",
        "unknown.setFillInBlanksAnswers",
        "unknown.setQuestionId",
        "unknown.setQuizAttemptId",
        "unknown.setScore",
        "unknown.setScoreAchieved",
        "unknown.setSelectedAnswers",
        "unknown.setTimeSpent",
        "unknown.setTimeTaken",
        "unknown.size",
        "unknown.sort",
        "unknown.sorted",
        "unknown.stream",
        "unknown.subtract",
        "unknown.toList",
        "unknown.toLowerCase",
        "unknown.toString",
        "unknown.trim"
      ],
      "called_by": []
    },
    "QuizServiceImpl.getMyQuizAttempts": {
      "calls": [
        "CollectionUtils.isEmpty",
        "Collections.emptyList",
        "Collectors.groupingBy",
        "Collectors.toSet",
        "QuizServiceImpl.getQuizAuthor",
        "UUID.fromString",
        "unknown.collect",
        "unknown.findByIdIn",
        "unknown.findByUserId",
        "unknown.get",
        "unknown.getId",
        "unknown.map",
        "unknown.setQuizAttempts",
        "unknown.stream"
      ],
      "called_by": []
    },
    "QuizServiceImpl.getAttempt": {
      "calls": [
        "Collections.singletonList",
        "QuizServiceImpl.getById",
        "QuizServiceImpl.getQuizAuthor",
        "unknown.findById",
        "unknown.findByQuizAttemptId",
        "unknown.getQuizId",
        "unknown.orElseThrow",
        "unknown.setAnswers",
        "unknown.setQuiz",
        "unknown.toString"
      ],
      "called_by": []
    },
    "QuizServiceImpl.submitQuizComplete": {
      "calls": [
        "LocalDateTime.now",
        "UUID.equals",
        "unknown.findById",
        "unknown.getCompletedAt",
        "unknown.getUserId",
        "unknown.info",
        "unknown.orElseThrow",
        "unknown.save",
        "unknown.setCompletedAt"
      ],
      "called_by": []
    },
    "QuizServiceImpl.getQuizStatsById": {
      "calls": [
        "Collections.singletonList",
        "QuizServiceImpl.getQuizAuthor",
        "unknown.filter",
        "unknown.findAllByQuizId",
        "unknown.findById",
        "unknown.findByQuizId",
        "unknown.forEach",
        "unknown.getId",
        "unknown.getUserById",
        "unknown.getUserId",
        "unknown.ifPresent",
        "unknown.map",
        "unknown.orElse",
        "unknown.orElseThrow",
        "unknown.setQuestions",
        "unknown.setQuizAttempts",
        "unknown.setSavedByUsers",
        "unknown.stream",
        "unknown.toList",
        "unknown.toString"
      ],
      "called_by": []
    },
    "QuizServiceImpl.saveQuiz": {
      "calls": [
        "UUID.toString",
        "unknown.saveQuiz"
      ],
      "called_by": []
    },
    "QuizServiceImpl.getSavedQuizzes": {
      "calls": [
        "CollectionUtils.isEmpty",
        "Collections.emptyList",
        "Collectors.toSet",
        "QuizServiceImpl.getQuizAuthor",
        "UUID.toString",
        "unknown.collect",
        "unknown.findAllByUserId",
        "unknown.findByIdIn",
        "unknown.map",
        "unknown.stream"
      ],
      "called_by": []
    },
    "QuizServiceImpl.unsaveQuiz": {
      "calls": [
        "LocalDateTime.now",
        "unknown.equals",
        "unknown.filter",
        "unknown.findAllByQuizId",
        "unknown.findFirst",
        "unknown.getUserId",
        "unknown.orElseThrow",
        "unknown.setDeletedAt",
        "unknown.setSavedAt",
        "unknown.stream",
        "unknown.update"
      ],
      "called_by": []
    },
    "QuizServiceImpl.getUserSavedQuiz": {
      "calls": [
        "UUID.toString",
        "unknown.findAllByUserId",
        "unknown.forEach",
        "unknown.getUserById",
        "unknown.getUserId",
        "unknown.ifPresent",
        "unknown.toString"
      ],
      "called_by": []
    },
    "QuizServiceImpl.getQuizAuthor": {
      "calls": [
        "List<Quiz>.forEach",
        "unknown.getAuthorId",
        "unknown.getUserById",
        "unknown.orElse",
        "unknown.setAuthor",
        "unknown.toString"
      ],
      "called_by": [
        "QuizServiceImpl.getAllPublicQuizzes",
        "QuizServiceImpl.getMyQuizzes",
        "QuizServiceImpl.getById",
        "QuizServiceImpl.getMyQuizAttempts",
        "QuizServiceImpl.getAttempt",
        "QuizServiceImpl.getQuizStatsById",
        "QuizServiceImpl.getSavedQuizzes"
      ]
    },
    "ResourceServiceImpl": {
      "calls": [],
      "called_by": []
    },
    "ResourceServiceImpl.uploadResource": {
      "calls": [
        "MultipartFile.getContentType",
        "MultipartFile.getOriginalFilename",
        "MultipartFile.getSize",
        "Resource.builder",
        "Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType())\n                .sizeBytes(file.getSize())\n                .cloudId(storageService.getProviderName()).build",
        "Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType())\n                .sizeBytes(file.getSize()).cloudId",
        "Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType()).sizeBytes",
        "Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId).extension",
        "Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url).ownerId",
        "Resource.builder()\n                .name(file.getOriginalFilename()).url",
        "Resource.builder().name",
        "unknown.getProviderName",
        "unknown.save",
        "unknown.uploadFile"
      ],
      "called_by": []
    },
    "ResourceServiceImpl.getResource": {
      "calls": [
        "GetResourceResponse.builder",
        "GetResourceResponse.builder()\n                    .name(resource.getName())\n                    .url(url).build",
        "GetResourceResponse.builder()\n                    .name(resource.getName()).url",
        "GetResourceResponse.builder().name",
        "Objects.isNull",
        "UUID.equals",
        "UUID.toString",
        "unknown.findById",
        "unknown.getFileUrl",
        "unknown.getMessage",
        "unknown.getName",
        "unknown.getOwnerId",
        "unknown.getUrl",
        "unknown.info"
      ],
      "called_by": []
    },
    "ResourceServiceImpl.downloadResourceFromUrl": {
      "calls": [
        "File.createTempFile",
        "Path.of",
        "Path.of(uri.getPath()).getFileName",
        "Path.of(uri.getPath()).getFileName().toString",
        "URI.create",
        "unknown.getPath",
        "unknown.openStream",
        "unknown.read",
        "unknown.toURL",
        "unknown.write"
      ],
      "called_by": []
    },
    "PronunciationServiceImpl": {
      "calls": [],
      "called_by": []
    },
    "PronunciationServiceImpl.getSample": {
      "calls": [
        "GetSampleRequestDto.getLevel",
        "unknown.getSample",
        "unknown.getValue",
        "unknown.setCategory",
        "unknown.setLanguage",
        "unknown.toGetPronunciationSampleResponseDto",
        "unknown.toSampleRequest"
      ],
      "called_by": []
    },
    "PronunciationServiceImpl.getAccuracy": {
      "calls": [
        "unknown.getAccuracyFromRecordedAudio",
        "unknown.setLanguage",
        "unknown.toPronunciationAccuracyRequest",
        "unknown.toPronunciationAccuracyResponseDto"
      ],
      "called_by": []
    },
    "GetSampleRequest": {
      "calls": [],
      "called_by": []
    },
    "PronunciationAccuracyRequest": {
      "calls": [],
      "called_by": []
    },
    "GetSampleResponse": {
      "calls": [],
      "called_by": []
    },
    "PronunciationAccuracyResponse": {
      "calls": [],
      "called_by": []
    },
    "AwsStorageServiceImpl": {
      "calls": [],
      "called_by": []
    },
    "AwsStorageServiceImpl.getFileUrl": {
      "calls": [
        "String.format"
      ],
      "called_by": [
        "AwsStorageServiceImpl.uploadFile"
      ]
    },
    "AwsStorageServiceImpl.uploadFile": {
      "calls": [
        "AwsStorageServiceImpl.convertMultiPartFileToFile",
        "AwsStorageServiceImpl.getFileUrl",
        "MultipartFile.getContentType",
        "MultipartFile.getOriginalFilename",
        "Objects.requireNonNull",
        "Objects.requireNonNull(file.getContentType()).split",
        "Objects.requireNonNull(file.getOriginalFilename()).replace",
        "PutObjectRequest.builder",
        "PutObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .contentType(file.getContentType()).build",
        "PutObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName).contentType",
        "PutObjectRequest.builder()\n                    .bucket(bucketName).key",
        "PutObjectRequest.builder().bucket",
        "RequestBody.fromFile",
        "System.currentTimeMillis",
        "unknown.delete",
        "unknown.error",
        "unknown.exists",
        "unknown.getAbsolutePath",
        "unknown.getMessage",
        "unknown.putObject",
        "unknown.warn"
      ],
      "called_by": []
    },
    "AwsStorageServiceImpl.getProviderName": {
      "calls": [],
      "called_by": []
    },
    "AwsStorageServiceImpl.downloadFile": {
      "calls": [
        "GetObjectRequest.builder",
        "GetObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName).build",
        "GetObjectRequest.builder()\n                    .bucket(bucketName).key",
        "GetObjectRequest.builder().bucket",
        "unknown.error",
        "unknown.getMessage",
        "unknown.getObject",
        "unknown.readAllBytes"
      ],
      "called_by": []
    },
    "AwsStorageServiceImpl.deleteFile": {
      "calls": [
        "DeleteObjectRequest.builder",
        "DeleteObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName).build",
        "DeleteObjectRequest.builder()\n                    .bucket(bucketName).key",
        "DeleteObjectRequest.builder().bucket",
        "unknown.deleteObject",
        "unknown.error",
        "unknown.getMessage"
      ],
      "called_by": []
    },
    "GoogleStorageServiceImpl": {
      "calls": [],
      "called_by": []
    },
    "GoogleStorageServiceImpl.getFileUrl": {
      "calls": [
        "String.format"
      ],
      "called_by": []
    },
    "GoogleStorageServiceImpl.uploadFile": {
      "calls": [
        "BlobId.of",
        "BlobInfo.newBuilder",
        "BlobInfo.newBuilder(blobId)\n                    .setContentType(contentType).build",
        "BlobInfo.newBuilder(blobId).setContentType",
        "File.createTempFile",
        "Files.delete",
        "Files.newInputStream",
        "GoogleCredentials.fromStream",
        "MultipartFile.getContentType",
        "MultipartFile.getOriginalFilename",
        "MultipartFile.isEmpty",
        "MultipartFile.transferTo",
        "Objects.requireNonNull",
        "StorageOptions.newBuilder",
        "StorageOptions.newBuilder().setProjectId",
        "StorageOptions.newBuilder().setProjectId(projectId).setCredentials",
        "StorageOptions.newBuilder().setProjectId(projectId).setCredentials(GoogleCredentials.fromStream(inputStream)).build",
        "StorageOptions.newBuilder().setProjectId(projectId).setCredentials(GoogleCredentials.fromStream(inputStream)).build().getService",
        "UUID.randomUUID",
        "UUID.randomUUID().toString",
        "unknown.createFrom",
        "unknown.debug",
        "unknown.error",
        "unknown.exists",
        "unknown.getAbsolutePath",
        "unknown.getInputStream",
        "unknown.getMessage",
        "unknown.info",
        "unknown.lastIndexOf",
        "unknown.length",
        "unknown.substring",
        "unknown.toPath",
        "unknown.warn"
      ],
      "called_by": []
    },
    "GoogleStorageServiceImpl.getProviderName": {
      "calls": [],
      "called_by": []
    },
    "GoogleStorageServiceImpl.downloadFile": {
      "calls": [
        "BlobId.of",
        "StorageOptions.newBuilder",
        "StorageOptions.newBuilder().setProjectId",
        "StorageOptions.newBuilder().setProjectId(projectId).build",
        "StorageOptions.newBuilder().setProjectId(projectId).build().getService",
        "unknown.error",
        "unknown.getMessage",
        "unknown.readAllBytes"
      ],
      "called_by": []
    },
    "GoogleStorageServiceImpl.deleteFile": {
      "calls": [
        "BlobId.of",
        "StorageOptions.newBuilder",
        "StorageOptions.newBuilder().setProjectId",
        "StorageOptions.newBuilder().setProjectId(projectId).build",
        "StorageOptions.newBuilder().setProjectId(projectId).build().getService",
        "unknown.delete",
        "unknown.error",
        "unknown.getMessage",
        "unknown.info",
        "unknown.warn"
      ],
      "called_by": []
    },
    "StorageFactory": {
      "calls": [],
      "called_by": []
    },
    "StorageFactory.getStorageService": {
      "calls": [
        "unknown.equalsIgnoreCase",
        "unknown.filter",
        "unknown.findFirst",
        "unknown.getProviderName",
        "unknown.orElseThrow",
        "unknown.stream"
      ],
      "called_by": []
    },
    "StorageService": {
      "calls": [],
      "called_by": []
    },
    "StorageService.getFileUrl": {
      "calls": [],
      "called_by": []
    },
    "StorageService.uploadFile": {
      "calls": [],
      "called_by": []
    },
    "StorageService.getProviderName": {
      "calls": [],
      "called_by": []
    },
    "StorageService.downloadFile": {
      "calls": [],
      "called_by": []
    },
    "StorageService.deleteFile": {
      "calls": [],
      "called_by": []
    },
    "StorageService.convertMultiPartFileToFile": {
      "calls": [
        "Files.createTempFile",
        "MultipartFile.getOriginalFilename",
        "MultipartFile.transferTo",
        "Objects.requireNonNull",
        "unknown.debug",
        "unknown.lastIndexOf",
        "unknown.substring",
        "unknown.toAbsolutePath",
        "unknown.toFile"
      ],
      "called_by": []
    },
    "FileUtils": {
      "calls": [],
      "called_by": []
    },
    "FileUtils.convertToBase64": {
      "calls": [
        "Base64.getEncoder",
        "Base64.getEncoder().encodeToString",
        "File.toPath",
        "Files.readAllBytes",
        "unknown.getMessage",
        "unknown.warn"
      ],
      "called_by": [
        "QuizServiceImpl.submitQuizQuestion"
      ]
    },
    "FunctionHelper": {
      "calls": [],
      "called_by": []
    },
    "FunctionHelper.getNullPropertyNames": {
      "calls": [
        "unknown.add",
        "unknown.getName",
        "unknown.getPropertyDescriptors",
        "unknown.getPropertyValue",
        "unknown.size",
        "unknown.toArray"
      ],
      "called_by": []
    },
    "FunctionHelper.generateRandomString": {
      "calls": [
        "ALPHA_NUMERIC_STRING.charAt",
        "ALPHA_NUMERIC_STRING.length",
        "Math.random",
        "unknown.append",
        "unknown.toString"
      ],
      "called_by": []
    },
    "JsonUtils": {
      "calls": [],
      "called_by": []
    },
    "JsonUtils.getGenericObject": {
      "calls": [
        "unknown.configure",
        "unknown.convertValue",
        "unknown.enable"
      ],
      "called_by": [
        "LogsActivityAOPHandler.displayLog"
      ]
    },
    "JsonUtils.getEntityFromJsonStr": {
      "calls": [
        "unknown.configure",
        "unknown.enable",
        "unknown.readValue"
      ],
      "called_by": []
    },
    "JsonUtils.convertObjectToString": {
      "calls": [
        "unknown.writeValueAsString"
      ],
      "called_by": [
        "LogsActivityAOPHandler.logsActivityAnnotation"
      ]
    },
    "JsonUtils.toJsonString": {
      "calls": [
        "unknown.configure",
        "unknown.printStackTrace",
        "unknown.writeValueAsString"
      ],
      "called_by": [
        "QuizServiceImpl.submitQuizQuestion"
      ]
    },
    "JsonUtils.readObject": {
      "calls": [
        "unknown.configure",
        "unknown.readValue"
      ],
      "called_by": []
    },
    "JsonUtils.readListObject": {
      "calls": [
        "unknown.configure",
        "unknown.constructCollectionType",
        "unknown.getTypeFactory",
        "unknown.readValue",
        "unknown.writeValueAsString"
      ],
      "called_by": []
    },
    "Utils": {
      "calls": [],
      "called_by": []
    },
    "Utils.genAutoId": {
      "calls": [
        "Math.abs",
        "MurmurHash3.hash64",
        "String.getBytes",
        "StringUtils.isBlank",
        "UUID.randomUUID",
        "UUID.randomUUID().toString"
      ],
      "called_by": []
    },
    "Utils.redact": {
      "calls": [
        "ObjectUtils.isEmpty",
        "Pattern.compile",
        "Pattern.compile(String.format(\"\\\"%s\\\"%s\", key, REGEX_FILTER_KEY)).matcher",
        "String.format",
        "String.replace",
        "unknown.equals",
        "unknown.find",
        "unknown.group",
        "unknown.trim"
      ],
      "called_by": [
        "LogsActivityAOPHandler.logsActivityAnnotation",
        "LogsActivityAOPHandler.displayLog"
      ]
    },
    "Utils.convertListToMap": {
      "calls": [
        "Collectors.toMap",
        "Function.identity",
        "List<T>.stream",
        "unknown.collect"
      ],
      "called_by": []
    },
    "Utils.convertDateToyyyyMMdd": {
      "calls": [
        "unknown.format"
      ],
      "called_by": []
    },
    "Utils.isMatchRegex": {
      "calls": [
        "Pattern.compile",
        "unknown.error",
        "unknown.getMessage",
        "unknown.matcher",
        "unknown.matches"
      ],
      "called_by": []
    },
    "Utils.getBlankProperties": {
      "calls": [
        "Arrays.stream",
        "Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        return value == null || (value instanceof String && StringUtils.isBlank((String) value));\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName).toArray",
        "Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        return value == null || (value instanceof String && StringUtils.isBlank((String) value));\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                }).map",
        "Arrays.stream(obj.getClass().getDeclaredFields()).filter",
        "Object.getClass",
        "StringUtils.isBlank",
        "unknown.get",
        "unknown.getDeclaredFields",
        "unknown.setAccessible"
      ],
      "called_by": []
    },
    "Utils.getExistedProperties": {
      "calls": [
        "Arrays.stream",
        "Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        if (value instanceof String) {\n                            return !StringUtils.isBlank((String) value);\n                        }\n                        return value != null;\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName).toArray",
        "Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        if (value instanceof String) {\n                            return !StringUtils.isBlank((String) value);\n                        }\n                        return value != null;\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                }).map",
        "Arrays.stream(obj.getClass().getDeclaredFields()).filter",
        "Object.getClass",
        "StringUtils.isBlank",
        "unknown.get",
        "unknown.getDeclaredFields",
        "unknown.setAccessible"
      ],
      "called_by": []
    },
    "Utils.enumOf": {
      "calls": [
        "Arrays.stream",
        "Arrays.stream(enumType.getEnumConstants())\n                .filter(e -> e.name().equalsIgnoreCase(value))\n                .findFirst().orElse",
        "Arrays.stream(enumType.getEnumConstants())\n                .filter(e -> e.name().equalsIgnoreCase(value)).findFirst",
        "Arrays.stream(enumType.getEnumConstants()).filter",
        "Class<T>.getEnumConstants",
        "unknown.equalsIgnoreCase",
        "unknown.name"
      ],
      "called_by": []
    },
    "Utils.stringToLocalDateTime": {
      "calls": [
        "LocalDateTime.parse",
        "StringUtils.isBlank"
      ],
      "called_by": []
    },
    "OnestudyApplicationTests": {
      "calls": [],
      "called_by": []
    },
    "OnestudyApplicationTests.contextLoads": {
      "calls": [],
      "called_by": []
    }
  }
}